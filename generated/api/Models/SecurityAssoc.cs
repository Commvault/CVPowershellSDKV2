// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// A list of users or user groups each having a specific set of roles that determine the kind of operations they can perform
    /// on the entity.
    /// </summary>
    public partial class SecurityAssoc :
        Commvault.Powershell.Models.ISecurityAssoc,
        Commvault.Powershell.Models.ISecurityAssocInternal
    {

        /// <summary>Internal Acessors for ExternalUserGroup</summary>
        Commvault.Powershell.Models.IExternalUserGroup Commvault.Powershell.Models.ISecurityAssocInternal.ExternalUserGroup { get => (this._externalUserGroup = this._externalUserGroup ?? new Commvault.Powershell.Models.ExternalUserGroup()); set { {_externalUserGroup = value;} } }

        /// <summary>Internal Acessors for Role</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.ISecurityAssocInternal.Role { get => (this._role = this._role ?? new Commvault.Powershell.Models.IdName()); set { {_role = value;} } }

        /// <summary>Internal Acessors for User</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.ISecurityAssocInternal.User { get => (this._user = this._user ?? new Commvault.Powershell.Models.IdName()); set { {_user = value;} } }

        /// <summary>Internal Acessors for UserGroup</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.ISecurityAssocInternal.UserGroup { get => (this._userGroup = this._userGroup ?? new Commvault.Powershell.Models.IdName()); set { {_userGroup = value;} } }

        /// <summary>Backing field for <see cref="ExternalUserGroup" /> property.</summary>
        private Commvault.Powershell.Models.IExternalUserGroup _externalUserGroup;

        /// <summary>External User Group Entity</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IExternalUserGroup ExternalUserGroup { get => (this._externalUserGroup = this._externalUserGroup ?? new Commvault.Powershell.Models.ExternalUserGroup()); set => this._externalUserGroup = value; }

        /// <summary>User Group Id</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? ExternalUserGroupId { get => ((Commvault.Powershell.Models.IExternalUserGroupInternal)ExternalUserGroup).Id; set => ((Commvault.Powershell.Models.IExternalUserGroupInternal)ExternalUserGroup).Id = value ?? default(int); }

        /// <summary>External Group Name</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ExternalUserGroupName { get => ((Commvault.Powershell.Models.IExternalUserGroupInternal)ExternalUserGroup).Name; set => ((Commvault.Powershell.Models.IExternalUserGroupInternal)ExternalUserGroup).Name = value ?? null; }

        /// <summary>Provider id</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? ExternalUserGroupProviderId { get => ((Commvault.Powershell.Models.IExternalUserGroupInternal)ExternalUserGroup).ProviderId; set => ((Commvault.Powershell.Models.IExternalUserGroupInternal)ExternalUserGroup).ProviderId = value ?? default(int); }

        /// <summary>Provider Name</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ExternalUserGroupProviderName { get => ((Commvault.Powershell.Models.IExternalUserGroupInternal)ExternalUserGroup).ProviderName; set => ((Commvault.Powershell.Models.IExternalUserGroupInternal)ExternalUserGroup).ProviderName = value ?? null; }

        /// <summary>Backing field for <see cref="IsCreatorAssociation" /> property.</summary>
        private bool? _isCreatorAssociation;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? IsCreatorAssociation { get => this._isCreatorAssociation; set => this._isCreatorAssociation = value; }

        /// <summary>Backing field for <see cref="PermissionList" /> property.</summary>
        private Commvault.Powershell.Models.IPermissionResp[] _permissionList;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IPermissionResp[] PermissionList { get => this._permissionList; set => this._permissionList = value; }

        /// <summary>Backing field for <see cref="Role" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _role;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Role { get => (this._role = this._role ?? new Commvault.Powershell.Models.IdName()); set => this._role = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? RoleId { get => ((Commvault.Powershell.Models.IIdNameInternal)Role).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Role).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string RoleName { get => ((Commvault.Powershell.Models.IIdNameInternal)Role).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Role).Name = value ?? null; }

        /// <summary>Backing field for <see cref="User" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _user;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName User { get => (this._user = this._user ?? new Commvault.Powershell.Models.IdName()); set => this._user = value; }

        /// <summary>Backing field for <see cref="UserGroup" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _userGroup;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName UserGroup { get => (this._userGroup = this._userGroup ?? new Commvault.Powershell.Models.IdName()); set => this._userGroup = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? UserGroupId { get => ((Commvault.Powershell.Models.IIdNameInternal)UserGroup).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)UserGroup).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UserGroupName { get => ((Commvault.Powershell.Models.IIdNameInternal)UserGroup).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)UserGroup).Name = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? UserId { get => ((Commvault.Powershell.Models.IIdNameInternal)User).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)User).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UserName { get => ((Commvault.Powershell.Models.IIdNameInternal)User).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)User).Name = value ?? null; }

        /// <summary>Creates an new <see cref="SecurityAssoc" /> instance.</summary>
        public SecurityAssoc()
        {

        }
    }
    /// A list of users or user groups each having a specific set of roles that determine the kind of operations they can perform
    /// on the entity.
    public partial interface ISecurityAssoc :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>User Group Id</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User Group Id",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? ExternalUserGroupId { get; set; }
        /// <summary>External Group Name</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"External Group Name",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ExternalUserGroupName { get; set; }
        /// <summary>Provider id</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Provider id",
        SerializedName = @"providerId",
        PossibleTypes = new [] { typeof(int) })]
        int? ExternalUserGroupProviderId { get; set; }
        /// <summary>Provider Name</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Provider Name",
        SerializedName = @"providerName",
        PossibleTypes = new [] { typeof(string) })]
        string ExternalUserGroupProviderName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"isCreatorAssociation",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsCreatorAssociation { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"permissionList",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IPermissionResp) })]
        Commvault.Powershell.Models.IPermissionResp[] PermissionList { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? RoleId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string RoleName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? UserGroupId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string UserGroupName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? UserId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string UserName { get; set; }

    }
    /// A list of users or user groups each having a specific set of roles that determine the kind of operations they can perform
    /// on the entity.
    internal partial interface ISecurityAssocInternal

    {
        /// <summary>External User Group Entity</summary>
        Commvault.Powershell.Models.IExternalUserGroup ExternalUserGroup { get; set; }
        /// <summary>User Group Id</summary>
        int? ExternalUserGroupId { get; set; }
        /// <summary>External Group Name</summary>
        string ExternalUserGroupName { get; set; }
        /// <summary>Provider id</summary>
        int? ExternalUserGroupProviderId { get; set; }
        /// <summary>Provider Name</summary>
        string ExternalUserGroupProviderName { get; set; }

        bool? IsCreatorAssociation { get; set; }

        Commvault.Powershell.Models.IPermissionResp[] PermissionList { get; set; }

        Commvault.Powershell.Models.IIdName Role { get; set; }

        int? RoleId { get; set; }

        string RoleName { get; set; }

        Commvault.Powershell.Models.IIdName User { get; set; }

        Commvault.Powershell.Models.IIdName UserGroup { get; set; }

        int? UserGroupId { get; set; }

        string UserGroupName { get; set; }

        int? UserId { get; set; }

        string UserName { get; set; }

    }
}