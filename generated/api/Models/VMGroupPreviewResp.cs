// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>vmGroupPreviewResponse</summary>
    public partial class VMGroupPreviewResp :
        Commvault.Powershell.Models.IVMGroupPreviewResp,
        Commvault.Powershell.Models.IVMGroupPreviewRespInternal
    {

        /// <summary>Internal Acessors for VMGroup</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IVMGroupPreviewRespInternal.VMGroup { get => (this._vMGroup = this._vMGroup ?? new Commvault.Powershell.Models.IdName()); set { {_vMGroup = value;} } }

        /// <summary>Internal Acessors for VMList</summary>
        Commvault.Powershell.Models.IVMPreviewInfo Commvault.Powershell.Models.IVMGroupPreviewRespInternal.VMList { get => (this._vMList = this._vMList ?? new Commvault.Powershell.Models.VMPreviewInfo()); set { {_vMList = value;} } }

        /// <summary>Backing field for <see cref="ManagementVersion" /> property.</summary>
        private string _managementVersion;

        /// <summary>management Version of the Hypervisor like vcenter version , Hyperv version</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string ManagementVersion { get => this._managementVersion; set => this._managementVersion = value; }

        /// <summary>Backing field for <see cref="ProtectedVMCount" /> property.</summary>
        private int? _protectedVMCount;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? ProtectedVMCount { get => this._protectedVMCount; set => this._protectedVMCount = value; }

        /// <summary>Backing field for <see cref="VMGroup" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _vMGroup;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName VMGroup { get => (this._vMGroup = this._vMGroup ?? new Commvault.Powershell.Models.IdName()); set => this._vMGroup = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? VMGroupId { get => ((Commvault.Powershell.Models.IIdNameInternal)VMGroup).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)VMGroup).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string VMGroupName { get => ((Commvault.Powershell.Models.IIdNameInternal)VMGroup).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)VMGroup).Name = value ?? null; }

        /// <summary>Backing field for <see cref="VMList" /> property.</summary>
        private Commvault.Powershell.Models.IVMPreviewInfo _vMList;

        /// <summary>vmPreviewInfo</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IVMPreviewInfo VMList { get => (this._vMList = this._vMList ?? new Commvault.Powershell.Models.VMPreviewInfo()); set => this._vMList = value; }

        /// <summary>GUID of the VM</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string VMListGuid { get => ((Commvault.Powershell.Models.IVMPreviewInfoInternal)VMList).Guid; set => ((Commvault.Powershell.Models.IVMPreviewInfoInternal)VMList).Guid = value ?? null; }

        /// <summary>host of the VM</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string VMListHost { get => ((Commvault.Powershell.Models.IVMPreviewInfoInternal)VMList).Host; set => ((Commvault.Powershell.Models.IVMPreviewInfoInternal)VMList).Host = value ?? null; }

        /// <summary>name of the VM</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string VMListName { get => ((Commvault.Powershell.Models.IVMPreviewInfoInternal)VMList).Name; set => ((Commvault.Powershell.Models.IVMPreviewInfoInternal)VMList).Name = value ?? null; }

        /// <summary>
        /// Power status of the VM from the hypervisor Eg- Powered on , Running if the VM is powered on . Values might differ based
        /// on hypervisor type
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string VMListPoweredStatus { get => ((Commvault.Powershell.Models.IVMPreviewInfoInternal)VMList).PoweredStatus; set => ((Commvault.Powershell.Models.IVMPreviewInfoInternal)VMList).PoweredStatus = value ?? null; }

        /// <summary>
        /// if Installed then the corresponding tools version of the VM. VMWare - VMWare tools version Hyper-V - Integration services
        /// version Values might differ based on hypervisor type status would be not installed if tools is not installed.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string VMListToolStatus { get => ((Commvault.Powershell.Models.IVMPreviewInfoInternal)VMList).ToolStatus; set => ((Commvault.Powershell.Models.IVMPreviewInfoInternal)VMList).ToolStatus = value ?? null; }

        /// <summary>Creates an new <see cref="VMGroupPreviewResp" /> instance.</summary>
        public VMGroupPreviewResp()
        {

        }
    }
    /// vmGroupPreviewResponse
    public partial interface IVMGroupPreviewResp :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>management Version of the Hypervisor like vcenter version , Hyperv version</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"management Version of the Hypervisor like vcenter version , Hyperv version",
        SerializedName = @"managementVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ManagementVersion { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"ProtectedVMCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ProtectedVMCount { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? VMGroupId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string VMGroupName { get; set; }
        /// <summary>GUID of the VM</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"GUID  of the VM",
        SerializedName = @"GUID",
        PossibleTypes = new [] { typeof(string) })]
        string VMListGuid { get; set; }
        /// <summary>host of the VM</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"host of the VM",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        string VMListHost { get; set; }
        /// <summary>name of the VM</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"name  of the VM",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string VMListName { get; set; }
        /// <summary>
        /// Power status of the VM from the hypervisor Eg- Powered on , Running if the VM is powered on . Values might differ based
        /// on hypervisor type
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Power status of the VM from the hypervisor Eg- Powered on ,  Running if the VM is powered on . Values might differ based on hypervisor type",
        SerializedName = @"poweredStatus",
        PossibleTypes = new [] { typeof(string) })]
        string VMListPoweredStatus { get; set; }
        /// <summary>
        /// if Installed then the corresponding tools version of the VM. VMWare - VMWare tools version Hyper-V - Integration services
        /// version Values might differ based on hypervisor type status would be not installed if tools is not installed.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"if Installed then the corresponding tools version of the VM. VMWare - VMWare tools version Hyper-V - Integration services version Values might differ based on hypervisor type status would be not installed if tools is not installed.",
        SerializedName = @"toolStatus",
        PossibleTypes = new [] { typeof(string) })]
        string VMListToolStatus { get; set; }

    }
    /// vmGroupPreviewResponse
    internal partial interface IVMGroupPreviewRespInternal

    {
        /// <summary>management Version of the Hypervisor like vcenter version , Hyperv version</summary>
        string ManagementVersion { get; set; }

        int? ProtectedVMCount { get; set; }

        Commvault.Powershell.Models.IIdName VMGroup { get; set; }

        int? VMGroupId { get; set; }

        string VMGroupName { get; set; }
        /// <summary>vmPreviewInfo</summary>
        Commvault.Powershell.Models.IVMPreviewInfo VMList { get; set; }
        /// <summary>GUID of the VM</summary>
        string VMListGuid { get; set; }
        /// <summary>host of the VM</summary>
        string VMListHost { get; set; }
        /// <summary>name of the VM</summary>
        string VMListName { get; set; }
        /// <summary>
        /// Power status of the VM from the hypervisor Eg- Powered on , Running if the VM is powered on . Values might differ based
        /// on hypervisor type
        /// </summary>
        string VMListPoweredStatus { get; set; }
        /// <summary>
        /// if Installed then the corresponding tools version of the VM. VMWare - VMWare tools version Hyper-V - Integration services
        /// version Values might differ based on hypervisor type status would be not installed if tools is not installed.
        /// </summary>
        string VMListToolStatus { get; set; }

    }
}