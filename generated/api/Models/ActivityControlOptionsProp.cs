// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class ActivityControlOptionsProp :
        Commvault.Powershell.Models.IActivityControlOptionsProp,
        Commvault.Powershell.Models.IActivityControlOptionsPropInternal
    {

        /// <summary>Backing field for <see cref="ActivityType" /> property.</summary>
        private string _activityType;

        /// <summary>denotes the activity type being considered</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string ActivityType { get => this._activityType; set => this._activityType = value; }

        /// <summary>Internal Acessors for DelayTime</summary>
        Commvault.Powershell.Models.IActivityControlTileDelayTime Commvault.Powershell.Models.IActivityControlOptionsPropInternal.DelayTime { get => (this._delayTime = this._delayTime ?? new Commvault.Powershell.Models.ActivityControlTileDelayTime()); set { {_delayTime = value;} } }

        /// <summary>Internal Acessors for DelayTimeZone</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IActivityControlOptionsPropInternal.DelayTimeZone { get => ((Commvault.Powershell.Models.IActivityControlTileDelayTimeInternal)DelayTime).TimeZone; set => ((Commvault.Powershell.Models.IActivityControlTileDelayTimeInternal)DelayTime).TimeZone = value; }

        /// <summary>Backing field for <see cref="DelayTime" /> property.</summary>
        private Commvault.Powershell.Models.IActivityControlTileDelayTime _delayTime;

        /// <summary>ActivityControlTileDelayTime</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IActivityControlTileDelayTime DelayTime { get => (this._delayTime = this._delayTime ?? new Commvault.Powershell.Models.ActivityControlTileDelayTime()); set => this._delayTime = value; }

        /// <summary>delay time in unix timestamp</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? DelayTimeTime { get => ((Commvault.Powershell.Models.IActivityControlTileDelayTimeInternal)DelayTime).Time; set => ((Commvault.Powershell.Models.IActivityControlTileDelayTimeInternal)DelayTime).Time = value ?? default(int); }

        /// <summary>actual delay time value in string format according to the timezone</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string DelayTimeValue { get => ((Commvault.Powershell.Models.IActivityControlTileDelayTimeInternal)DelayTime).Value; set => ((Commvault.Powershell.Models.IActivityControlTileDelayTimeInternal)DelayTime).Value = value ?? null; }

        /// <summary>Backing field for <see cref="EnableActivityType" /> property.</summary>
        private bool? _enableActivityType;

        /// <summary>True if the activity type is enabled</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? EnableActivityType { get => this._enableActivityType; set => this._enableActivityType = value; }

        /// <summary>Backing field for <see cref="EnableAfterADelay" /> property.</summary>
        private bool? _enableAfterADelay;

        /// <summary>True if the activity will be enabled after a delay time interval</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? EnableAfterADelay { get => this._enableAfterADelay; set => this._enableAfterADelay = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? TimeZoneId { get => ((Commvault.Powershell.Models.IActivityControlTileDelayTimeInternal)DelayTime).TimeZoneId; set => ((Commvault.Powershell.Models.IActivityControlTileDelayTimeInternal)DelayTime).TimeZoneId = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string TimeZoneName { get => ((Commvault.Powershell.Models.IActivityControlTileDelayTimeInternal)DelayTime).TimeZoneName; set => ((Commvault.Powershell.Models.IActivityControlTileDelayTimeInternal)DelayTime).TimeZoneName = value ?? null; }

        /// <summary>Creates an new <see cref="ActivityControlOptionsProp" /> instance.</summary>
        public ActivityControlOptionsProp()
        {

        }
    }
    public partial interface IActivityControlOptionsProp :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>denotes the activity type being considered</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"denotes the activity type being considered",
        SerializedName = @"activityType",
        PossibleTypes = new [] { typeof(string) })]
        string ActivityType { get; set; }
        /// <summary>delay time in unix timestamp</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"delay time in unix timestamp",
        SerializedName = @"time",
        PossibleTypes = new [] { typeof(int) })]
        int? DelayTimeTime { get; set; }
        /// <summary>actual delay time value in string format according to the timezone</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"actual delay time value in string format according to the timezone",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(string) })]
        string DelayTimeValue { get; set; }
        /// <summary>True if the activity type is enabled</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"True if the activity type is enabled",
        SerializedName = @"enableActivityType",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableActivityType { get; set; }
        /// <summary>True if the activity will be enabled after a delay time interval</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"True if the activity will be enabled after a delay time interval",
        SerializedName = @"enableAfterADelay",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableAfterADelay { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? TimeZoneId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string TimeZoneName { get; set; }

    }
    internal partial interface IActivityControlOptionsPropInternal

    {
        /// <summary>denotes the activity type being considered</summary>
        string ActivityType { get; set; }
        /// <summary>ActivityControlTileDelayTime</summary>
        Commvault.Powershell.Models.IActivityControlTileDelayTime DelayTime { get; set; }
        /// <summary>delay time in unix timestamp</summary>
        int? DelayTimeTime { get; set; }
        /// <summary>actual delay time value in string format according to the timezone</summary>
        string DelayTimeValue { get; set; }

        Commvault.Powershell.Models.IIdName DelayTimeZone { get; set; }
        /// <summary>True if the activity type is enabled</summary>
        bool? EnableActivityType { get; set; }
        /// <summary>True if the activity will be enabled after a delay time interval</summary>
        bool? EnableAfterADelay { get; set; }

        int? TimeZoneId { get; set; }

        string TimeZoneName { get; set; }

    }
}