// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>This feature applies only to database agents</summary>
    public partial class ServerPlanDatabaseOptionsInfo :
        Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo,
        Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal
    {

        /// <summary>Backing field for <see cref="CommitFrequencyInHours" /> property.</summary>
        private int? _commitFrequencyInHours;

        /// <summary>Commit frequency in hours</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? CommitFrequencyInHours { get => this._commitFrequencyInHours; set => this._commitFrequencyInHours = value; }

        /// <summary>Backing field for <see cref="LogBackupRpoMins" /> property.</summary>
        private int? _logBackupRpoMins;

        /// <summary>Log backup RPO in minutes</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? LogBackupRpoMins { get => this._logBackupRpoMins; set => this._logBackupRpoMins = value; }

        /// <summary>Backing field for <see cref="RunFullBackupEvery" /> property.</summary>
        private int? _runFullBackupEvery;

        /// <summary>Full backup frequency in days</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? RunFullBackupEvery { get => this._runFullBackupEvery; set => this._runFullBackupEvery = value; }

        /// <summary>Backing field for <see cref="UseDiskCacheForLogBackups" /> property.</summary>
        private bool? _useDiskCacheForLogBackups;

        /// <summary>Use disk cache for log backups</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? UseDiskCacheForLogBackups { get => this._useDiskCacheForLogBackups; set => this._useDiskCacheForLogBackups = value; }

        /// <summary>Creates an new <see cref="ServerPlanDatabaseOptionsInfo" /> instance.</summary>
        public ServerPlanDatabaseOptionsInfo()
        {

        }
    }
    /// This feature applies only to database agents
    public partial interface IServerPlanDatabaseOptionsInfo :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Commit frequency in hours</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Commit frequency in hours",
        SerializedName = @"commitFrequencyInHours",
        PossibleTypes = new [] { typeof(int) })]
        int? CommitFrequencyInHours { get; set; }
        /// <summary>Log backup RPO in minutes</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Log backup RPO in minutes",
        SerializedName = @"logBackupRPOMins",
        PossibleTypes = new [] { typeof(int) })]
        int? LogBackupRpoMins { get; set; }
        /// <summary>Full backup frequency in days</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Full backup frequency in days",
        SerializedName = @"runFullBackupEvery",
        PossibleTypes = new [] { typeof(int) })]
        int? RunFullBackupEvery { get; set; }
        /// <summary>Use disk cache for log backups</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Use disk cache for log backups",
        SerializedName = @"useDiskCacheForLogBackups",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseDiskCacheForLogBackups { get; set; }

    }
    /// This feature applies only to database agents
    internal partial interface IServerPlanDatabaseOptionsInfoInternal

    {
        /// <summary>Commit frequency in hours</summary>
        int? CommitFrequencyInHours { get; set; }
        /// <summary>Log backup RPO in minutes</summary>
        int? LogBackupRpoMins { get; set; }
        /// <summary>Full backup frequency in days</summary>
        int? RunFullBackupEvery { get; set; }
        /// <summary>Use disk cache for log backups</summary>
        bool? UseDiskCacheForLogBackups { get; set; }

    }
}