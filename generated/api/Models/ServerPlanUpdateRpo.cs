// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// Recovery Point Objective (RPO) is the maximum amount of time that data can be lost during a service disruption. Your RPO
    /// determines the frequency of your backup jobs.
    /// </summary>
    public partial class ServerPlanUpdateRpo :
        Commvault.Powershell.Models.IServerPlanUpdateRpo,
        Commvault.Powershell.Models.IServerPlanUpdateRpoInternal
    {

        /// <summary>Backing field for <see cref="BackupFrequency" /> property.</summary>
        private Commvault.Powershell.Models.IPlanSchedules _backupFrequency;

        /// <summary>PlanSchedules</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanSchedules BackupFrequency { get => (this._backupFrequency = this._backupFrequency ?? new Commvault.Powershell.Models.PlanSchedules()); set => this._backupFrequency = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IPlanSchedule[] BackupFrequencySchedules { get => ((Commvault.Powershell.Models.IPlanSchedulesInternal)BackupFrequency).Schedules; set => ((Commvault.Powershell.Models.IPlanSchedulesInternal)BackupFrequency).Schedules = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="BackupWindow" /> property.</summary>
        private Commvault.Powershell.Models.IDayAndTime[] _backupWindow;

        /// <summary>Backup window for incremental backup</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IDayAndTime[] BackupWindow { get => this._backupWindow; set => this._backupWindow = value; }

        /// <summary>Internal Acessors for BackupFrequency</summary>
        Commvault.Powershell.Models.IPlanSchedules Commvault.Powershell.Models.IServerPlanUpdateRpoInternal.BackupFrequency { get => (this._backupFrequency = this._backupFrequency ?? new Commvault.Powershell.Models.PlanSchedules()); set { {_backupFrequency = value;} } }

        /// <summary>Internal Acessors for Sla</summary>
        Commvault.Powershell.Models.ISlaUpdateOptions Commvault.Powershell.Models.IServerPlanUpdateRpoInternal.Sla { get => (this._sla = this._sla ?? new Commvault.Powershell.Models.SlaUpdateOptions()); set { {_sla = value;} } }

        /// <summary>Backing field for <see cref="FullBackupWindow" /> property.</summary>
        private Commvault.Powershell.Models.IDayAndTime[] _fullBackupWindow;

        /// <summary>Backup window for full backup</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IDayAndTime[] FullBackupWindow { get => this._fullBackupWindow; set => this._fullBackupWindow = value; }

        /// <summary>Backing field for <see cref="Sla" /> property.</summary>
        private Commvault.Powershell.Models.ISlaUpdateOptions _sla;

        /// <summary>
        /// A server meets SLA (Service Level Agreement) when all of its subclients have at least one successful backup during the
        /// number of days specified at the CommCell, Server Group or plan level.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ISlaUpdateOptions Sla { get => (this._sla = this._sla ?? new Commvault.Powershell.Models.SlaUpdateOptions()); set => this._sla = value; }

        /// <summary>Time provided in Unix format. Give 0 to reset any existing delay.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? SlaEnableAfterDelay { get => ((Commvault.Powershell.Models.ISlaUpdateOptionsInternal)Sla).EnableAfterDelay; set => ((Commvault.Powershell.Models.ISlaUpdateOptionsInternal)Sla).EnableAfterDelay = value ?? default(int); }

        /// <summary>Flag to set to exclude plan from SLA</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SlaExcludeFromSla { get => ((Commvault.Powershell.Models.ISlaUpdateOptionsInternal)Sla).ExcludeFromSla; set => ((Commvault.Powershell.Models.ISlaUpdateOptionsInternal)Sla).ExcludeFromSla = value ?? default(bool); }

        /// <summary>Reason for exclusion from SLA</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SlaExclusionReason { get => ((Commvault.Powershell.Models.ISlaUpdateOptionsInternal)Sla).ExclusionReason; set => ((Commvault.Powershell.Models.ISlaUpdateOptionsInternal)Sla).ExclusionReason = value ?? null; }

        /// <summary>SLA Period in Days</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? SlaPeriod { get => ((Commvault.Powershell.Models.ISlaUpdateOptionsInternal)Sla).SlaPeriod; set => ((Commvault.Powershell.Models.ISlaUpdateOptionsInternal)Sla).SlaPeriod = value ?? default(int); }

        /// <summary>Flag to set to use System Default Service Level Agreement</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SlaUseSystemDefaultSla { get => ((Commvault.Powershell.Models.ISlaUpdateOptionsInternal)Sla).UseSystemDefaultSla; set => ((Commvault.Powershell.Models.ISlaUpdateOptionsInternal)Sla).UseSystemDefaultSla = value ?? default(bool); }

        /// <summary>Creates an new <see cref="ServerPlanUpdateRpo" /> instance.</summary>
        public ServerPlanUpdateRpo()
        {

        }
    }
    /// Recovery Point Objective (RPO) is the maximum amount of time that data can be lost during a service disruption. Your RPO
    /// determines the frequency of your backup jobs.
    public partial interface IServerPlanUpdateRpo :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"schedules",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IPlanSchedule) })]
        Commvault.Powershell.Models.IPlanSchedule[] BackupFrequencySchedules { get; set; }
        /// <summary>Backup window for incremental backup</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup window for incremental backup",
        SerializedName = @"backupWindow",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IDayAndTime) })]
        Commvault.Powershell.Models.IDayAndTime[] BackupWindow { get; set; }
        /// <summary>Backup window for full backup</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup window for full backup",
        SerializedName = @"fullBackupWindow",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IDayAndTime) })]
        Commvault.Powershell.Models.IDayAndTime[] FullBackupWindow { get; set; }
        /// <summary>Time provided in Unix format. Give 0 to reset any existing delay.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time provided in Unix format. Give 0 to reset any existing delay.",
        SerializedName = @"enableAfterDelay",
        PossibleTypes = new [] { typeof(int) })]
        int? SlaEnableAfterDelay { get; set; }
        /// <summary>Flag to set to exclude plan from SLA</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to set to exclude plan from SLA",
        SerializedName = @"excludeFromSLA",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SlaExcludeFromSla { get; set; }
        /// <summary>Reason for exclusion from SLA</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Reason for exclusion from SLA",
        SerializedName = @"exclusionReason",
        PossibleTypes = new [] { typeof(string) })]
        string SlaExclusionReason { get; set; }
        /// <summary>SLA Period in Days</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SLA Period in Days",
        SerializedName = @"SLAPeriod",
        PossibleTypes = new [] { typeof(int) })]
        int? SlaPeriod { get; set; }
        /// <summary>Flag to set to use System Default Service Level Agreement</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to set to use System Default Service Level Agreement",
        SerializedName = @"useSystemDefaultSLA",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SlaUseSystemDefaultSla { get; set; }

    }
    /// Recovery Point Objective (RPO) is the maximum amount of time that data can be lost during a service disruption. Your RPO
    /// determines the frequency of your backup jobs.
    internal partial interface IServerPlanUpdateRpoInternal

    {
        /// <summary>PlanSchedules</summary>
        Commvault.Powershell.Models.IPlanSchedules BackupFrequency { get; set; }

        Commvault.Powershell.Models.IPlanSchedule[] BackupFrequencySchedules { get; set; }
        /// <summary>Backup window for incremental backup</summary>
        Commvault.Powershell.Models.IDayAndTime[] BackupWindow { get; set; }
        /// <summary>Backup window for full backup</summary>
        Commvault.Powershell.Models.IDayAndTime[] FullBackupWindow { get; set; }
        /// <summary>
        /// A server meets SLA (Service Level Agreement) when all of its subclients have at least one successful backup during the
        /// number of days specified at the CommCell, Server Group or plan level.
        /// </summary>
        Commvault.Powershell.Models.ISlaUpdateOptions Sla { get; set; }
        /// <summary>Time provided in Unix format. Give 0 to reset any existing delay.</summary>
        int? SlaEnableAfterDelay { get; set; }
        /// <summary>Flag to set to exclude plan from SLA</summary>
        bool? SlaExcludeFromSla { get; set; }
        /// <summary>Reason for exclusion from SLA</summary>
        string SlaExclusionReason { get; set; }
        /// <summary>SLA Period in Days</summary>
        int? SlaPeriod { get; set; }
        /// <summary>Flag to set to use System Default Service Level Agreement</summary>
        bool? SlaUseSystemDefaultSla { get; set; }

    }
}