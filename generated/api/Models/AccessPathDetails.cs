// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class AccessPathDetails :
        Commvault.Powershell.Models.IAccessPathDetails,
        Commvault.Powershell.Models.IAccessPathDetailsInternal
    {

        /// <summary>Backing field for <see cref="Access" /> property.</summary>
        private string _access;

        /// <summary>
        /// The access type for the disk access path can be either read (writing to path not allowed) or read and write (writing to
        /// path allowed).
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Access { get => this._access; set => this._access = value; }

        /// <summary>Backing field for <see cref="Accessible" /> property.</summary>
        private bool? _accessible;

        /// <summary>states if the access path is accessible</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? Accessible { get => this._accessible; set => this._accessible = value; }

        /// <summary>Internal Acessors for MediaAgent</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IAccessPathDetailsInternal.MediaAgent { get => (this._mediaAgent = this._mediaAgent ?? new Commvault.Powershell.Models.IdName()); set { {_mediaAgent = value;} } }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private int? _id;

        /// <summary>Gives the disk access path id.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="MediaAgent" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _mediaAgent;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName MediaAgent { get => (this._mediaAgent = this._mediaAgent ?? new Commvault.Powershell.Models.IdName()); set => this._mediaAgent = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? MediaAgentId { get => ((Commvault.Powershell.Models.IIdNameInternal)MediaAgent).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)MediaAgent).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string MediaAgentName { get => ((Commvault.Powershell.Models.IIdNameInternal)MediaAgent).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)MediaAgent).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Path" /> property.</summary>
        private string _path;

        /// <summary>Gives the disk access path.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Path { get => this._path; set => this._path = value; }

        /// <summary>Backing field for <see cref="UserName" /> property.</summary>
        private string _userName;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string UserName { get => this._userName; set => this._userName = value; }

        /// <summary>Creates an new <see cref="AccessPathDetails" /> instance.</summary>
        public AccessPathDetails()
        {

        }
    }
    public partial interface IAccessPathDetails :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The access type for the disk access path can be either read (writing to path not allowed) or read and write (writing to
        /// path allowed).
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The access type for the disk access path can be either read (writing to path not allowed) or read and write (writing to path allowed).",
        SerializedName = @"access",
        PossibleTypes = new [] { typeof(string) })]
        string Access { get; set; }
        /// <summary>states if the access path is accessible</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"states if the access path is accessible",
        SerializedName = @"accessible",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Accessible { get; set; }
        /// <summary>Gives the disk access path id.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gives the disk access path id.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? Id { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? MediaAgentId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string MediaAgentName { get; set; }
        /// <summary>Gives the disk access path.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gives the disk access path.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string Path { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string UserName { get; set; }

    }
    internal partial interface IAccessPathDetailsInternal

    {
        /// <summary>
        /// The access type for the disk access path can be either read (writing to path not allowed) or read and write (writing to
        /// path allowed).
        /// </summary>
        string Access { get; set; }
        /// <summary>states if the access path is accessible</summary>
        bool? Accessible { get; set; }
        /// <summary>Gives the disk access path id.</summary>
        int? Id { get; set; }

        Commvault.Powershell.Models.IIdName MediaAgent { get; set; }

        int? MediaAgentId { get; set; }

        string MediaAgentName { get; set; }
        /// <summary>Gives the disk access path.</summary>
        string Path { get; set; }

        string UserName { get; set; }

    }
}