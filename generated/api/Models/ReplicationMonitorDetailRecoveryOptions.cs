// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Gives information about the recovery options for replication group</summary>
    public partial class ReplicationMonitorDetailRecoveryOptions :
        Commvault.Powershell.Models.IReplicationMonitorDetailRecoveryOptions,
        Commvault.Powershell.Models.IReplicationMonitorDetailRecoveryOptionsInternal
    {

        /// <summary>Backing field for <see cref="AcrpInterval" /> property.</summary>
        private int? _acrpInterval;

        /// <summary>
        /// Gives information about application consistent recovery point interval in seconds
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? AcrpInterval { get => this._acrpInterval; set => this._acrpInterval = value; }

        /// <summary>Backing field for <see cref="CcrpInterval" /> property.</summary>
        private int? _ccrpInterval;

        /// <summary>Time interval between crash consistent recovery points in seconds</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? CcrpInterval { get => this._ccrpInterval; set => this._ccrpInterval = value; }

        /// <summary>Internal Acessors for RecoverypointStore</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IReplicationMonitorDetailRecoveryOptionsInternal.RecoverypointStore { get => (this._recoverypointStore = this._recoverypointStore ?? new Commvault.Powershell.Models.IdName()); set { {_recoverypointStore = value;} } }

        /// <summary>Backing field for <see cref="MergeRecoveryPointsOlderThan" /> property.</summary>
        private int? _mergeRecoveryPointsOlderThan;

        /// <summary>Time which should be satisfied to merge recovery points in seconds</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? MergeRecoveryPointsOlderThan { get => this._mergeRecoveryPointsOlderThan; set => this._mergeRecoveryPointsOlderThan = value; }

        /// <summary>Backing field for <see cref="PruneAndMergeOffPeakOnly" /> property.</summary>
        private bool? _pruneAndMergeOffPeakOnly;

        /// <summary>
        /// Boolean which determines Prune and Merge Recovery Points during off peak time only.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? PruneAndMergeOffPeakOnly { get => this._pruneAndMergeOffPeakOnly; set => this._pruneAndMergeOffPeakOnly = value; }

        /// <summary>Backing field for <see cref="RecoverypointStore" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _recoverypointStore;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName RecoverypointStore { get => (this._recoverypointStore = this._recoverypointStore ?? new Commvault.Powershell.Models.IdName()); set => this._recoverypointStore = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? RecoverypointStoreId { get => ((Commvault.Powershell.Models.IIdNameInternal)RecoverypointStore).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)RecoverypointStore).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string RecoverypointStoreName { get => ((Commvault.Powershell.Models.IIdNameInternal)RecoverypointStore).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)RecoverypointStore).Name = value ?? null; }

        /// <summary>Backing field for <see cref="RetainRecoveryPointsFor" /> property.</summary>
        private int? _retainRecoveryPointsFor;

        /// <summary>Recovery points retention time in seconds</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? RetainRecoveryPointsFor { get => this._retainRecoveryPointsFor; set => this._retainRecoveryPointsFor = value; }

        /// <summary>Backing field for <see cref="RpIntervalAfterRetention" /> property.</summary>
        private int? _rpIntervalAfterRetention;

        /// <summary>Recovery point interval at the end of retention time in seconds</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? RpIntervalAfterRetention { get => this._rpIntervalAfterRetention; set => this._rpIntervalAfterRetention = value; }

        /// <summary>Backing field for <see cref="SwitchToLatestIfStoreOfflineFor" /> property.</summary>
        private int? _switchToLatestIfStoreOfflineFor;

        /// <summary>
        /// Gives information about switching to latest recovery point store to latest if it is offline for time in seconds
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? SwitchToLatestIfStoreOfflineFor { get => this._switchToLatestIfStoreOfflineFor; set => this._switchToLatestIfStoreOfflineFor = value; }

        /// <summary>Creates an new <see cref="ReplicationMonitorDetailRecoveryOptions" /> instance.</summary>
        public ReplicationMonitorDetailRecoveryOptions()
        {

        }
    }
    /// Gives information about the recovery options for replication group
    public partial interface IReplicationMonitorDetailRecoveryOptions :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Gives information about application consistent recovery point interval in seconds
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gives information about application consistent recovery point interval in seconds",
        SerializedName = @"ACRPInterval",
        PossibleTypes = new [] { typeof(int) })]
        int? AcrpInterval { get; set; }
        /// <summary>Time interval between crash consistent recovery points in seconds</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time interval between crash consistent recovery points in seconds",
        SerializedName = @"CCRPInterval",
        PossibleTypes = new [] { typeof(int) })]
        int? CcrpInterval { get; set; }
        /// <summary>Time which should be satisfied to merge recovery points in seconds</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time which should be satisfied to merge recovery points in seconds",
        SerializedName = @"mergeRecoveryPointsOlderThan",
        PossibleTypes = new [] { typeof(int) })]
        int? MergeRecoveryPointsOlderThan { get; set; }
        /// <summary>
        /// Boolean which determines Prune and Merge Recovery Points during off peak time only.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Boolean which determines Prune and Merge Recovery Points during off peak time only.",
        SerializedName = @"pruneAndMergeOffPeakOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PruneAndMergeOffPeakOnly { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? RecoverypointStoreId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string RecoverypointStoreName { get; set; }
        /// <summary>Recovery points retention time in seconds</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Recovery points retention time in seconds",
        SerializedName = @"retainRecoveryPointsFor",
        PossibleTypes = new [] { typeof(int) })]
        int? RetainRecoveryPointsFor { get; set; }
        /// <summary>Recovery point interval at the end of retention time in seconds</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Recovery point interval at the end of retention time in seconds",
        SerializedName = @"RPIntervalAfterRetention",
        PossibleTypes = new [] { typeof(int) })]
        int? RpIntervalAfterRetention { get; set; }
        /// <summary>
        /// Gives information about switching to latest recovery point store to latest if it is offline for time in seconds
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gives information about switching to  latest recovery point store to latest if it is offline for time  in seconds",
        SerializedName = @"switchToLatestIfStoreOfflineFor",
        PossibleTypes = new [] { typeof(int) })]
        int? SwitchToLatestIfStoreOfflineFor { get; set; }

    }
    /// Gives information about the recovery options for replication group
    internal partial interface IReplicationMonitorDetailRecoveryOptionsInternal

    {
        /// <summary>
        /// Gives information about application consistent recovery point interval in seconds
        /// </summary>
        int? AcrpInterval { get; set; }
        /// <summary>Time interval between crash consistent recovery points in seconds</summary>
        int? CcrpInterval { get; set; }
        /// <summary>Time which should be satisfied to merge recovery points in seconds</summary>
        int? MergeRecoveryPointsOlderThan { get; set; }
        /// <summary>
        /// Boolean which determines Prune and Merge Recovery Points during off peak time only.
        /// </summary>
        bool? PruneAndMergeOffPeakOnly { get; set; }

        Commvault.Powershell.Models.IIdName RecoverypointStore { get; set; }

        int? RecoverypointStoreId { get; set; }

        string RecoverypointStoreName { get; set; }
        /// <summary>Recovery points retention time in seconds</summary>
        int? RetainRecoveryPointsFor { get; set; }
        /// <summary>Recovery point interval at the end of retention time in seconds</summary>
        int? RpIntervalAfterRetention { get; set; }
        /// <summary>
        /// Gives information about switching to latest recovery point store to latest if it is offline for time in seconds
        /// </summary>
        int? SwitchToLatestIfStoreOfflineFor { get; set; }

    }
}