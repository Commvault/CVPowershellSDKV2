// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>ModifyAdditionalSetting</summary>
    public partial class ModifyAdditionalSetting :
        Commvault.Powershell.Models.IModifyAdditionalSetting,
        Commvault.Powershell.Models.IModifyAdditionalSettingInternal
    {

        /// <summary>Backing field for <see cref="Category" /> property.</summary>
        private string _category;

        /// <summary>
        /// Category of the setting to be modified. This cannot be modified but is required to identify the setting for which the
        /// new value is to be set.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Category { get => this._category; set => this._category = value; }

        /// <summary>Backing field for <see cref="Comment" /> property.</summary>
        private string _comment;

        /// <summary>Comment to specify why this value was set for the specified setting</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Comment { get => this._comment; set => this._comment = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>
        /// Name of the setting to be modified. This cannot be modified but is required to identify the setting for which the new
        /// value is to be set.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="NewValue" /> property.</summary>
        private string _newValue;

        /// <summary>
        /// New value which will be set for the specified setting, there can be fixed acceptables values for some settings. To get
        /// more details about what are acceptable value for a setting, use GET GlobalSettings or GET EntitySettings.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string NewValue { get => this._newValue; set => this._newValue = value; }

        /// <summary>Backing field for <see cref="Reset" /> property.</summary>
        private bool? _reset;

        /// <summary>
        /// To reset the value of any already modified setting, set this to true to reset the value and regain default behaviour
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? Reset { get => this._reset; set => this._reset = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>
        /// Type of the setting to be modified. This cannot be modified but is required to identify the setting for which the new
        /// value is to be set.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="ModifyAdditionalSetting" /> instance.</summary>
        public ModifyAdditionalSetting()
        {

        }
    }
    /// ModifyAdditionalSetting
    public partial interface IModifyAdditionalSetting :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Category of the setting to be modified. This cannot be modified but is required to identify the setting for which the
        /// new value is to be set.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Category of the setting to be modified. This cannot be modified but is required to identify the setting for which the new value is to be set.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        string Category { get; set; }
        /// <summary>Comment to specify why this value was set for the specified setting</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Comment to specify why this value was set for the specified setting",
        SerializedName = @"comment",
        PossibleTypes = new [] { typeof(string) })]
        string Comment { get; set; }
        /// <summary>
        /// Name of the setting to be modified. This cannot be modified but is required to identify the setting for which the new
        /// value is to be set.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the setting to be modified. This cannot be modified but is required to identify the setting for which the new value is to be set.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// New value which will be set for the specified setting, there can be fixed acceptables values for some settings. To get
        /// more details about what are acceptable value for a setting, use GET GlobalSettings or GET EntitySettings.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"New value which will be set for the specified setting, there can be fixed acceptables values for some settings. To get more details about what are acceptable value for a setting, use GET GlobalSettings or GET EntitySettings.",
        SerializedName = @"newValue",
        PossibleTypes = new [] { typeof(string) })]
        string NewValue { get; set; }
        /// <summary>
        /// To reset the value of any already modified setting, set this to true to reset the value and regain default behaviour
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"To reset the value of any already modified setting, set this to true to reset the value and regain default behaviour",
        SerializedName = @"reset",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Reset { get; set; }
        /// <summary>
        /// Type of the setting to be modified. This cannot be modified but is required to identify the setting for which the new
        /// value is to be set.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of the setting to be modified. This cannot be modified but is required to identify the setting for which the new value is to be set.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get; set; }

    }
    /// ModifyAdditionalSetting
    internal partial interface IModifyAdditionalSettingInternal

    {
        /// <summary>
        /// Category of the setting to be modified. This cannot be modified but is required to identify the setting for which the
        /// new value is to be set.
        /// </summary>
        string Category { get; set; }
        /// <summary>Comment to specify why this value was set for the specified setting</summary>
        string Comment { get; set; }
        /// <summary>
        /// Name of the setting to be modified. This cannot be modified but is required to identify the setting for which the new
        /// value is to be set.
        /// </summary>
        string Name { get; set; }
        /// <summary>
        /// New value which will be set for the specified setting, there can be fixed acceptables values for some settings. To get
        /// more details about what are acceptable value for a setting, use GET GlobalSettings or GET EntitySettings.
        /// </summary>
        string NewValue { get; set; }
        /// <summary>
        /// To reset the value of any already modified setting, set this to true to reset the value and regain default behaviour
        /// </summary>
        bool? Reset { get; set; }
        /// <summary>
        /// Type of the setting to be modified. This cannot be modified but is required to identify the setting for which the new
        /// value is to be set.
        /// </summary>
        string Type { get; set; }

    }
}