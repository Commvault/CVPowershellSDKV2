// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class ServerGroup :
        Commvault.Powershell.Models.IServerGroup,
        Commvault.Powershell.Models.IServerGroupInternal
    {

        /// <summary>Backing field for <see cref="ActivityControl" /> property.</summary>
        private Commvault.Powershell.Models.IActivityControl _activityControl;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IActivityControl ActivityControl { get => (this._activityControl = this._activityControl ?? new Commvault.Powershell.Models.ActivityControl()); set => this._activityControl = value; }

        /// <summary>Data Aging is enabled or not</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ActivityControlDataAging { get => ((Commvault.Powershell.Models.IActivityControlInternal)ActivityControl).DataAging; set => ((Commvault.Powershell.Models.IActivityControlInternal)ActivityControl).DataAging = value ?? default(bool); }

        /// <summary>Data Restore is enabled or not</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ActivityControlDataRestore { get => ((Commvault.Powershell.Models.IActivityControlInternal)ActivityControl).DataRestore; set => ((Commvault.Powershell.Models.IActivityControlInternal)ActivityControl).DataRestore = value ?? default(bool); }

        /// <summary>Data Backup is enabled or not</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ActivityControlDatabackup { get => ((Commvault.Powershell.Models.IActivityControlInternal)ActivityControl).Databackup; set => ((Commvault.Powershell.Models.IActivityControlInternal)ActivityControl).Databackup = value ?? default(bool); }

        /// <summary>Backing field for <see cref="AssociatedServers" /> property.</summary>
        private Commvault.Powershell.Models.IServerDetails[] _associatedServers;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IServerDetails[] AssociatedServers { get => this._associatedServers; set => this._associatedServers = value; }

        /// <summary>Backing field for <see cref="BlackoutWindow" /> property.</summary>
        private Commvault.Powershell.Models.IBlackoutWindowDetails[] _blackoutWindow;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IBlackoutWindowDetails[] BlackoutWindow { get => this._blackoutWindow; set => this._blackoutWindow = value; }

        /// <summary>Internal Acessors for ActivityControl</summary>
        Commvault.Powershell.Models.IActivityControl Commvault.Powershell.Models.IServerGroupInternal.ActivityControl { get => (this._activityControl = this._activityControl ?? new Commvault.Powershell.Models.ActivityControl()); set { {_activityControl = value;} } }

        /// <summary>Internal Acessors for FileExceptions</summary>
        Commvault.Powershell.Models.IFileExceptionsDetail Commvault.Powershell.Models.IServerGroupInternal.FileExceptions { get => (this._fileExceptions = this._fileExceptions ?? new Commvault.Powershell.Models.FileExceptionsDetail()); set { {_fileExceptions = value;} } }

        /// <summary>Internal Acessors for General</summary>
        Commvault.Powershell.Models.IGeneralInfoServerGroup Commvault.Powershell.Models.IServerGroupInternal.General { get => (this._general = this._general ?? new Commvault.Powershell.Models.GeneralInfoServerGroup()); set { {_general = value;} } }

        /// <summary>Internal Acessors for GeneralRegion</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IServerGroupInternal.GeneralRegion { get => ((Commvault.Powershell.Models.IGeneralInfoServerGroupInternal)General).Region; set => ((Commvault.Powershell.Models.IGeneralInfoServerGroupInternal)General).Region = value; }

        /// <summary>Internal Acessors for PowerManagement</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IServerGroupInternal.PowerManagement { get => (this._powerManagement = this._powerManagement ?? new Commvault.Powershell.Models.IdName()); set { {_powerManagement = value;} } }

        /// <summary>Internal Acessors for ServerGroup1</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IServerGroupInternal.ServerGroup1 { get => (this._serverGroup1 = this._serverGroup1 ?? new Commvault.Powershell.Models.IdName()); set { {_serverGroup1 = value;} } }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string[] FileExceptionUnixFilters { get => ((Commvault.Powershell.Models.IFileExceptionsDetailInternal)FileExceptions).UnixFilters; set => ((Commvault.Powershell.Models.IFileExceptionsDetailInternal)FileExceptions).UnixFilters = value ?? null /* arrayOf */; }

        /// <summary>To apply the filters to all the subclients in the server group.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? FileExceptionUseGroupFilters { get => ((Commvault.Powershell.Models.IFileExceptionsDetailInternal)FileExceptions).UseGroupFilters; set => ((Commvault.Powershell.Models.IFileExceptionsDetailInternal)FileExceptions).UseGroupFilters = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string[] FileExceptionWindowsFilters { get => ((Commvault.Powershell.Models.IFileExceptionsDetailInternal)FileExceptions).WindowsFilters; set => ((Commvault.Powershell.Models.IFileExceptionsDetailInternal)FileExceptions).WindowsFilters = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="FileExceptions" /> property.</summary>
        private Commvault.Powershell.Models.IFileExceptionsDetail _fileExceptions;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IFileExceptionsDetail FileExceptions { get => (this._fileExceptions = this._fileExceptions ?? new Commvault.Powershell.Models.FileExceptionsDetail()); set => this._fileExceptions = value; }

        /// <summary>Backing field for <see cref="General" /> property.</summary>
        private Commvault.Powershell.Models.IGeneralInfoServerGroup _general;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IGeneralInfoServerGroup General { get => (this._general = this._general ?? new Commvault.Powershell.Models.GeneralInfoServerGroup()); set => this._general = value; }

        /// <summary>
        /// if enabled then after every 24 hours, according to each server's individual Commvault service schedule, the software discovers
        /// the applications on each server and installs a Commvault software package for each application that is found.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? GeneralAutoDiscover { get => ((Commvault.Powershell.Models.IGeneralInfoServerGroupInternal)General).AutoDiscover; set => ((Commvault.Powershell.Models.IGeneralInfoServerGroupInternal)General).AutoDiscover = value ?? default(bool); }

        /// <summary>Allow owners to enable data encryption</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? GeneralEnableDataEncryption { get => ((Commvault.Powershell.Models.IGeneralInfoServerGroupInternal)General).EnableDataEncryption; set => ((Commvault.Powershell.Models.IGeneralInfoServerGroupInternal)General).EnableDataEncryption = value ?? default(bool); }

        /// <summary>Backing field for <see cref="PowerManagement" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _powerManagement;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName PowerManagement { get => (this._powerManagement = this._powerManagement ?? new Commvault.Powershell.Models.IdName()); set => this._powerManagement = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? PowerManagementId { get => ((Commvault.Powershell.Models.IIdNameInternal)PowerManagement).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)PowerManagement).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string PowerManagementName { get => ((Commvault.Powershell.Models.IIdNameInternal)PowerManagement).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)PowerManagement).Name = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? RegionId { get => ((Commvault.Powershell.Models.IGeneralInfoServerGroupInternal)General).RegionId; set => ((Commvault.Powershell.Models.IGeneralInfoServerGroupInternal)General).RegionId = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string RegionName { get => ((Commvault.Powershell.Models.IGeneralInfoServerGroupInternal)General).RegionName; set => ((Commvault.Powershell.Models.IGeneralInfoServerGroupInternal)General).RegionName = value ?? null; }

        /// <summary>Backing field for <see cref="Security" /> property.</summary>
        private Commvault.Powershell.Models.ISecurityAssoc[] _security;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.ISecurityAssoc[] Security { get => this._security; set => this._security = value; }

        /// <summary>Backing field for <see cref="ServerGroup1" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _serverGroup1;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName ServerGroup1 { get => (this._serverGroup1 = this._serverGroup1 ?? new Commvault.Powershell.Models.IdName()); set => this._serverGroup1 = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? ServerGroupId { get => ((Commvault.Powershell.Models.IIdNameInternal)ServerGroup1).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)ServerGroup1).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ServerGroupName { get => ((Commvault.Powershell.Models.IIdNameInternal)ServerGroup1).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)ServerGroup1).Name = value ?? null; }

        /// <summary>Creates an new <see cref="ServerGroup" /> instance.</summary>
        public ServerGroup()
        {

        }
    }
    public partial interface IServerGroup :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Data Aging is enabled or not</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data Aging is enabled or not",
        SerializedName = @"dataAging",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ActivityControlDataAging { get; set; }
        /// <summary>Data Restore is enabled or not</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data Restore is enabled or not",
        SerializedName = @"dataRestore",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ActivityControlDataRestore { get; set; }
        /// <summary>Data Backup is enabled or not</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data Backup is enabled or not",
        SerializedName = @"databackup",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ActivityControlDatabackup { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"associatedServers",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IServerDetails) })]
        Commvault.Powershell.Models.IServerDetails[] AssociatedServers { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"blackoutWindow",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IBlackoutWindowDetails) })]
        Commvault.Powershell.Models.IBlackoutWindowDetails[] BlackoutWindow { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"unixFilters",
        PossibleTypes = new [] { typeof(string) })]
        string[] FileExceptionUnixFilters { get; set; }
        /// <summary>To apply the filters to all the subclients in the server group.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"To apply the filters to all the subclients in the server group.",
        SerializedName = @"useGroupFilters",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FileExceptionUseGroupFilters { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"windowsFilters",
        PossibleTypes = new [] { typeof(string) })]
        string[] FileExceptionWindowsFilters { get; set; }
        /// <summary>
        /// if enabled then after every 24 hours, according to each server's individual Commvault service schedule, the software discovers
        /// the applications on each server and installs a Commvault software package for each application that is found.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"if enabled then after every 24 hours, according to each server's individual Commvault service schedule, the software discovers the applications on each server and installs a Commvault software package for each application that is found.",
        SerializedName = @"autoDiscover",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GeneralAutoDiscover { get; set; }
        /// <summary>Allow owners to enable data encryption</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allow owners to enable data encryption",
        SerializedName = @"enableDataEncryption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GeneralEnableDataEncryption { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? PowerManagementId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string PowerManagementName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? RegionId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string RegionName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"security",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.ISecurityAssoc) })]
        Commvault.Powershell.Models.ISecurityAssoc[] Security { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? ServerGroupId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ServerGroupName { get; set; }

    }
    internal partial interface IServerGroupInternal

    {
        Commvault.Powershell.Models.IActivityControl ActivityControl { get; set; }
        /// <summary>Data Aging is enabled or not</summary>
        bool? ActivityControlDataAging { get; set; }
        /// <summary>Data Restore is enabled or not</summary>
        bool? ActivityControlDataRestore { get; set; }
        /// <summary>Data Backup is enabled or not</summary>
        bool? ActivityControlDatabackup { get; set; }

        Commvault.Powershell.Models.IServerDetails[] AssociatedServers { get; set; }

        Commvault.Powershell.Models.IBlackoutWindowDetails[] BlackoutWindow { get; set; }

        string[] FileExceptionUnixFilters { get; set; }
        /// <summary>To apply the filters to all the subclients in the server group.</summary>
        bool? FileExceptionUseGroupFilters { get; set; }

        string[] FileExceptionWindowsFilters { get; set; }

        Commvault.Powershell.Models.IFileExceptionsDetail FileExceptions { get; set; }

        Commvault.Powershell.Models.IGeneralInfoServerGroup General { get; set; }
        /// <summary>
        /// if enabled then after every 24 hours, according to each server's individual Commvault service schedule, the software discovers
        /// the applications on each server and installs a Commvault software package for each application that is found.
        /// </summary>
        bool? GeneralAutoDiscover { get; set; }
        /// <summary>Allow owners to enable data encryption</summary>
        bool? GeneralEnableDataEncryption { get; set; }

        Commvault.Powershell.Models.IIdName GeneralRegion { get; set; }

        Commvault.Powershell.Models.IIdName PowerManagement { get; set; }

        int? PowerManagementId { get; set; }

        string PowerManagementName { get; set; }

        int? RegionId { get; set; }

        string RegionName { get; set; }

        Commvault.Powershell.Models.ISecurityAssoc[] Security { get; set; }

        Commvault.Powershell.Models.IIdName ServerGroup1 { get; set; }

        int? ServerGroupId { get; set; }

        string ServerGroupName { get; set; }

    }
}