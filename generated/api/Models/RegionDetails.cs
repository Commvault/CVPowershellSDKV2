// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Details for a region</summary>
    public partial class RegionDetails :
        Commvault.Powershell.Models.IRegionDetails,
        Commvault.Powershell.Models.IRegionDetailsInternal
    {

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IAssociatedRegionBasedPlansList[] AssociatedRegionBasedPlanPlans { get => ((Commvault.Powershell.Models.IAssociatedRegionBasedPlansInternal)AssociatedRegionBasedPlans).Plans; set => ((Commvault.Powershell.Models.IAssociatedRegionBasedPlansInternal)AssociatedRegionBasedPlans).Plans = value ?? null /* arrayOf */; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? AssociatedRegionBasedPlanPlansCount { get => ((Commvault.Powershell.Models.IAssociatedRegionBasedPlansInternal)AssociatedRegionBasedPlans).PlansCount; set => ((Commvault.Powershell.Models.IAssociatedRegionBasedPlansInternal)AssociatedRegionBasedPlans).PlansCount = value ?? default(int); }

        /// <summary>Backing field for <see cref="AssociatedRegionBasedPlans" /> property.</summary>
        private Commvault.Powershell.Models.IAssociatedRegionBasedPlans _associatedRegionBasedPlans;

        /// <summary>Details of plans associated to the region</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IAssociatedRegionBasedPlans AssociatedRegionBasedPlans { get => (this._associatedRegionBasedPlans = this._associatedRegionBasedPlans ?? new Commvault.Powershell.Models.AssociatedRegionBasedPlans()); set => this._associatedRegionBasedPlans = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IRegionAssociatedServersList[] AssociatedServerServers { get => ((Commvault.Powershell.Models.IRegionAssociatedServersInternal)AssociatedServers).Servers; set => ((Commvault.Powershell.Models.IRegionAssociatedServersInternal)AssociatedServers).Servers = value ?? null /* arrayOf */; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? AssociatedServerServersCount { get => ((Commvault.Powershell.Models.IRegionAssociatedServersInternal)AssociatedServers).ServersCount; set => ((Commvault.Powershell.Models.IRegionAssociatedServersInternal)AssociatedServers).ServersCount = value ?? default(int); }

        /// <summary>Backing field for <see cref="AssociatedServers" /> property.</summary>
        private Commvault.Powershell.Models.IRegionAssociatedServers _associatedServers;

        /// <summary>Details of servers associated to a region</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IRegionAssociatedServers AssociatedServers { get => (this._associatedServers = this._associatedServers ?? new Commvault.Powershell.Models.RegionAssociatedServers()); set => this._associatedServers = value; }

        /// <summary>Internal Acessors for AssociatedRegionBasedPlans</summary>
        Commvault.Powershell.Models.IAssociatedRegionBasedPlans Commvault.Powershell.Models.IRegionDetailsInternal.AssociatedRegionBasedPlans { get => (this._associatedRegionBasedPlans = this._associatedRegionBasedPlans ?? new Commvault.Powershell.Models.AssociatedRegionBasedPlans()); set { {_associatedRegionBasedPlans = value;} } }

        /// <summary>Internal Acessors for AssociatedServers</summary>
        Commvault.Powershell.Models.IRegionAssociatedServers Commvault.Powershell.Models.IRegionDetailsInternal.AssociatedServers { get => (this._associatedServers = this._associatedServers ?? new Commvault.Powershell.Models.RegionAssociatedServers()); set { {_associatedServers = value;} } }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>Display name for the region</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private int? _id;

        /// <summary>Region ID</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Locations" /> property.</summary>
        private Commvault.Powershell.Models.ILocationDetailsWithZone[] _locations;

        /// <summary>List of locations in the region</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.ILocationDetailsWithZone[] Locations { get => this._locations; set => this._locations = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Region name</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="RegionType" /> property.</summary>
        private string _regionType;

        /// <summary>Type of region</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string RegionType { get => this._regionType; set => this._regionType = value; }

        /// <summary>Creates an new <see cref="RegionDetails" /> instance.</summary>
        public RegionDetails()
        {

        }
    }
    /// Details for a region
    public partial interface IRegionDetails :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"plans",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IAssociatedRegionBasedPlansList) })]
        Commvault.Powershell.Models.IAssociatedRegionBasedPlansList[] AssociatedRegionBasedPlanPlans { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"plansCount",
        PossibleTypes = new [] { typeof(int) })]
        int? AssociatedRegionBasedPlanPlansCount { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"servers",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IRegionAssociatedServersList) })]
        Commvault.Powershell.Models.IRegionAssociatedServersList[] AssociatedServerServers { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"serversCount",
        PossibleTypes = new [] { typeof(int) })]
        int? AssociatedServerServersCount { get; set; }
        /// <summary>Display name for the region</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Display name for the region",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>Region ID</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Region ID",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? Id { get; set; }
        /// <summary>List of locations in the region</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of locations in the region",
        SerializedName = @"locations",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.ILocationDetailsWithZone) })]
        Commvault.Powershell.Models.ILocationDetailsWithZone[] Locations { get; set; }
        /// <summary>Region name</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Region name",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Type of region</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of region",
        SerializedName = @"regionType",
        PossibleTypes = new [] { typeof(string) })]
        string RegionType { get; set; }

    }
    /// Details for a region
    internal partial interface IRegionDetailsInternal

    {
        Commvault.Powershell.Models.IAssociatedRegionBasedPlansList[] AssociatedRegionBasedPlanPlans { get; set; }

        int? AssociatedRegionBasedPlanPlansCount { get; set; }
        /// <summary>Details of plans associated to the region</summary>
        Commvault.Powershell.Models.IAssociatedRegionBasedPlans AssociatedRegionBasedPlans { get; set; }

        Commvault.Powershell.Models.IRegionAssociatedServersList[] AssociatedServerServers { get; set; }

        int? AssociatedServerServersCount { get; set; }
        /// <summary>Details of servers associated to a region</summary>
        Commvault.Powershell.Models.IRegionAssociatedServers AssociatedServers { get; set; }
        /// <summary>Display name for the region</summary>
        string DisplayName { get; set; }
        /// <summary>Region ID</summary>
        int? Id { get; set; }
        /// <summary>List of locations in the region</summary>
        Commvault.Powershell.Models.ILocationDetailsWithZone[] Locations { get; set; }
        /// <summary>Region name</summary>
        string Name { get; set; }
        /// <summary>Type of region</summary>
        string RegionType { get; set; }

    }
}