// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>HyperScaleServerInfo</summary>
    public partial class HyperScaleServerInfo :
        Commvault.Powershell.Models.IHyperScaleServerInfo,
        Commvault.Powershell.Models.IHyperScaleServerInfoInternal
    {

        /// <summary>Backing field for <see cref="CacheDrive" /> property.</summary>
        private string _cacheDrive;

        /// <summary>The status of the cache drive</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string CacheDrive { get => this._cacheDrive; set => this._cacheDrive = value; }

        /// <summary>Backing field for <see cref="Cpu" /> property.</summary>
        private string _cpu;

        /// <summary>The CPU related information</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Cpu { get => this._cpu; set => this._cpu = value; }

        /// <summary>Backing field for <see cref="CpuUsage" /> property.</summary>
        private string _cpuUsage;

        /// <summary>The CPU performance</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string CpuUsage { get => this._cpuUsage; set => this._cpuUsage = value; }

        /// <summary>Backing field for <see cref="Fan" /> property.</summary>
        private string _fan;

        /// <summary>The status of the fan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Fan { get => this._fan; set => this._fan = value; }

        /// <summary>Backing field for <see cref="MemoryUsage" /> property.</summary>
        private string _memoryUsage;

        /// <summary>The amount of physical memory currently used</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string MemoryUsage { get => this._memoryUsage; set => this._memoryUsage = value; }

        /// <summary>Backing field for <see cref="NicStatus" /> property.</summary>
        private string _nicStatus;

        /// <summary>The status of the NIC cards in the mount path</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string NicStatus { get => this._nicStatus; set => this._nicStatus = value; }

        /// <summary>Backing field for <see cref="PowerSupply" /> property.</summary>
        private string _powerSupply;

        /// <summary>The status of the power supply</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string PowerSupply { get => this._powerSupply; set => this._powerSupply = value; }

        /// <summary>Creates an new <see cref="HyperScaleServerInfo" /> instance.</summary>
        public HyperScaleServerInfo()
        {

        }
    }
    /// HyperScaleServerInfo
    public partial interface IHyperScaleServerInfo :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>The status of the cache drive</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The status of the cache drive",
        SerializedName = @"cacheDrive",
        PossibleTypes = new [] { typeof(string) })]
        string CacheDrive { get; set; }
        /// <summary>The CPU related information</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The CPU related information",
        SerializedName = @"cpu",
        PossibleTypes = new [] { typeof(string) })]
        string Cpu { get; set; }
        /// <summary>The CPU performance</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The CPU performance",
        SerializedName = @"cpuUsage",
        PossibleTypes = new [] { typeof(string) })]
        string CpuUsage { get; set; }
        /// <summary>The status of the fan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The status of the fan",
        SerializedName = @"fan",
        PossibleTypes = new [] { typeof(string) })]
        string Fan { get; set; }
        /// <summary>The amount of physical memory currently used</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The amount of physical memory currently used",
        SerializedName = @"memoryUsage",
        PossibleTypes = new [] { typeof(string) })]
        string MemoryUsage { get; set; }
        /// <summary>The status of the NIC cards in the mount path</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The status of the NIC cards in the mount path",
        SerializedName = @"nicStatus",
        PossibleTypes = new [] { typeof(string) })]
        string NicStatus { get; set; }
        /// <summary>The status of the power supply</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The status of the power supply",
        SerializedName = @"powerSupply",
        PossibleTypes = new [] { typeof(string) })]
        string PowerSupply { get; set; }

    }
    /// HyperScaleServerInfo
    internal partial interface IHyperScaleServerInfoInternal

    {
        /// <summary>The status of the cache drive</summary>
        string CacheDrive { get; set; }
        /// <summary>The CPU related information</summary>
        string Cpu { get; set; }
        /// <summary>The CPU performance</summary>
        string CpuUsage { get; set; }
        /// <summary>The status of the fan</summary>
        string Fan { get; set; }
        /// <summary>The amount of physical memory currently used</summary>
        string MemoryUsage { get; set; }
        /// <summary>The status of the NIC cards in the mount path</summary>
        string NicStatus { get; set; }
        /// <summary>The status of the power supply</summary>
        string PowerSupply { get; set; }

    }
}