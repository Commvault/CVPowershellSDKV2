// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Create a hypervisor group with VMware Cloud Director as the destination vendor</summary>
    public partial class CreateHypervisorGroupVCloud :
        Commvault.Powershell.Models.ICreateHypervisorGroupVCloud,
        Commvault.Powershell.Models.ICreateHypervisorGroupVCloudInternal,
        Commvault.Powershell.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Commvault.Powershell.Models.ICreateHypervisorGroupReq" />
        /// </summary>
        private Commvault.Powershell.Models.ICreateHypervisorGroupReq __createHypervisorGroupReq = new Commvault.Powershell.Models.CreateHypervisorGroupReq();

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public Commvault.Powershell.Models.IIdName[] AccessNodes { get => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).AccessNodes; set => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).AccessNodes = value; }

        /// <summary>Backing field for <see cref="AutoCompany" /> property.</summary>
        private string _autoCompany;

        /// <summary>indicates the mode for company association</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string AutoCompany { get => this._autoCompany; set => this._autoCompany = value; }

        /// <summary>Internal Acessors for HypervisorType</summary>
        string Commvault.Powershell.Models.ICreateHypervisorGroupVCloudInternal.HypervisorType { get => this._hypervisorType; set { {_hypervisorType = value;} } }

        /// <summary>Backing field for <see cref="CompanyId" /> property.</summary>
        private int? _companyId;

        /// <summary>company id is required if use existing mode is selected for org client</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? CompanyId { get => this._companyId; set => this._companyId = value; }

        /// <summary>Backing field for <see cref="CompanyName" /> property.</summary>
        private string _companyName;

        /// <summary>company name is required for org client</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string CompanyName { get => this._companyName; set => this._companyName = value; }

        /// <summary>Backing field for <see cref="CreateOrgAccount" /> property.</summary>
        private bool? _createOrgAccount;

        /// <summary>True if organization account to be used</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? CreateOrgAccount { get => this._createOrgAccount; set => this._createOrgAccount = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public Commvault.Powershell.Models.IIdName Credentials { get => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).Credentials; set => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).Credentials = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public int? CredentialsId { get => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).CredentialsId; set => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).CredentialsId = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public string CredentialsName { get => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).CredentialsName; set => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).CredentialsName = value; }

        /// <summary>Backing field for <see cref="Hostname" /> property.</summary>
        private string _hostname;

        /// <summary>VMware Cloud Director hostname or organization guid if org client</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Hostname { get => this._hostname; set => this._hostname = value; }

        /// <summary>Backing field for <see cref="HypervisorType" /> property.</summary>
        private string _hypervisorType= @"VCLOUD";

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string HypervisorType { get => this._hypervisorType; }

        /// <summary>The name of the hypervisor group being created</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public string Name { get => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).Name; set => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).Name = value; }

        /// <summary>Backing field for <see cref="Password" /> property.</summary>
        private string _password;

        /// <summary>VMware Cloud Director password</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Password { get => this._password; set => this._password = value; }

        /// <summary>if credential validation has to be skipped.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public bool? SkipCredentialValidation { get => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).SkipCredentialValidation; set => ((Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal)__createHypervisorGroupReq).SkipCredentialValidation = value; }

        /// <summary>Backing field for <see cref="UserName" /> property.</summary>
        private string _userName;

        /// <summary>VMware Cloud Director username</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string UserName { get => this._userName; set => this._userName = value; }

        /// <summary>Backing field for <see cref="VCloudDirector" /> property.</summary>
        private string _vCloudDirector;

        /// <summary>VMware Cloud Director Name</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string VCloudDirector { get => this._vCloudDirector; set => this._vCloudDirector = value; }

        /// <summary>Backing field for <see cref="VOrganizationGuid" /> property.</summary>
        private string _vOrganizationGuid;

        /// <summary>Organization Guid of VMware Cloud Director</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string VOrganizationGuid { get => this._vOrganizationGuid; set => this._vOrganizationGuid = value; }

        /// <summary>Backing field for <see cref="VOrganizationName" /> property.</summary>
        private string _vOrganizationName;

        /// <summary>Organization name of VMware Cloud Director</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string VOrganizationName { get => this._vOrganizationName; set => this._vOrganizationName = value; }

        /// <summary>Creates an new <see cref="CreateHypervisorGroupVCloud" /> instance.</summary>
        public CreateHypervisorGroupVCloud()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Commvault.Powershell.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Commvault.Powershell.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__createHypervisorGroupReq), __createHypervisorGroupReq);
            await eventListener.AssertObjectIsValid(nameof(__createHypervisorGroupReq), __createHypervisorGroupReq);
        }
    }
    /// Create a hypervisor group with VMware Cloud Director as the destination vendor
    public partial interface ICreateHypervisorGroupVCloud :
        Commvault.Powershell.Runtime.IJsonSerializable,
        Commvault.Powershell.Models.ICreateHypervisorGroupReq
    {
        /// <summary>indicates the mode for company association</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"indicates the mode for company association",
        SerializedName = @"autoCompany",
        PossibleTypes = new [] { typeof(string) })]
        string AutoCompany { get; set; }
        /// <summary>company id is required if use existing mode is selected for org client</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"company id is required if use existing mode is selected for org client",
        SerializedName = @"companyId",
        PossibleTypes = new [] { typeof(int) })]
        int? CompanyId { get; set; }
        /// <summary>company name is required for org client</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"company name is required for org client",
        SerializedName = @"companyName",
        PossibleTypes = new [] { typeof(string) })]
        string CompanyName { get; set; }
        /// <summary>True if organization account to be used</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"True if organization account to be used",
        SerializedName = @"createOrgAccount",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CreateOrgAccount { get; set; }
        /// <summary>VMware Cloud Director hostname or organization guid if org client</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"VMware Cloud Director hostname or organization guid if org client",
        SerializedName = @"hostname",
        PossibleTypes = new [] { typeof(string) })]
        string Hostname { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"hypervisorType",
        PossibleTypes = new [] { typeof(string) })]
        string HypervisorType { get;  }
        /// <summary>VMware Cloud Director password</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"VMware Cloud Director password",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string Password { get; set; }
        /// <summary>VMware Cloud Director username</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"VMware Cloud Director username",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string UserName { get; set; }
        /// <summary>VMware Cloud Director Name</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"VMware Cloud Director Name",
        SerializedName = @"vCloudDirector",
        PossibleTypes = new [] { typeof(string) })]
        string VCloudDirector { get; set; }
        /// <summary>Organization Guid of VMware Cloud Director</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Organization Guid of VMware Cloud Director",
        SerializedName = @"vOrganizationGuid",
        PossibleTypes = new [] { typeof(string) })]
        string VOrganizationGuid { get; set; }
        /// <summary>Organization name of VMware Cloud Director</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Organization name of VMware Cloud Director",
        SerializedName = @"vOrganizationName",
        PossibleTypes = new [] { typeof(string) })]
        string VOrganizationName { get; set; }

    }
    /// Create a hypervisor group with VMware Cloud Director as the destination vendor
    internal partial interface ICreateHypervisorGroupVCloudInternal :
        Commvault.Powershell.Models.ICreateHypervisorGroupReqInternal
    {
        /// <summary>indicates the mode for company association</summary>
        string AutoCompany { get; set; }
        /// <summary>company id is required if use existing mode is selected for org client</summary>
        int? CompanyId { get; set; }
        /// <summary>company name is required for org client</summary>
        string CompanyName { get; set; }
        /// <summary>True if organization account to be used</summary>
        bool? CreateOrgAccount { get; set; }
        /// <summary>VMware Cloud Director hostname or organization guid if org client</summary>
        string Hostname { get; set; }

        string HypervisorType { get; set; }
        /// <summary>VMware Cloud Director password</summary>
        string Password { get; set; }
        /// <summary>VMware Cloud Director username</summary>
        string UserName { get; set; }
        /// <summary>VMware Cloud Director Name</summary>
        string VCloudDirector { get; set; }
        /// <summary>Organization Guid of VMware Cloud Director</summary>
        string VOrganizationGuid { get; set; }
        /// <summary>Organization name of VMware Cloud Director</summary>
        string VOrganizationName { get; set; }

    }
}