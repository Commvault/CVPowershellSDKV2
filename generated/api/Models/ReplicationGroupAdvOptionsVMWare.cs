// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Advanced options for VMWare replication group</summary>
    public partial class ReplicationGroupAdvOptionsVMWare :
        Commvault.Powershell.Models.IReplicationGroupAdvOptionsVMWare,
        Commvault.Powershell.Models.IReplicationGroupAdvOptionsVMWareInternal
    {

        /// <summary>Backing field for <see cref="DiskProvisioning" /> property.</summary>
        private string _diskProvisioning;

        /// <summary>
        /// Select the disk provisioning type for the destination VM. The values are case sensitive.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string DiskProvisioning { get => this._diskProvisioning; set => this._diskProvisioning = value; }

        /// <summary>Backing field for <see cref="SnapshotsToRetain" /> property.</summary>
        private int? _snapshotsToRetain;

        /// <summary>Number of snapshots to retain on destination VM</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? SnapshotsToRetain { get => this._snapshotsToRetain; set => this._snapshotsToRetain = value; }

        /// <summary>Backing field for <see cref="TransportMode" /> property.</summary>
        private string _transportMode;

        /// <summary>Choose transport mode based on environment. Values are case sensitive</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string TransportMode { get => this._transportMode; set => this._transportMode = value; }

        /// <summary>Backing field for <see cref="UnconditionalOverwrite" /> property.</summary>
        private bool? _unconditionalOverwrite;

        /// <summary>Replace an existing virtual machine with the same name in the target location</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? UnconditionalOverwrite { get => this._unconditionalOverwrite; set => this._unconditionalOverwrite = value; }

        /// <summary>Backing field for <see cref="ValidateDestinationVM" /> property.</summary>
        private bool? _validateDestinationVM;

        /// <summary>
        /// Validates that the destination VM is bootable by powering it on and then powering off
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? ValidateDestinationVM { get => this._validateDestinationVM; set => this._validateDestinationVM = value; }

        /// <summary>Creates an new <see cref="ReplicationGroupAdvOptionsVMWare" /> instance.</summary>
        public ReplicationGroupAdvOptionsVMWare()
        {

        }
    }
    /// Advanced options for VMWare replication group
    public partial interface IReplicationGroupAdvOptionsVMWare :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Select the disk provisioning type for the destination VM. The values are case sensitive.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Select the disk provisioning type for the destination VM. The values are case sensitive.",
        SerializedName = @"diskProvisioning",
        PossibleTypes = new [] { typeof(string) })]
        string DiskProvisioning { get; set; }
        /// <summary>Number of snapshots to retain on destination VM</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of snapshots to retain on destination VM",
        SerializedName = @"SnapshotsToRetain",
        PossibleTypes = new [] { typeof(int) })]
        int? SnapshotsToRetain { get; set; }
        /// <summary>Choose transport mode based on environment. Values are case sensitive</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Choose transport mode based on environment. Values are case sensitive",
        SerializedName = @"transportMode",
        PossibleTypes = new [] { typeof(string) })]
        string TransportMode { get; set; }
        /// <summary>Replace an existing virtual machine with the same name in the target location</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Replace an existing virtual machine with the same name in the target location",
        SerializedName = @"unconditionalOverwrite",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UnconditionalOverwrite { get; set; }
        /// <summary>
        /// Validates that the destination VM is bootable by powering it on and then powering off
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Validates that the destination VM is bootable by powering it on and then powering off",
        SerializedName = @"validateDestinationVM",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ValidateDestinationVM { get; set; }

    }
    /// Advanced options for VMWare replication group
    internal partial interface IReplicationGroupAdvOptionsVMWareInternal

    {
        /// <summary>
        /// Select the disk provisioning type for the destination VM. The values are case sensitive.
        /// </summary>
        string DiskProvisioning { get; set; }
        /// <summary>Number of snapshots to retain on destination VM</summary>
        int? SnapshotsToRetain { get; set; }
        /// <summary>Choose transport mode based on environment. Values are case sensitive</summary>
        string TransportMode { get; set; }
        /// <summary>Replace an existing virtual machine with the same name in the target location</summary>
        bool? UnconditionalOverwrite { get; set; }
        /// <summary>
        /// Validates that the destination VM is bootable by powering it on and then powering off
        /// </summary>
        bool? ValidateDestinationVM { get; set; }

    }
}