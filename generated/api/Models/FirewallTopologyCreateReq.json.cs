// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>FirewallTopologyReq</summary>
    public partial class FirewallTopologyCreateReq
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Commvault.Powershell.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json erialization has finished, allowing customization of the <see cref="Commvault.Powershell.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Commvault.Powershell.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Commvault.Powershell.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Commvault.Powershell.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Commvault.Powershell.Runtime.Json.JsonObject into a new instance of <see cref="FirewallTopologyCreateReq" />.
        /// </summary>
        /// <param name="json">A Commvault.Powershell.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal FirewallTopologyCreateReq(Commvault.Powershell.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_topologyName = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("topologyName"), out var __jsonTopologyName) ? (string)__jsonTopologyName : (string)TopologyName;}
            {_clientType = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("clientType"), out var __jsonClientType) ? (string)__jsonClientType : (string)ClientType;}
            {_topologyType = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("topologyType"), out var __jsonTopologyType) ? (string)__jsonTopologyType : (string)TopologyType;}
            {_tunnelProtocol = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("tunnelProtocol"), out var __jsonTunnelProtocol) ? (string)__jsonTunnelProtocol : (string)TunnelProtocol;}
            {_tunnelsPerRoute = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonNumber>("tunnelsPerRoute"), out var __jsonTunnelsPerRoute) ? (int?)__jsonTunnelsPerRoute : TunnelsPerRoute;}
            {_useWildCardProxy = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonBoolean>("useWildCardProxy"), out var __jsonUseWildCardProxy) ? (bool?)__jsonUseWildCardProxy : UseWildCardProxy;}
            {_encryptTraffic = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonBoolean>("encryptTraffic"), out var __jsonEncryptTraffic) ? (bool?)__jsonEncryptTraffic : EncryptTraffic;}
            {_firewallGroups = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("firewallGroups"), out var __jsonFirewallGroups) ? If( __jsonFirewallGroups as Commvault.Powershell.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Commvault.Powershell.Models.IFirewallTopologyGroups[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Commvault.Powershell.Models.IFirewallTopologyGroups) (Commvault.Powershell.Models.FirewallTopologyGroups.FromJson(__u) )) ))() : null : FirewallGroups;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Commvault.Powershell.Runtime.Json.JsonNode"/> into an instance of Commvault.Powershell.Models.IFirewallTopologyCreateReq.
        /// </summary>
        /// <param name="node">a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of Commvault.Powershell.Models.IFirewallTopologyCreateReq.</returns>
        public static Commvault.Powershell.Models.IFirewallTopologyCreateReq FromJson(Commvault.Powershell.Runtime.Json.JsonNode node)
        {
            return node is Commvault.Powershell.Runtime.Json.JsonObject json ? new FirewallTopologyCreateReq(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="FirewallTopologyCreateReq" /> into a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Commvault.Powershell.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Commvault.Powershell.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="FirewallTopologyCreateReq" /> as a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" />.
        /// </returns>
        public Commvault.Powershell.Runtime.Json.JsonNode ToJson(Commvault.Powershell.Runtime.Json.JsonObject container, Commvault.Powershell.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Commvault.Powershell.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._topologyName)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._topologyName.ToString()) : null, "topologyName" ,container.Add );
            AddIf( null != (((object)this._clientType)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._clientType.ToString()) : null, "clientType" ,container.Add );
            AddIf( null != (((object)this._topologyType)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._topologyType.ToString()) : null, "topologyType" ,container.Add );
            AddIf( null != (((object)this._tunnelProtocol)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._tunnelProtocol.ToString()) : null, "tunnelProtocol" ,container.Add );
            AddIf( null != this._tunnelsPerRoute ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonNumber((int)this._tunnelsPerRoute) : null, "tunnelsPerRoute" ,container.Add );
            AddIf( null != this._useWildCardProxy ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonBoolean((bool)this._useWildCardProxy) : null, "useWildCardProxy" ,container.Add );
            AddIf( null != this._encryptTraffic ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonBoolean((bool)this._encryptTraffic) : null, "encryptTraffic" ,container.Add );
            if (null != this._firewallGroups)
            {
                var __w = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __x in this._firewallGroups )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("firewallGroups",__w);
            }
            AfterToJson(ref container);
            return container;
        }
    }
}