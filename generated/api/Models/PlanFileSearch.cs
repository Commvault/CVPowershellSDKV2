// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// This feature applies to file servers and virtualization. Enabling this feature allows you to search for backed-up files
    /// using the global search bar, and creates resource pools with required infrastructure entities.
    /// </summary>
    public partial class PlanFileSearch :
        Commvault.Powershell.Models.IPlanFileSearch,
        Commvault.Powershell.Models.IPlanFileSearchInternal
    {

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private bool? _enabled;

        /// <summary>Flag for enabling indexing</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>Type of indexing status.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="StatusMessage" /> property.</summary>
        private string _statusMessage;

        /// <summary>
        /// Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string StatusMessage { get => this._statusMessage; set => this._statusMessage = value; }

        /// <summary>Creates an new <see cref="PlanFileSearch" /> instance.</summary>
        public PlanFileSearch()
        {

        }
    }
    /// This feature applies to file servers and virtualization. Enabling this feature allows you to search for backed-up files
    /// using the global search bar, and creates resource pools with required infrastructure entities.
    public partial interface IPlanFileSearch :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Flag for enabling indexing</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for enabling indexing",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }
        /// <summary>Type of indexing status.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of indexing status.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string Status { get; set; }
        /// <summary>
        /// Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress",
        SerializedName = @"statusMessage",
        PossibleTypes = new [] { typeof(string) })]
        string StatusMessage { get; set; }

    }
    /// This feature applies to file servers and virtualization. Enabling this feature allows you to search for backed-up files
    /// using the global search bar, and creates resource pools with required infrastructure entities.
    internal partial interface IPlanFileSearchInternal

    {
        /// <summary>Flag for enabling indexing</summary>
        bool? Enabled { get; set; }
        /// <summary>Type of indexing status.</summary>
        string Status { get; set; }
        /// <summary>
        /// Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress
        /// </summary>
        string StatusMessage { get; set; }

    }
}