// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Specific properties for LDAP Server app</summary>
    public partial class LdapServerType :
        Commvault.Powershell.Models.ILdapServerType,
        Commvault.Powershell.Models.ILdapServerTypeInternal,
        Commvault.Powershell.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Commvault.Powershell.Models.ILdapRequest" />
        /// </summary>
        private Commvault.Powershell.Models.ILdapRequest __ldapRequest = new Commvault.Powershell.Models.LdapRequest();

        /// <summary>Denotes if the domain is accessed via a proxy</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public bool? AccessViaClient { get => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).AccessViaClient; set => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).AccessViaClient = value ?? default(bool); }

        /// <summary>Internal Acessors for DirectoryType</summary>
        string Commvault.Powershell.Models.ILdapServerTypeInternal.DirectoryType { get => this._directoryType; set { {_directoryType = value;} } }

        /// <summary>Internal Acessors for LdapQueryParameters</summary>
        Commvault.Powershell.Models.ILdapAttributes Commvault.Powershell.Models.ILdapServerTypeInternal.LdapQueryParameters { get => (this._ldapQueryParameters = this._ldapQueryParameters ?? new Commvault.Powershell.Models.LdapAttributes()); set { {_ldapQueryParameters = value;} } }

        /// <summary>Backing field for <see cref="DirectoryType" /> property.</summary>
        private string _directoryType= @"LDAP_SERVER";

        /// <summary>LDAP server directory type - 14</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string DirectoryType { get => this._directoryType; }

        /// <summary>
        /// If true, the NetBIOS name will not be validated. Providing a custom name without validation may cause problems during
        /// Single Sign-On.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public bool? DoNotValidateNetBiosName { get => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).DoNotValidateNetBiosName; set => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).DoNotValidateNetBiosName = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Host" /> property.</summary>
        private string _host;

        /// <summary>Domain shortname</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Host { get => this._host; set => this._host = value; }

        /// <summary>Required when configuring an existing dummy domain as LDAP/AD</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public int? Id { get => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).Id; set => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).Id = value ?? default(int); }

        /// <summary>Custom attribute string of LDAP query paramters</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string LdapQueryParameterBaseDn { get => ((Commvault.Powershell.Models.ILdapAttributesInternal)LdapQueryParameters).BaseDn; set => ((Commvault.Powershell.Models.ILdapAttributesInternal)LdapQueryParameters).BaseDn = value ?? null; }

        /// <summary>Custom attribute string of LDAP query paramters</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string LdapQueryParameterUniqueIdentifier { get => ((Commvault.Powershell.Models.ILdapAttributesInternal)LdapQueryParameters).UniqueIdentifier; set => ((Commvault.Powershell.Models.ILdapAttributesInternal)LdapQueryParameters).UniqueIdentifier = value ?? null; }

        /// <summary>Custom attribute string of LDAP query paramters</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string LdapQueryParameterUserFilter { get => ((Commvault.Powershell.Models.ILdapAttributesInternal)LdapQueryParameters).UserFilter; set => ((Commvault.Powershell.Models.ILdapAttributesInternal)LdapQueryParameters).UserFilter = value ?? null; }

        /// <summary>Custom attribute string of LDAP query paramters</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string LdapQueryParameterUserGroupFilter { get => ((Commvault.Powershell.Models.ILdapAttributesInternal)LdapQueryParameters).UserGroupFilter; set => ((Commvault.Powershell.Models.ILdapAttributesInternal)LdapQueryParameters).UserGroupFilter = value ?? null; }

        /// <summary>Backing field for <see cref="LdapQueryParameters" /> property.</summary>
        private Commvault.Powershell.Models.ILdapAttributes _ldapQueryParameters;

        /// <summary>Provider attributes for LDAP app</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ILdapAttributes LdapQueryParameters { get => (this._ldapQueryParameters = this._ldapQueryParameters ?? new Commvault.Powershell.Models.LdapAttributes()); set => this._ldapQueryParameters = value; }

        /// <summary>Password to create LDAP app, it should be base64 encoded</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public string Password { get => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).Password; set => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).Password = value ; }

        /// <summary>
        /// List of proxies used to connect to the domain. Required if accessViaClient is true.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public Commvault.Powershell.Models.IIdName[] Proxies { get => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).Proxies; set => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).Proxies = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="UseSecureLdap" /> property.</summary>
        private bool? _useSecureLdap;

        /// <summary>Boolean to indicate if the app use secure LDAP</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? UseSecureLdap { get => this._useSecureLdap; set => this._useSecureLdap = value; }

        /// <summary>Username to create LDAP/AD app</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public string Username { get => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).Username; set => ((Commvault.Powershell.Models.ILdapRequestInternal)__ldapRequest).Username = value ; }

        /// <summary>Creates an new <see cref="LdapServerType" /> instance.</summary>
        public LdapServerType()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Commvault.Powershell.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Commvault.Powershell.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__ldapRequest), __ldapRequest);
            await eventListener.AssertObjectIsValid(nameof(__ldapRequest), __ldapRequest);
        }
    }
    /// Specific properties for LDAP Server app
    public partial interface ILdapServerType :
        Commvault.Powershell.Runtime.IJsonSerializable,
        Commvault.Powershell.Models.ILdapRequest
    {
        /// <summary>LDAP server directory type - 14</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Description = @"LDAP server directory type - 14",
        SerializedName = @"directoryType",
        PossibleTypes = new [] { typeof(string) })]
        string DirectoryType { get;  }
        /// <summary>Domain shortname</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Domain shortname",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        string Host { get; set; }
        /// <summary>Custom attribute string of LDAP query paramters</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Custom attribute string of LDAP query paramters",
        SerializedName = @"baseDN",
        PossibleTypes = new [] { typeof(string) })]
        string LdapQueryParameterBaseDn { get; set; }
        /// <summary>Custom attribute string of LDAP query paramters</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Custom attribute string of LDAP query paramters",
        SerializedName = @"uniqueIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string LdapQueryParameterUniqueIdentifier { get; set; }
        /// <summary>Custom attribute string of LDAP query paramters</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Custom attribute string of LDAP query paramters",
        SerializedName = @"userFilter",
        PossibleTypes = new [] { typeof(string) })]
        string LdapQueryParameterUserFilter { get; set; }
        /// <summary>Custom attribute string of LDAP query paramters</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Custom attribute string of LDAP query paramters",
        SerializedName = @"userGroupFilter",
        PossibleTypes = new [] { typeof(string) })]
        string LdapQueryParameterUserGroupFilter { get; set; }
        /// <summary>Boolean to indicate if the app use secure LDAP</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Boolean to indicate if the app use secure LDAP",
        SerializedName = @"useSecureLDAP",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseSecureLdap { get; set; }

    }
    /// Specific properties for LDAP Server app
    internal partial interface ILdapServerTypeInternal :
        Commvault.Powershell.Models.ILdapRequestInternal
    {
        /// <summary>LDAP server directory type - 14</summary>
        string DirectoryType { get; set; }
        /// <summary>Domain shortname</summary>
        string Host { get; set; }
        /// <summary>Custom attribute string of LDAP query paramters</summary>
        string LdapQueryParameterBaseDn { get; set; }
        /// <summary>Custom attribute string of LDAP query paramters</summary>
        string LdapQueryParameterUniqueIdentifier { get; set; }
        /// <summary>Custom attribute string of LDAP query paramters</summary>
        string LdapQueryParameterUserFilter { get; set; }
        /// <summary>Custom attribute string of LDAP query paramters</summary>
        string LdapQueryParameterUserGroupFilter { get; set; }
        /// <summary>Provider attributes for LDAP app</summary>
        Commvault.Powershell.Models.ILdapAttributes LdapQueryParameters { get; set; }
        /// <summary>Boolean to indicate if the app use secure LDAP</summary>
        bool? UseSecureLdap { get; set; }

    }
}