// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class FileExceptions :
        Commvault.Powershell.Models.IFileExceptions,
        Commvault.Powershell.Models.IFileExceptionsInternal
    {

        /// <summary>Backing field for <see cref="Unix" /> property.</summary>
        private string _unix;

        /// <summary>Unix file paths to be excluded.Comma separated string.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Unix { get => this._unix; set => this._unix = value; }

        /// <summary>Backing field for <see cref="UseCompanyGlobalFilter" /> property.</summary>
        private bool? _useCompanyGlobalFilter;

        /// <summary>
        /// Enable or disable the use of the file path filters on all subclients. By default, it is enabled when filters are added
        /// for either Windows or Unix or both.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? UseCompanyGlobalFilter { get => this._useCompanyGlobalFilter; set => this._useCompanyGlobalFilter = value; }

        /// <summary>Backing field for <see cref="Windows" /> property.</summary>
        private string _windows;

        /// <summary>Window file paths to be excluded.Comma separated string.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Windows { get => this._windows; set => this._windows = value; }

        /// <summary>Creates an new <see cref="FileExceptions" /> instance.</summary>
        public FileExceptions()
        {

        }
    }
    public partial interface IFileExceptions :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Unix file paths to be excluded.Comma separated string.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Unix file paths to be excluded.Comma separated string.",
        SerializedName = @"unix",
        PossibleTypes = new [] { typeof(string) })]
        string Unix { get; set; }
        /// <summary>
        /// Enable or disable the use of the file path filters on all subclients. By default, it is enabled when filters are added
        /// for either Windows or Unix or both.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable the use of the file path filters on all subclients. By default, it is enabled when filters are added for either Windows or Unix or both.",
        SerializedName = @"useCompanyGlobalFilter",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseCompanyGlobalFilter { get; set; }
        /// <summary>Window file paths to be excluded.Comma separated string.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Window file paths to be excluded.Comma separated string.",
        SerializedName = @"windows",
        PossibleTypes = new [] { typeof(string) })]
        string Windows { get; set; }

    }
    internal partial interface IFileExceptionsInternal

    {
        /// <summary>Unix file paths to be excluded.Comma separated string.</summary>
        string Unix { get; set; }
        /// <summary>
        /// Enable or disable the use of the file path filters on all subclients. By default, it is enabled when filters are added
        /// for either Windows or Unix or both.
        /// </summary>
        bool? UseCompanyGlobalFilter { get; set; }
        /// <summary>Window file paths to be excluded.Comma separated string.</summary>
        string Windows { get; set; }

    }
}