// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Details of an AD/LDAP domain</summary>
    public partial class AdldapDetails :
        Commvault.Powershell.Models.IAdldapDetails,
        Commvault.Powershell.Models.IAdldapDetailsInternal
    {

        /// <summary>Backing field for <see cref="AccessViaClient" /> property.</summary>
        private bool? _accessViaClient;

        /// <summary>Denotes if the domain is accessed via a proxy</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? AccessViaClient { get => this._accessViaClient; set => this._accessViaClient = value; }

        /// <summary>Backing field for <see cref="AttributeMap" /> property.</summary>
        private Commvault.Powershell.Models.ILdapAttribute[] _attributeMap;

        /// <summary>
        /// List of attribute mappings for the LDAP domain. Available only if the directoryType is LDAP_SERVER.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.ILdapAttribute[] AttributeMap { get => this._attributeMap; set => this._attributeMap = value; }

        /// <summary>Backing field for <see cref="BaseDnForCardUsers" /> property.</summary>
        private string _baseDnForCardUsers;

        /// <summary>Base DN for card users. Available only if domainType is ACTIVE_DIRECTORY.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string BaseDnForCardUsers { get => this._baseDnForCardUsers; set => this._baseDnForCardUsers = value; }

        /// <summary>Internal Acessors for Company</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IAdldapDetailsInternal.Company { get => (this._company = this._company ?? new Commvault.Powershell.Models.IdName()); set { {_company = value;} } }

        /// <summary>Backing field for <see cref="Company" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _company;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Company { get => (this._company = this._company ?? new Commvault.Powershell.Models.IdName()); set => this._company = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? CompanyId { get => ((Commvault.Powershell.Models.IIdNameInternal)Company).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Company).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string CompanyName { get => ((Commvault.Powershell.Models.IIdNameInternal)Company).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Company).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Credentials" /> property.</summary>
        private string _credentials;

        /// <summary>Username of the domain user used to connect to the domain</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Credentials { get => this._credentials; set => this._credentials = value; }

        /// <summary>Backing field for <see cref="DirectoryType" /> property.</summary>
        private string _directoryType;

        /// <summary>Directory type of an AD/LDAP domain</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string DirectoryType { get => this._directoryType; set => this._directoryType = value; }

        /// <summary>Backing field for <see cref="DomainName" /> property.</summary>
        private string _domainName;

        /// <summary>Domain to which the users are associated</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string DomainName { get => this._domainName; set => this._domainName = value; }

        /// <summary>Backing field for <see cref="EnableSso" /> property.</summary>
        private bool? _enableSso;

        /// <summary>Denotes if SSO is enabled</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? EnableSso { get => this._enableSso; set => this._enableSso = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private int? _id;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="LdapQueryParameters" /> property.</summary>
        private Commvault.Powershell.Models.ILdapAttribute[] _ldapQueryParameters;

        /// <summary>
        /// List of query parameters for the LDAP domain. Available only if the directory type is LDAP_SERVER
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.ILdapAttribute[] LdapQueryParameters { get => this._ldapQueryParameters; set => this._ldapQueryParameters = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Proxies" /> property.</summary>
        private Commvault.Powershell.Models.IIdName[] _proxies;

        /// <summary>
        /// List of proxies used to connect to the domain. Available only if accessViaClient is true.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdName[] Proxies { get => this._proxies; set => this._proxies = value; }

        /// <summary>Backing field for <see cref="UseSecureLdap" /> property.</summary>
        private bool? _useSecureLdap;

        /// <summary>Boolean to indicate if the identity server uses secure LDAP</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? UseSecureLdap { get => this._useSecureLdap; set => this._useSecureLdap = value; }

        /// <summary>Backing field for <see cref="UserGroups" /> property.</summary>
        private int? _userGroups;

        /// <summary>Number of user groups in the domain</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? UserGroups { get => this._userGroups; set => this._userGroups = value; }

        /// <summary>Backing field for <see cref="Users" /> property.</summary>
        private int? _users;

        /// <summary>Number of users in the domain</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? Users { get => this._users; set => this._users = value; }

        /// <summary>Creates an new <see cref="AdldapDetails" /> instance.</summary>
        public AdldapDetails()
        {

        }
    }
    /// Details of an AD/LDAP domain
    public partial interface IAdldapDetails :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Denotes if the domain is accessed via a proxy</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Denotes if the domain is accessed via a proxy",
        SerializedName = @"accessViaClient",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AccessViaClient { get; set; }
        /// <summary>
        /// List of attribute mappings for the LDAP domain. Available only if the directoryType is LDAP_SERVER.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of attribute mappings for the LDAP domain. Available only if the directoryType is LDAP_SERVER.",
        SerializedName = @"attributeMap",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.ILdapAttribute) })]
        Commvault.Powershell.Models.ILdapAttribute[] AttributeMap { get; set; }
        /// <summary>Base DN for card users. Available only if domainType is ACTIVE_DIRECTORY.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base DN for card users. Available only if domainType is ACTIVE_DIRECTORY.",
        SerializedName = @"baseDNForCardUsers",
        PossibleTypes = new [] { typeof(string) })]
        string BaseDnForCardUsers { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? CompanyId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CompanyName { get; set; }
        /// <summary>Username of the domain user used to connect to the domain</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Username of the domain user used to connect to the domain",
        SerializedName = @"credentials",
        PossibleTypes = new [] { typeof(string) })]
        string Credentials { get; set; }
        /// <summary>Directory type of an AD/LDAP domain</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Directory type of an AD/LDAP domain",
        SerializedName = @"directoryType",
        PossibleTypes = new [] { typeof(string) })]
        string DirectoryType { get; set; }
        /// <summary>Domain to which the users are associated</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Domain to which the users are associated",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string DomainName { get; set; }
        /// <summary>Denotes if SSO is enabled</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Denotes if SSO is enabled",
        SerializedName = @"enableSSO",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableSso { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? Id { get; set; }
        /// <summary>
        /// List of query parameters for the LDAP domain. Available only if the directory type is LDAP_SERVER
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of query parameters for the LDAP domain. Available only if the directory type is LDAP_SERVER",
        SerializedName = @"LDAPQueryParameters",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.ILdapAttribute) })]
        Commvault.Powershell.Models.ILdapAttribute[] LdapQueryParameters { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// List of proxies used to connect to the domain. Available only if accessViaClient is true.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of proxies used to connect to the domain. Available only if accessViaClient is true.",
        SerializedName = @"proxies",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] Proxies { get; set; }
        /// <summary>Boolean to indicate if the identity server uses secure LDAP</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Boolean to indicate if the identity server uses secure LDAP",
        SerializedName = @"useSecureLDAP",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseSecureLdap { get; set; }
        /// <summary>Number of user groups in the domain</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of user groups in the domain",
        SerializedName = @"userGroups",
        PossibleTypes = new [] { typeof(int) })]
        int? UserGroups { get; set; }
        /// <summary>Number of users in the domain</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of users in the domain",
        SerializedName = @"users",
        PossibleTypes = new [] { typeof(int) })]
        int? Users { get; set; }

    }
    /// Details of an AD/LDAP domain
    internal partial interface IAdldapDetailsInternal

    {
        /// <summary>Denotes if the domain is accessed via a proxy</summary>
        bool? AccessViaClient { get; set; }
        /// <summary>
        /// List of attribute mappings for the LDAP domain. Available only if the directoryType is LDAP_SERVER.
        /// </summary>
        Commvault.Powershell.Models.ILdapAttribute[] AttributeMap { get; set; }
        /// <summary>Base DN for card users. Available only if domainType is ACTIVE_DIRECTORY.</summary>
        string BaseDnForCardUsers { get; set; }

        Commvault.Powershell.Models.IIdName Company { get; set; }

        int? CompanyId { get; set; }

        string CompanyName { get; set; }
        /// <summary>Username of the domain user used to connect to the domain</summary>
        string Credentials { get; set; }
        /// <summary>Directory type of an AD/LDAP domain</summary>
        string DirectoryType { get; set; }
        /// <summary>Domain to which the users are associated</summary>
        string DomainName { get; set; }
        /// <summary>Denotes if SSO is enabled</summary>
        bool? EnableSso { get; set; }

        int? Id { get; set; }
        /// <summary>
        /// List of query parameters for the LDAP domain. Available only if the directory type is LDAP_SERVER
        /// </summary>
        Commvault.Powershell.Models.ILdapAttribute[] LdapQueryParameters { get; set; }

        string Name { get; set; }
        /// <summary>
        /// List of proxies used to connect to the domain. Available only if accessViaClient is true.
        /// </summary>
        Commvault.Powershell.Models.IIdName[] Proxies { get; set; }
        /// <summary>Boolean to indicate if the identity server uses secure LDAP</summary>
        bool? UseSecureLdap { get; set; }
        /// <summary>Number of user groups in the domain</summary>
        int? UserGroups { get; set; }
        /// <summary>Number of users in the domain</summary>
        int? Users { get; set; }

    }
}