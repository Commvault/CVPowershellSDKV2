// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Summary of the region</summary>
    public partial class RegionSummary :
        Commvault.Powershell.Models.IRegionSummary,
        Commvault.Powershell.Models.IRegionSummaryInternal
    {

        /// <summary>Backing field for <see cref="AssociatedRegionBasedPlans" /> property.</summary>
        private long? _associatedRegionBasedPlans;

        /// <summary>Number of plans associated to the region</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? AssociatedRegionBasedPlans { get => this._associatedRegionBasedPlans; set => this._associatedRegionBasedPlans = value; }

        /// <summary>Backing field for <see cref="AssociatedServers" /> property.</summary>
        private long? _associatedServers;

        /// <summary>Number of servers associated to the region</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? AssociatedServers { get => this._associatedServers; set => this._associatedServers = value; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private long? _id;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Locations" /> property.</summary>
        private Commvault.Powershell.Models.ILocationSummary[] _locations;

        /// <summary>List of locations in the region</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.ILocationSummary[] Locations { get => this._locations; set => this._locations = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="RegionType" /> property.</summary>
        private string _regionType;

        /// <summary>Type of region</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string RegionType { get => this._regionType; set => this._regionType = value; }

        /// <summary>Creates an new <see cref="RegionSummary" /> instance.</summary>
        public RegionSummary()
        {

        }
    }
    /// Summary of the region
    public partial interface IRegionSummary :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Number of plans associated to the region</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of plans associated to the region",
        SerializedName = @"associatedRegionBasedPlans",
        PossibleTypes = new [] { typeof(long) })]
        long? AssociatedRegionBasedPlans { get; set; }
        /// <summary>Number of servers associated to the region</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of servers associated to the region",
        SerializedName = @"associatedServers",
        PossibleTypes = new [] { typeof(long) })]
        long? AssociatedServers { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? Id { get; set; }
        /// <summary>List of locations in the region</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of locations in the region",
        SerializedName = @"locations",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.ILocationSummary) })]
        Commvault.Powershell.Models.ILocationSummary[] Locations { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Type of region</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of region",
        SerializedName = @"regionType",
        PossibleTypes = new [] { typeof(string) })]
        string RegionType { get; set; }

    }
    /// Summary of the region
    internal partial interface IRegionSummaryInternal

    {
        /// <summary>Number of plans associated to the region</summary>
        long? AssociatedRegionBasedPlans { get; set; }
        /// <summary>Number of servers associated to the region</summary>
        long? AssociatedServers { get; set; }

        string DisplayName { get; set; }

        long? Id { get; set; }
        /// <summary>List of locations in the region</summary>
        Commvault.Powershell.Models.ILocationSummary[] Locations { get; set; }

        string Name { get; set; }
        /// <summary>Type of region</summary>
        string RegionType { get; set; }

    }
}