// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to save/store
    /// data by eliminating duplicate blocks of data during backups
    /// </summary>
    public partial class DedupeStorageList :
        Commvault.Powershell.Models.IDedupeStorageList,
        Commvault.Powershell.Models.IDedupeStorageListInternal
    {

        /// <summary>Backing field for <see cref="DeduplicationDbLocation" /> property.</summary>
        private Commvault.Powershell.Models.IDedupePath[] _deduplicationDbLocation;

        /// <summary>
        /// A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to save/store
        /// data by eliminating duplicate blocks of data during backups
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IDedupePath[] DeduplicationDbLocation { get => this._deduplicationDbLocation; set => this._deduplicationDbLocation = value; }

        /// <summary>Backing field for <see cref="UseDeduplication" /> property.</summary>
        private bool? _useDeduplication;

        /// <summary>Enables or disables deduplication on the storage</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? UseDeduplication { get => this._useDeduplication; set => this._useDeduplication = value; }

        /// <summary>Creates an new <see cref="DedupeStorageList" /> instance.</summary>
        public DedupeStorageList()
        {

        }
    }
    /// A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to save/store
    /// data by eliminating duplicate blocks of data during backups
    public partial interface IDedupeStorageList :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to save/store
        /// data by eliminating duplicate blocks of data during backups
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to save/store data by eliminating duplicate blocks of data during backups",
        SerializedName = @"deduplicationDBLocation",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IDedupePath) })]
        Commvault.Powershell.Models.IDedupePath[] DeduplicationDbLocation { get; set; }
        /// <summary>Enables or disables deduplication on the storage</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enables or disables deduplication on the storage",
        SerializedName = @"useDeduplication",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseDeduplication { get; set; }

    }
    /// A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to save/store
    /// data by eliminating duplicate blocks of data during backups
    internal partial interface IDedupeStorageListInternal

    {
        /// <summary>
        /// A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to save/store
        /// data by eliminating duplicate blocks of data during backups
        /// </summary>
        Commvault.Powershell.Models.IDedupePath[] DeduplicationDbLocation { get; set; }
        /// <summary>Enables or disables deduplication on the storage</summary>
        bool? UseDeduplication { get; set; }

    }
}