// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Used to set global exceptions</summary>
    public partial class SetGlobalExceptions :
        Commvault.Powershell.Models.ISetGlobalExceptions,
        Commvault.Powershell.Models.ISetGlobalExceptionsInternal
    {

        /// <summary>Internal Acessors for UnixGlobalExceptions</summary>
        Commvault.Powershell.Models.IGlobalExceptionOperation Commvault.Powershell.Models.ISetGlobalExceptionsInternal.UnixGlobalExceptions { get => (this._unixGlobalExceptions = this._unixGlobalExceptions ?? new Commvault.Powershell.Models.GlobalExceptionOperation()); set { {_unixGlobalExceptions = value;} } }

        /// <summary>Internal Acessors for WindowsGlobalExceptions</summary>
        Commvault.Powershell.Models.IGlobalExceptionOperation Commvault.Powershell.Models.ISetGlobalExceptionsInternal.WindowsGlobalExceptions { get => (this._windowsGlobalExceptions = this._windowsGlobalExceptions ?? new Commvault.Powershell.Models.GlobalExceptionOperation()); set { {_windowsGlobalExceptions = value;} } }

        /// <summary>Array of exceptions which will be operated upon based on the operation type</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string[] UnixGlobalExceptionExceptions { get => ((Commvault.Powershell.Models.IGlobalExceptionOperationInternal)UnixGlobalExceptions).Exceptions; set => ((Commvault.Powershell.Models.IGlobalExceptionOperationInternal)UnixGlobalExceptions).Exceptions = value ?? null /* arrayOf */; }

        /// <summary>
        /// The operations on global exceptions provided would be executed based on the operation type provided
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UnixGlobalExceptionOperationType { get => ((Commvault.Powershell.Models.IGlobalExceptionOperationInternal)UnixGlobalExceptions).OperationType; set => ((Commvault.Powershell.Models.IGlobalExceptionOperationInternal)UnixGlobalExceptions).OperationType = value ?? null; }

        /// <summary>Backing field for <see cref="UnixGlobalExceptions" /> property.</summary>
        private Commvault.Powershell.Models.IGlobalExceptionOperation _unixGlobalExceptions;

        /// <summary>Information conatins the operation to be done on exceptions</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IGlobalExceptionOperation UnixGlobalExceptions { get => (this._unixGlobalExceptions = this._unixGlobalExceptions ?? new Commvault.Powershell.Models.GlobalExceptionOperation()); set => this._unixGlobalExceptions = value; }

        /// <summary>Backing field for <see cref="UseGlobalExceptionsOnAllSubclients" /> property.</summary>
        private bool? _useGlobalExceptionsOnAllSubclients;

        /// <summary>Boolean value which updates the property useGlobalExceptionsOnAllSubclients</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? UseGlobalExceptionsOnAllSubclients { get => this._useGlobalExceptionsOnAllSubclients; set => this._useGlobalExceptionsOnAllSubclients = value; }

        /// <summary>Array of exceptions which will be operated upon based on the operation type</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string[] WindowGlobalExceptionExceptions { get => ((Commvault.Powershell.Models.IGlobalExceptionOperationInternal)WindowsGlobalExceptions).Exceptions; set => ((Commvault.Powershell.Models.IGlobalExceptionOperationInternal)WindowsGlobalExceptions).Exceptions = value ?? null /* arrayOf */; }

        /// <summary>
        /// The operations on global exceptions provided would be executed based on the operation type provided
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string WindowGlobalExceptionOperationType { get => ((Commvault.Powershell.Models.IGlobalExceptionOperationInternal)WindowsGlobalExceptions).OperationType; set => ((Commvault.Powershell.Models.IGlobalExceptionOperationInternal)WindowsGlobalExceptions).OperationType = value ?? null; }

        /// <summary>Backing field for <see cref="WindowsGlobalExceptions" /> property.</summary>
        private Commvault.Powershell.Models.IGlobalExceptionOperation _windowsGlobalExceptions;

        /// <summary>Information conatins the operation to be done on exceptions</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IGlobalExceptionOperation WindowsGlobalExceptions { get => (this._windowsGlobalExceptions = this._windowsGlobalExceptions ?? new Commvault.Powershell.Models.GlobalExceptionOperation()); set => this._windowsGlobalExceptions = value; }

        /// <summary>Creates an new <see cref="SetGlobalExceptions" /> instance.</summary>
        public SetGlobalExceptions()
        {

        }
    }
    /// Used to set global exceptions
    public partial interface ISetGlobalExceptions :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Array of exceptions which will be operated upon based on the operation type</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of exceptions which will be operated upon based on the operation type",
        SerializedName = @"exceptions",
        PossibleTypes = new [] { typeof(string) })]
        string[] UnixGlobalExceptionExceptions { get; set; }
        /// <summary>
        /// The operations on global exceptions provided would be executed based on the operation type provided
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The operations on global exceptions provided would be executed based on the operation type provided",
        SerializedName = @"operationType",
        PossibleTypes = new [] { typeof(string) })]
        string UnixGlobalExceptionOperationType { get; set; }
        /// <summary>Boolean value which updates the property useGlobalExceptionsOnAllSubclients</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Boolean value which updates the property useGlobalExceptionsOnAllSubclients",
        SerializedName = @"useGlobalExceptionsOnAllSubclients",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseGlobalExceptionsOnAllSubclients { get; set; }
        /// <summary>Array of exceptions which will be operated upon based on the operation type</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of exceptions which will be operated upon based on the operation type",
        SerializedName = @"exceptions",
        PossibleTypes = new [] { typeof(string) })]
        string[] WindowGlobalExceptionExceptions { get; set; }
        /// <summary>
        /// The operations on global exceptions provided would be executed based on the operation type provided
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The operations on global exceptions provided would be executed based on the operation type provided",
        SerializedName = @"operationType",
        PossibleTypes = new [] { typeof(string) })]
        string WindowGlobalExceptionOperationType { get; set; }

    }
    /// Used to set global exceptions
    internal partial interface ISetGlobalExceptionsInternal

    {
        /// <summary>Array of exceptions which will be operated upon based on the operation type</summary>
        string[] UnixGlobalExceptionExceptions { get; set; }
        /// <summary>
        /// The operations on global exceptions provided would be executed based on the operation type provided
        /// </summary>
        string UnixGlobalExceptionOperationType { get; set; }
        /// <summary>Information conatins the operation to be done on exceptions</summary>
        Commvault.Powershell.Models.IGlobalExceptionOperation UnixGlobalExceptions { get; set; }
        /// <summary>Boolean value which updates the property useGlobalExceptionsOnAllSubclients</summary>
        bool? UseGlobalExceptionsOnAllSubclients { get; set; }
        /// <summary>Array of exceptions which will be operated upon based on the operation type</summary>
        string[] WindowGlobalExceptionExceptions { get; set; }
        /// <summary>
        /// The operations on global exceptions provided would be executed based on the operation type provided
        /// </summary>
        string WindowGlobalExceptionOperationType { get; set; }
        /// <summary>Information conatins the operation to be done on exceptions</summary>
        Commvault.Powershell.Models.IGlobalExceptionOperation WindowsGlobalExceptions { get; set; }

    }
}