// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// Replication options for Amazon. sourceVM should contain the name and the guid of the machine that has to be overriden
    /// </summary>
    public partial class OverrideReplicationOptionsAmazonCreate :
        Commvault.Powershell.Models.IOverrideReplicationOptionsAmazonCreate,
        Commvault.Powershell.Models.IOverrideReplicationOptionsAmazonCreateInternal
    {

        /// <summary>Backing field for <see cref="AvailabilityZone" /> property.</summary>
        private string _availabilityZone;

        /// <summary>The name of AWS zone where the destination instance will reside</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string AvailabilityZone { get => this._availabilityZone; set => this._availabilityZone = value; }

        /// <summary>Internal Acessors for GuestCredentials</summary>
        Commvault.Powershell.Models.IGuestCredentialsCreate Commvault.Powershell.Models.IOverrideReplicationOptionsAmazonCreateInternal.GuestCredentials { get => (this._guestCredentials = this._guestCredentials ?? new Commvault.Powershell.Models.GuestCredentialsCreate()); set { {_guestCredentials = value;} } }

        /// <summary>Internal Acessors for Network</summary>
        Commvault.Powershell.Models.INetworkVpcSubnet Commvault.Powershell.Models.IOverrideReplicationOptionsAmazonCreateInternal.Network { get => (this._network = this._network ?? new Commvault.Powershell.Models.NetworkVpcSubnet()); set { {_network = value;} } }

        /// <summary>Internal Acessors for SourceVM</summary>
        Commvault.Powershell.Models.INameGuid Commvault.Powershell.Models.IOverrideReplicationOptionsAmazonCreateInternal.SourceVM { get => (this._sourceVM = this._sourceVM ?? new Commvault.Powershell.Models.NameGuid()); set { {_sourceVM = value;} } }

        /// <summary>Backing field for <see cref="EncryptionKey" /> property.</summary>
        private string _encryptionKey;

        /// <summary>
        /// The ID of the encryption key that will be used to encrypt the data of the desination instance. Default value is Auto
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string EncryptionKey { get => this._encryptionKey; set => this._encryptionKey = value; }

        /// <summary>Backing field for <see cref="GuestCredentials" /> property.</summary>
        private Commvault.Powershell.Models.IGuestCredentialsCreate _guestCredentials;

        /// <summary>
        /// Faster performance can be achieved during replication by using the VSA access node running on the Amazon instance. Applicable
        /// only if the source VM is Windows and the source hypervisor is not Amazon vendor.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IGuestCredentialsCreate GuestCredentials { get => (this._guestCredentials = this._guestCredentials ?? new Commvault.Powershell.Models.GuestCredentialsCreate()); set => this._guestCredentials = value; }

        /// <summary>The name of the computer</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GuestCredentialsComputerName { get => ((Commvault.Powershell.Models.IGuestCredentialsCreateInternal)GuestCredentials).ComputerName; set => ((Commvault.Powershell.Models.IGuestCredentialsCreateInternal)GuestCredentials).ComputerName = value ?? null; }

        /// <summary>The password of the user in Base64 format</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GuestCredentialsPassword { get => ((Commvault.Powershell.Models.IGuestCredentialsCreateInternal)GuestCredentials).Password; set => ((Commvault.Powershell.Models.IGuestCredentialsCreateInternal)GuestCredentials).Password = value ?? null; }

        /// <summary>The user to be used to access the computer</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GuestCredentialsUserName { get => ((Commvault.Powershell.Models.IGuestCredentialsCreateInternal)GuestCredentials).UserName; set => ((Commvault.Powershell.Models.IGuestCredentialsCreateInternal)GuestCredentials).UserName = value ?? null; }

        /// <summary>Backing field for <see cref="InstanceName" /> property.</summary>
        private string _instanceName;

        /// <summary>Display name for the destination instance</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string InstanceName { get => this._instanceName; set => this._instanceName = value; }

        /// <summary>Backing field for <see cref="InstanceType" /> property.</summary>
        private string _instanceType;

        /// <summary>
        /// The available CPU cores and memory to be used on the destination instance. Default value is Auto
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string InstanceType { get => this._instanceType; set => this._instanceType = value; }

        /// <summary>Backing field for <see cref="Network" /> property.</summary>
        private Commvault.Powershell.Models.INetworkVpcSubnet _network;

        /// <summary>Network info</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.INetworkVpcSubnet Network { get => (this._network = this._network ?? new Commvault.Powershell.Models.NetworkVpcSubnet()); set => this._network = value; }

        /// <summary>The name of the network</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string NetworkName { get => ((Commvault.Powershell.Models.INetworkVpcSubnetInternal)Network).Name; set => ((Commvault.Powershell.Models.INetworkVpcSubnetInternal)Network).Name = value ?? null; }

        /// <summary>The ID of the subnet</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string NetworkSubnetId { get => ((Commvault.Powershell.Models.INetworkVpcSubnetInternal)Network).SubnetId; set => ((Commvault.Powershell.Models.INetworkVpcSubnetInternal)Network).SubnetId = value ?? null; }

        /// <summary>The ID of the VPC</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string NetworkVpc { get => ((Commvault.Powershell.Models.INetworkVpcSubnetInternal)Network).Vpc; set => ((Commvault.Powershell.Models.INetworkVpcSubnetInternal)Network).Vpc = value ?? null; }

        /// <summary>Backing field for <see cref="RegionName" /> property.</summary>
        private string _regionName;

        /// <summary>The name of the AWS region where the destination instance will reside</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string RegionName { get => this._regionName; set => this._regionName = value; }

        /// <summary>Backing field for <see cref="SecurityGroups" /> property.</summary>
        private Commvault.Powershell.Models.ISecurityGroup[] _securityGroups;

        /// <summary>
        /// The security group to be applied to the destination instance that acts as a virtual firewall. Default value is Auto
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.ISecurityGroup[] SecurityGroups { get => this._securityGroups; set => this._securityGroups = value; }

        /// <summary>Backing field for <see cref="SourceVM" /> property.</summary>
        private Commvault.Powershell.Models.INameGuid _sourceVM;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.INameGuid SourceVM { get => (this._sourceVM = this._sourceVM ?? new Commvault.Powershell.Models.NameGuid()); set => this._sourceVM = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SourceVMGuid { get => ((Commvault.Powershell.Models.INameGuidInternal)SourceVM).Guid; set => ((Commvault.Powershell.Models.INameGuidInternal)SourceVM).Guid = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SourceVMName { get => ((Commvault.Powershell.Models.INameGuidInternal)SourceVM).Name; set => ((Commvault.Powershell.Models.INameGuidInternal)SourceVM).Name = value ?? null; }

        /// <summary>Backing field for <see cref="VolumeType" /> property.</summary>
        private string _volumeType;

        /// <summary>
        /// ID of the volume type that will be used on the destination instance. Default value is Auto
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string VolumeType { get => this._volumeType; set => this._volumeType = value; }

        /// <summary>Creates an new <see cref="OverrideReplicationOptionsAmazonCreate" /> instance.</summary>
        public OverrideReplicationOptionsAmazonCreate()
        {

        }
    }
    /// Replication options for Amazon. sourceVM should contain the name and the guid of the machine that has to be overriden
    public partial interface IOverrideReplicationOptionsAmazonCreate :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>The name of AWS zone where the destination instance will reside</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of AWS zone where the destination instance will reside",
        SerializedName = @"availabilityZone",
        PossibleTypes = new [] { typeof(string) })]
        string AvailabilityZone { get; set; }
        /// <summary>
        /// The ID of the encryption key that will be used to encrypt the data of the desination instance. Default value is Auto
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the encryption key that will be used to encrypt the data of the desination instance. Default value is Auto",
        SerializedName = @"encryptionKey",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionKey { get; set; }
        /// <summary>The name of the computer</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the computer",
        SerializedName = @"computerName",
        PossibleTypes = new [] { typeof(string) })]
        string GuestCredentialsComputerName { get; set; }
        /// <summary>The password of the user in Base64 format</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password of the user in Base64 format",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string GuestCredentialsPassword { get; set; }
        /// <summary>The user to be used to access the computer</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user to be used to access the computer",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string GuestCredentialsUserName { get; set; }
        /// <summary>Display name for the destination instance</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Display name for the destination instance",
        SerializedName = @"instanceName",
        PossibleTypes = new [] { typeof(string) })]
        string InstanceName { get; set; }
        /// <summary>
        /// The available CPU cores and memory to be used on the destination instance. Default value is Auto
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The available CPU cores and memory to be used on the destination instance. Default value is Auto",
        SerializedName = @"instanceType",
        PossibleTypes = new [] { typeof(string) })]
        string InstanceType { get; set; }
        /// <summary>The name of the network</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the network",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkName { get; set; }
        /// <summary>The ID of the subnet</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the subnet",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkSubnetId { get; set; }
        /// <summary>The ID of the VPC</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the VPC",
        SerializedName = @"vpc",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkVpc { get; set; }
        /// <summary>The name of the AWS region where the destination instance will reside</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the AWS region where the destination instance will reside",
        SerializedName = @"regionName",
        PossibleTypes = new [] { typeof(string) })]
        string RegionName { get; set; }
        /// <summary>
        /// The security group to be applied to the destination instance that acts as a virtual firewall. Default value is Auto
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The security group to be applied to the destination instance that acts as a virtual firewall. Default value is Auto",
        SerializedName = @"securityGroups",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.ISecurityGroup) })]
        Commvault.Powershell.Models.ISecurityGroup[] SecurityGroups { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"GUID",
        PossibleTypes = new [] { typeof(string) })]
        string SourceVMGuid { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SourceVMName { get; set; }
        /// <summary>
        /// ID of the volume type that will be used on the destination instance. Default value is Auto
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ID of the volume type that will be used on the destination instance. Default value is Auto",
        SerializedName = @"volumeType",
        PossibleTypes = new [] { typeof(string) })]
        string VolumeType { get; set; }

    }
    /// Replication options for Amazon. sourceVM should contain the name and the guid of the machine that has to be overriden
    internal partial interface IOverrideReplicationOptionsAmazonCreateInternal

    {
        /// <summary>The name of AWS zone where the destination instance will reside</summary>
        string AvailabilityZone { get; set; }
        /// <summary>
        /// The ID of the encryption key that will be used to encrypt the data of the desination instance. Default value is Auto
        /// </summary>
        string EncryptionKey { get; set; }
        /// <summary>
        /// Faster performance can be achieved during replication by using the VSA access node running on the Amazon instance. Applicable
        /// only if the source VM is Windows and the source hypervisor is not Amazon vendor.
        /// </summary>
        Commvault.Powershell.Models.IGuestCredentialsCreate GuestCredentials { get; set; }
        /// <summary>The name of the computer</summary>
        string GuestCredentialsComputerName { get; set; }
        /// <summary>The password of the user in Base64 format</summary>
        string GuestCredentialsPassword { get; set; }
        /// <summary>The user to be used to access the computer</summary>
        string GuestCredentialsUserName { get; set; }
        /// <summary>Display name for the destination instance</summary>
        string InstanceName { get; set; }
        /// <summary>
        /// The available CPU cores and memory to be used on the destination instance. Default value is Auto
        /// </summary>
        string InstanceType { get; set; }
        /// <summary>Network info</summary>
        Commvault.Powershell.Models.INetworkVpcSubnet Network { get; set; }
        /// <summary>The name of the network</summary>
        string NetworkName { get; set; }
        /// <summary>The ID of the subnet</summary>
        string NetworkSubnetId { get; set; }
        /// <summary>The ID of the VPC</summary>
        string NetworkVpc { get; set; }
        /// <summary>The name of the AWS region where the destination instance will reside</summary>
        string RegionName { get; set; }
        /// <summary>
        /// The security group to be applied to the destination instance that acts as a virtual firewall. Default value is Auto
        /// </summary>
        Commvault.Powershell.Models.ISecurityGroup[] SecurityGroups { get; set; }

        Commvault.Powershell.Models.INameGuid SourceVM { get; set; }

        string SourceVMGuid { get; set; }

        string SourceVMName { get; set; }
        /// <summary>
        /// ID of the volume type that will be used on the destination instance. Default value is Auto
        /// </summary>
        string VolumeType { get; set; }

    }
}