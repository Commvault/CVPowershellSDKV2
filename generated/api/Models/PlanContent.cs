// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>This feature applies only to file system agents</summary>
    public partial class PlanContent :
        Commvault.Powershell.Models.IPlanContent,
        Commvault.Powershell.Models.IPlanContentInternal
    {

        /// <summary>Backing field for <see cref="BackupSystemState" /> property.</summary>
        private bool? _backupSystemState;

        /// <summary>Do you want to back up the system state? Applicable only for Windows</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? BackupSystemState { get => this._backupSystemState; set => this._backupSystemState = value; }

        /// <summary>Backing field for <see cref="BackupSystemStateOnlyWithFullBackup" /> property.</summary>
        private bool? _backupSystemStateOnlyWithFullBackup;

        /// <summary>
        /// Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? BackupSystemStateOnlyWithFullBackup { get => this._backupSystemStateOnlyWithFullBackup; set => this._backupSystemStateOnlyWithFullBackup = value; }

        /// <summary>Backing field for <see cref="MacExcludedPaths" /> property.</summary>
        private string[] _macExcludedPaths;

        /// <summary>Paths to exclude for Mac</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string[] MacExcludedPaths { get => this._macExcludedPaths; set => this._macExcludedPaths = value; }

        /// <summary>Backing field for <see cref="MacIncludedPaths" /> property.</summary>
        private string[] _macIncludedPaths;

        /// <summary>Paths to include for Mac</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string[] MacIncludedPaths { get => this._macIncludedPaths; set => this._macIncludedPaths = value; }

        /// <summary>Backing field for <see cref="UnixExcludedPaths" /> property.</summary>
        private string[] _unixExcludedPaths;

        /// <summary>Paths to exclude for UNIX</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string[] UnixExcludedPaths { get => this._unixExcludedPaths; set => this._unixExcludedPaths = value; }

        /// <summary>Backing field for <see cref="UnixIncludedPaths" /> property.</summary>
        private string[] _unixIncludedPaths;

        /// <summary>Paths to include for UNIX</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string[] UnixIncludedPaths { get => this._unixIncludedPaths; set => this._unixIncludedPaths = value; }

        /// <summary>Backing field for <see cref="UseVssForSystemState" /> property.</summary>
        private bool? _useVssForSystemState;

        /// <summary>
        /// Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? UseVssForSystemState { get => this._useVssForSystemState; set => this._useVssForSystemState = value; }

        /// <summary>Backing field for <see cref="WindowsExcludedPaths" /> property.</summary>
        private string[] _windowsExcludedPaths;

        /// <summary>Paths to exclude for Windows</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string[] WindowsExcludedPaths { get => this._windowsExcludedPaths; set => this._windowsExcludedPaths = value; }

        /// <summary>Backing field for <see cref="WindowsIncludedPaths" /> property.</summary>
        private string[] _windowsIncludedPaths;

        /// <summary>Paths to include for Windows</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string[] WindowsIncludedPaths { get => this._windowsIncludedPaths; set => this._windowsIncludedPaths = value; }

        /// <summary>Creates an new <see cref="PlanContent" /> instance.</summary>
        public PlanContent()
        {

        }
    }
    /// This feature applies only to file system agents
    public partial interface IPlanContent :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Do you want to back up the system state? Applicable only for Windows</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Do you want to back up the system state? Applicable only for Windows",
        SerializedName = @"backupSystemState",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupSystemState { get; set; }
        /// <summary>
        /// Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true",
        SerializedName = @"backupSystemStateOnlyWithFullBackup",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupSystemStateOnlyWithFullBackup { get; set; }
        /// <summary>Paths to exclude for Mac</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to exclude for Mac",
        SerializedName = @"macExcludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] MacExcludedPaths { get; set; }
        /// <summary>Paths to include for Mac</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to include for Mac",
        SerializedName = @"macIncludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] MacIncludedPaths { get; set; }
        /// <summary>Paths to exclude for UNIX</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to exclude for UNIX",
        SerializedName = @"unixExcludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] UnixExcludedPaths { get; set; }
        /// <summary>Paths to include for UNIX</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to include for UNIX",
        SerializedName = @"unixIncludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] UnixIncludedPaths { get; set; }
        /// <summary>
        /// Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true",
        SerializedName = @"useVSSForSystemState",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseVssForSystemState { get; set; }
        /// <summary>Paths to exclude for Windows</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to exclude for Windows",
        SerializedName = @"windowsExcludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] WindowsExcludedPaths { get; set; }
        /// <summary>Paths to include for Windows</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to include for Windows",
        SerializedName = @"windowsIncludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] WindowsIncludedPaths { get; set; }

    }
    /// This feature applies only to file system agents
    internal partial interface IPlanContentInternal

    {
        /// <summary>Do you want to back up the system state? Applicable only for Windows</summary>
        bool? BackupSystemState { get; set; }
        /// <summary>
        /// Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true
        /// </summary>
        bool? BackupSystemStateOnlyWithFullBackup { get; set; }
        /// <summary>Paths to exclude for Mac</summary>
        string[] MacExcludedPaths { get; set; }
        /// <summary>Paths to include for Mac</summary>
        string[] MacIncludedPaths { get; set; }
        /// <summary>Paths to exclude for UNIX</summary>
        string[] UnixExcludedPaths { get; set; }
        /// <summary>Paths to include for UNIX</summary>
        string[] UnixIncludedPaths { get; set; }
        /// <summary>
        /// Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true
        /// </summary>
        bool? UseVssForSystemState { get; set; }
        /// <summary>Paths to exclude for Windows</summary>
        string[] WindowsExcludedPaths { get; set; }
        /// <summary>Paths to include for Windows</summary>
        string[] WindowsIncludedPaths { get; set; }

    }
}