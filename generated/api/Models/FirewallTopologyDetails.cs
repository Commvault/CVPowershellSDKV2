// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>FirewallTopologyDetails</summary>
    public partial class FirewallTopologyDetails :
        Commvault.Powershell.Models.IFirewallTopologyDetails,
        Commvault.Powershell.Models.IFirewallTopologyDetailsInternal
    {

        /// <summary>Backing field for <see cref="ClientType" /> property.</summary>
        private string _clientType;

        /// <summary>The type of clients associated with the topology.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string ClientType { get => this._clientType; set => this._clientType = value; }

        /// <summary>Internal Acessors for Topology</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IFirewallTopologyDetailsInternal.Topology { get => (this._topology = this._topology ?? new Commvault.Powershell.Models.IdName()); set { {_topology = value;} } }

        /// <summary>Backing field for <see cref="EncryptTraffic" /> property.</summary>
        private bool? _encryptTraffic;

        /// <summary>Flag determining if we want the data from tunnel to use HTTPS protocol</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? EncryptTraffic { get => this._encryptTraffic; set => this._encryptTraffic = value; }

        /// <summary>Backing field for <see cref="FirewallGroups" /> property.</summary>
        private Commvault.Powershell.Models.IFirewallTopologyGroups[] _firewallGroups;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IFirewallTopologyGroups[] FirewallGroups { get => this._firewallGroups; set => this._firewallGroups = value; }

        /// <summary>Backing field for <see cref="Topology" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _topology;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Topology { get => (this._topology = this._topology ?? new Commvault.Powershell.Models.IdName()); set => this._topology = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? TopologyId { get => ((Commvault.Powershell.Models.IIdNameInternal)Topology).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Topology).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string TopologyName { get => ((Commvault.Powershell.Models.IIdNameInternal)Topology).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Topology).Name = value ?? null; }

        /// <summary>Backing field for <see cref="TopologyType" /> property.</summary>
        private string _topologyType;

        /// <summary>
        /// The type of topology of client groups (and sometimes network gateway) for this instance.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string TopologyType { get => this._topologyType; set => this._topologyType = value; }

        /// <summary>Backing field for <see cref="TunnelProtocol" /> property.</summary>
        private string _tunnelProtocol;

        /// <summary>The protocol for outgoing communication</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string TunnelProtocol { get => this._tunnelProtocol; set => this._tunnelProtocol = value; }

        /// <summary>Backing field for <see cref="TunnelsPerRoute" /> property.</summary>
        private int? _tunnelsPerRoute;

        /// <summary>The number of tunnel connections per route</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public int? TunnelsPerRoute { get => this._tunnelsPerRoute; set => this._tunnelsPerRoute = value; }

        /// <summary>Backing field for <see cref="UseWildCardProxy" /> property.</summary>
        private bool? _useWildCardProxy;

        /// <summary>
        /// Flag determining wether network gateways are used to connect all infrastructure machines
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? UseWildCardProxy { get => this._useWildCardProxy; set => this._useWildCardProxy = value; }

        /// <summary>Creates an new <see cref="FirewallTopologyDetails" /> instance.</summary>
        public FirewallTopologyDetails()
        {

        }
    }
    /// FirewallTopologyDetails
    public partial interface IFirewallTopologyDetails :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>The type of clients associated with the topology.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of clients associated with the topology.",
        SerializedName = @"clientType",
        PossibleTypes = new [] { typeof(string) })]
        string ClientType { get; set; }
        /// <summary>Flag determining if we want the data from tunnel to use HTTPS protocol</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag determining if we want the data from tunnel to use HTTPS protocol",
        SerializedName = @"encryptTraffic",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EncryptTraffic { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"firewallGroups",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IFirewallTopologyGroups) })]
        Commvault.Powershell.Models.IFirewallTopologyGroups[] FirewallGroups { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? TopologyId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string TopologyName { get; set; }
        /// <summary>
        /// The type of topology of client groups (and sometimes network gateway) for this instance.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of topology of client groups (and sometimes network gateway) for this instance.",
        SerializedName = @"topologyType",
        PossibleTypes = new [] { typeof(string) })]
        string TopologyType { get; set; }
        /// <summary>The protocol for outgoing communication</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The protocol for outgoing communication",
        SerializedName = @"tunnelProtocol",
        PossibleTypes = new [] { typeof(string) })]
        string TunnelProtocol { get; set; }
        /// <summary>The number of tunnel connections per route</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of tunnel connections per route",
        SerializedName = @"tunnelsPerRoute",
        PossibleTypes = new [] { typeof(int) })]
        int? TunnelsPerRoute { get; set; }
        /// <summary>
        /// Flag determining wether network gateways are used to connect all infrastructure machines
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag determining wether network gateways are used to connect all infrastructure machines",
        SerializedName = @"useWildCardProxy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseWildCardProxy { get; set; }

    }
    /// FirewallTopologyDetails
    internal partial interface IFirewallTopologyDetailsInternal

    {
        /// <summary>The type of clients associated with the topology.</summary>
        string ClientType { get; set; }
        /// <summary>Flag determining if we want the data from tunnel to use HTTPS protocol</summary>
        bool? EncryptTraffic { get; set; }

        Commvault.Powershell.Models.IFirewallTopologyGroups[] FirewallGroups { get; set; }

        Commvault.Powershell.Models.IIdName Topology { get; set; }

        int? TopologyId { get; set; }

        string TopologyName { get; set; }
        /// <summary>
        /// The type of topology of client groups (and sometimes network gateway) for this instance.
        /// </summary>
        string TopologyType { get; set; }
        /// <summary>The protocol for outgoing communication</summary>
        string TunnelProtocol { get; set; }
        /// <summary>The number of tunnel connections per route</summary>
        int? TunnelsPerRoute { get; set; }
        /// <summary>
        /// Flag determining wether network gateways are used to connect all infrastructure machines
        /// </summary>
        bool? UseWildCardProxy { get; set; }

    }
}