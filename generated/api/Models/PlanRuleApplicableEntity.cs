// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Entity applicable for plan association via plan assignment rules.</summary>
    public partial class PlanRuleApplicableEntity :
        Commvault.Powershell.Models.IPlanRuleApplicableEntity,
        Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal
    {

        /// <summary>Backing field for <see cref="Apptype" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _apptype;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Apptype { get => (this._apptype = this._apptype ?? new Commvault.Powershell.Models.IdName()); set => this._apptype = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? ApptypeId { get => ((Commvault.Powershell.Models.IIdNameInternal)Apptype).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Apptype).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ApptypeName { get => ((Commvault.Powershell.Models.IIdNameInternal)Apptype).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Apptype).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Backupset" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _backupset;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Backupset { get => (this._backupset = this._backupset ?? new Commvault.Powershell.Models.IdName()); set => this._backupset = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? BackupsetId { get => ((Commvault.Powershell.Models.IIdNameInternal)Backupset).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Backupset).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupsetName { get => ((Commvault.Powershell.Models.IIdNameInternal)Backupset).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Backupset).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Client" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _client;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Client { get => (this._client = this._client ?? new Commvault.Powershell.Models.IdName()); set => this._client = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? ClientId { get => ((Commvault.Powershell.Models.IIdNameInternal)Client).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Client).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ClientName { get => ((Commvault.Powershell.Models.IIdNameInternal)Client).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Client).Name = value ?? null; }

        /// <summary>Internal Acessors for Apptype</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.Apptype { get => (this._apptype = this._apptype ?? new Commvault.Powershell.Models.IdName()); set { {_apptype = value;} } }

        /// <summary>Internal Acessors for Backupset</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.Backupset { get => (this._backupset = this._backupset ?? new Commvault.Powershell.Models.IdName()); set { {_backupset = value;} } }

        /// <summary>Internal Acessors for Client</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.Client { get => (this._client = this._client ?? new Commvault.Powershell.Models.IdName()); set { {_client = value;} } }

        /// <summary>Internal Acessors for CurrentPlan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.CurrentPlan { get => (this._currentPlan = this._currentPlan ?? new Commvault.Powershell.Models.IdName()); set { {_currentPlan = value;} } }

        /// <summary>Internal Acessors for EvaluatedPlan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.EvaluatedPlan { get => (this._evaluatedPlan = this._evaluatedPlan ?? new Commvault.Powershell.Models.IdName()); set { {_evaluatedPlan = value;} } }

        /// <summary>Internal Acessors for Instance</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.Instance { get => (this._instance = this._instance ?? new Commvault.Powershell.Models.IdName()); set { {_instance = value;} } }

        /// <summary>Internal Acessors for RuleDetailCompany</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.RuleDetailCompany { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Company; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Company = value; }

        /// <summary>Internal Acessors for RuleDetailPlan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.RuleDetailPlan { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Plan; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Plan = value; }

        /// <summary>Internal Acessors for RuleDetailRule</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.RuleDetailRule { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Rule; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Rule = value; }

        /// <summary>Internal Acessors for RuleDetails</summary>
        Commvault.Powershell.Models.IPlanEntityRuleInfo Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.RuleDetails { get => (this._ruleDetails = this._ruleDetails ?? new Commvault.Powershell.Models.PlanEntityRuleInfo()); set { {_ruleDetails = value;} } }

        /// <summary>Internal Acessors for Subclient</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanRuleApplicableEntityInternal.Subclient { get => (this._subclient = this._subclient ?? new Commvault.Powershell.Models.IdName()); set { {_subclient = value;} } }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? CompanyId { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).CompanyId; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).CompanyId = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string CompanyName { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).CompanyName; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).CompanyName = value ?? null; }

        /// <summary>Backing field for <see cref="CurrentPlan" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _currentPlan;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName CurrentPlan { get => (this._currentPlan = this._currentPlan ?? new Commvault.Powershell.Models.IdName()); set => this._currentPlan = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? CurrentPlanId { get => ((Commvault.Powershell.Models.IIdNameInternal)CurrentPlan).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)CurrentPlan).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string CurrentPlanName { get => ((Commvault.Powershell.Models.IIdNameInternal)CurrentPlan).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)CurrentPlan).Name = value ?? null; }

        /// <summary>Backing field for <see cref="EvaluatedPlan" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _evaluatedPlan;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName EvaluatedPlan { get => (this._evaluatedPlan = this._evaluatedPlan ?? new Commvault.Powershell.Models.IdName()); set => this._evaluatedPlan = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? EvaluatedPlanId { get => ((Commvault.Powershell.Models.IIdNameInternal)EvaluatedPlan).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)EvaluatedPlan).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string EvaluatedPlanName { get => ((Commvault.Powershell.Models.IIdNameInternal)EvaluatedPlan).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)EvaluatedPlan).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Instance" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _instance;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Instance { get => (this._instance = this._instance ?? new Commvault.Powershell.Models.IdName()); set => this._instance = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? InstanceId { get => ((Commvault.Powershell.Models.IIdNameInternal)Instance).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Instance).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string InstanceName { get => ((Commvault.Powershell.Models.IIdNameInternal)Instance).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Instance).Name = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? PlanId { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).PlanId; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).PlanId = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string PlanName { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).PlanName; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).PlanName = value ?? null; }

        /// <summary>This will suggest rank/priority of the plan rule.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? RuleDetailRank { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Rank; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Rank = value ?? default(int); }

        /// <summary>
        /// This will include list of regions that should be evaluated against workload region for plan association
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IIdName[] RuleDetailRegions { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Regions; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Regions = value ?? null /* arrayOf */; }

        /// <summary>
        /// This will include list of Server groups that should be evaluated against workload server group for plan association
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IIdName[] RuleDetailServerGroups { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).ServerGroups; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).ServerGroups = value ?? null /* arrayOf */; }

        /// <summary>
        /// This will include list of solutions that should be evaluated against workload for plan association.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IIdName[] RuleDetailSolutions { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Solutions; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Solutions = value ?? null /* arrayOf */; }

        /// <summary>
        /// This will include list of tags that should be evaluated against workload tags (if any) for plan association
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IPlanEntityRuleTag[] RuleDetailTags { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Tags; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Tags = value ?? null /* arrayOf */; }

        /// <summary>
        /// This will include list of apptypes that should be evaluated against workload for plan association
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IIdName[] RuleDetailWorkloads { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Workloads; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).Workloads = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="RuleDetails" /> property.</summary>
        private Commvault.Powershell.Models.IPlanEntityRuleInfo _ruleDetails;

        /// <summary>This object will hold each plan rule details.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanEntityRuleInfo RuleDetails { get => (this._ruleDetails = this._ruleDetails ?? new Commvault.Powershell.Models.PlanEntityRuleInfo()); set => this._ruleDetails = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? RuleId { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).RuleId; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).RuleId = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string RuleName { get => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).RuleName; set => ((Commvault.Powershell.Models.IPlanEntityRuleInfoInternal)RuleDetails).RuleName = value ?? null; }

        /// <summary>Backing field for <see cref="Subclient" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _subclient;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Subclient { get => (this._subclient = this._subclient ?? new Commvault.Powershell.Models.IdName()); set => this._subclient = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public int? SubclientId { get => ((Commvault.Powershell.Models.IIdNameInternal)Subclient).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Subclient).Id = value ?? default(int); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SubclientName { get => ((Commvault.Powershell.Models.IIdNameInternal)Subclient).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Subclient).Name = value ?? null; }

        /// <summary>Creates an new <see cref="PlanRuleApplicableEntity" /> instance.</summary>
        public PlanRuleApplicableEntity()
        {

        }
    }
    /// Entity applicable for plan association via plan assignment rules.
    public partial interface IPlanRuleApplicableEntity :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? ApptypeId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ApptypeName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? BackupsetId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string BackupsetName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? ClientId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ClientName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? CompanyId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CompanyName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? CurrentPlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CurrentPlanName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? EvaluatedPlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string EvaluatedPlanName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? InstanceId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string InstanceName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? PlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string PlanName { get; set; }
        /// <summary>This will suggest rank/priority of the plan rule.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This will suggest rank/priority of the plan rule.",
        SerializedName = @"rank",
        PossibleTypes = new [] { typeof(int) })]
        int? RuleDetailRank { get; set; }
        /// <summary>
        /// This will include list of regions that should be evaluated against workload region for plan association
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This will include list of regions that should be evaluated against workload region for plan association",
        SerializedName = @"regions",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] RuleDetailRegions { get; set; }
        /// <summary>
        /// This will include list of Server groups that should be evaluated against workload server group for plan association
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This will include list of Server groups that should be evaluated against workload server group for plan association",
        SerializedName = @"serverGroups",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] RuleDetailServerGroups { get; set; }
        /// <summary>
        /// This will include list of solutions that should be evaluated against workload for plan association.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This will include list of solutions that should be evaluated against workload for plan association.",
        SerializedName = @"solutions",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] RuleDetailSolutions { get; set; }
        /// <summary>
        /// This will include list of tags that should be evaluated against workload tags (if any) for plan association
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This will include list of tags that should be evaluated against workload tags (if any) for plan association",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IPlanEntityRuleTag) })]
        Commvault.Powershell.Models.IPlanEntityRuleTag[] RuleDetailTags { get; set; }
        /// <summary>
        /// This will include list of apptypes that should be evaluated against workload for plan association
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This will include list of apptypes that should be evaluated against workload for plan association",
        SerializedName = @"workloads",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] RuleDetailWorkloads { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? RuleId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string RuleName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? SubclientId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SubclientName { get; set; }

    }
    /// Entity applicable for plan association via plan assignment rules.
    internal partial interface IPlanRuleApplicableEntityInternal

    {
        Commvault.Powershell.Models.IIdName Apptype { get; set; }

        int? ApptypeId { get; set; }

        string ApptypeName { get; set; }

        Commvault.Powershell.Models.IIdName Backupset { get; set; }

        int? BackupsetId { get; set; }

        string BackupsetName { get; set; }

        Commvault.Powershell.Models.IIdName Client { get; set; }

        int? ClientId { get; set; }

        string ClientName { get; set; }

        int? CompanyId { get; set; }

        string CompanyName { get; set; }

        Commvault.Powershell.Models.IIdName CurrentPlan { get; set; }

        int? CurrentPlanId { get; set; }

        string CurrentPlanName { get; set; }

        Commvault.Powershell.Models.IIdName EvaluatedPlan { get; set; }

        int? EvaluatedPlanId { get; set; }

        string EvaluatedPlanName { get; set; }

        Commvault.Powershell.Models.IIdName Instance { get; set; }

        int? InstanceId { get; set; }

        string InstanceName { get; set; }

        int? PlanId { get; set; }

        string PlanName { get; set; }

        Commvault.Powershell.Models.IIdName RuleDetailCompany { get; set; }

        Commvault.Powershell.Models.IIdName RuleDetailPlan { get; set; }
        /// <summary>This will suggest rank/priority of the plan rule.</summary>
        int? RuleDetailRank { get; set; }
        /// <summary>
        /// This will include list of regions that should be evaluated against workload region for plan association
        /// </summary>
        Commvault.Powershell.Models.IIdName[] RuleDetailRegions { get; set; }

        Commvault.Powershell.Models.IIdName RuleDetailRule { get; set; }
        /// <summary>
        /// This will include list of Server groups that should be evaluated against workload server group for plan association
        /// </summary>
        Commvault.Powershell.Models.IIdName[] RuleDetailServerGroups { get; set; }
        /// <summary>
        /// This will include list of solutions that should be evaluated against workload for plan association.
        /// </summary>
        Commvault.Powershell.Models.IIdName[] RuleDetailSolutions { get; set; }
        /// <summary>
        /// This will include list of tags that should be evaluated against workload tags (if any) for plan association
        /// </summary>
        Commvault.Powershell.Models.IPlanEntityRuleTag[] RuleDetailTags { get; set; }
        /// <summary>
        /// This will include list of apptypes that should be evaluated against workload for plan association
        /// </summary>
        Commvault.Powershell.Models.IIdName[] RuleDetailWorkloads { get; set; }
        /// <summary>This object will hold each plan rule details.</summary>
        Commvault.Powershell.Models.IPlanEntityRuleInfo RuleDetails { get; set; }

        int? RuleId { get; set; }

        string RuleName { get; set; }

        Commvault.Powershell.Models.IIdName Subclient { get; set; }

        int? SubclientId { get; set; }

        string SubclientName { get; set; }

    }
}