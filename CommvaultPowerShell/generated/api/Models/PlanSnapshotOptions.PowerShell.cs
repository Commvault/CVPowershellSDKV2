// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    /// <summary>This feature applies only to File System Agents</summary>
    [System.ComponentModel.TypeConverter(typeof(PlanSnapshotOptionsTypeConverter))]
    public partial class PlanSnapshotOptions
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.PlanSnapshotOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IPlanSnapshotOptions" />.</returns>
        public static Commvault.Powershell.Models.IPlanSnapshotOptions DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new PlanSnapshotOptions(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.PlanSnapshotOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IPlanSnapshotOptions" />.</returns>
        public static Commvault.Powershell.Models.IPlanSnapshotOptions DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new PlanSnapshotOptions(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="PlanSnapshotOptions" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="PlanSnapshotOptions" /> model class.</returns>
        public static Commvault.Powershell.Models.IPlanSnapshotOptions FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.PlanSnapshotOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal PlanSnapshotOptions(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("BackupCopyFrequency"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequency = (Commvault.Powershell.Models.IBackupFrequencyPattern) content.GetValueForProperty("BackupCopyFrequency",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequency, Commvault.Powershell.Models.BackupFrequencyPatternTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupCopyOptions"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptions = (Commvault.Powershell.Models.IBackupCopyOptions) content.GetValueForProperty("BackupCopyOptions",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptions, Commvault.Powershell.Models.BackupCopyOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("EnableBackupCopy"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).EnableBackupCopy = (bool?) content.GetValueForProperty("EnableBackupCopy",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).EnableBackupCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyRpoMins"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyRpoMins = (long?) content.GetValueForProperty("BackupCopyRpoMins",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("EnableSnapCatalog"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).EnableSnapCatalog = (bool?) content.GetValueForProperty("EnableSnapCatalog",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).EnableSnapCatalog, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionStartTime"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionStartTime = (long?) content.GetValueForProperty("BackupCopyOptionStartTime",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionAction"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionAction = (string) content.GetValueForProperty("BackupCopyOptionAction",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionAction, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyScheduleFrequencyType"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyScheduleFrequencyType = (string) content.GetValueForProperty("BackupCopyFrequencyScheduleFrequencyType",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyScheduleFrequencyType, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyFrequency"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyFrequency = (long?) content.GetValueForProperty("BackupCopyFrequencyFrequency",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyFrequency, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyFrequencyWeeklyDays"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyWeeklyDays = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupCopyFrequencyWeeklyDays",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyWeeklyDays, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupCopyFrequencyDayOfMonth"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyDayOfMonth = (long?) content.GetValueForProperty("BackupCopyFrequencyDayOfMonth",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyDayOfMonth, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyFrequencyWeekOfMonth"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyWeekOfMonth = (string) content.GetValueForProperty("BackupCopyFrequencyWeekOfMonth",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyWeekOfMonth, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyDayOfWeek"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyDayOfWeek = (string) content.GetValueForProperty("BackupCopyFrequencyDayOfWeek",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyDayOfWeek, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyMonthOfYear"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyMonthOfYear = (string) content.GetValueForProperty("BackupCopyFrequencyMonthOfYear",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyMonthOfYear, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyStartTime"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyStartTime = (long?) content.GetValueForProperty("BackupCopyFrequencyStartTime",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionBackupTypeToCopy"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionBackupTypeToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupTypeToCopy",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionBackupTypeToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionBackupFullToCopy"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionBackupFullToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupFullToCopy",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionBackupFullToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionEnableAlert"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionEnableAlert = (bool?) content.GetValueForProperty("BackupCopyOptionEnableAlert",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionEnableAlert, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionAlertInHours"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionAlertInHours = (long?) content.GetValueForProperty("BackupCopyOptionAlertInHours",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionAlertInHours, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionSkipAfterThresholdDays"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionSkipAfterThresholdDays = (long?) content.GetValueForProperty("BackupCopyOptionSkipAfterThresholdDays",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionSkipAfterThresholdDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.PlanSnapshotOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal PlanSnapshotOptions(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("BackupCopyFrequency"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequency = (Commvault.Powershell.Models.IBackupFrequencyPattern) content.GetValueForProperty("BackupCopyFrequency",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequency, Commvault.Powershell.Models.BackupFrequencyPatternTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupCopyOptions"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptions = (Commvault.Powershell.Models.IBackupCopyOptions) content.GetValueForProperty("BackupCopyOptions",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptions, Commvault.Powershell.Models.BackupCopyOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("EnableBackupCopy"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).EnableBackupCopy = (bool?) content.GetValueForProperty("EnableBackupCopy",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).EnableBackupCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyRpoMins"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyRpoMins = (long?) content.GetValueForProperty("BackupCopyRpoMins",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("EnableSnapCatalog"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).EnableSnapCatalog = (bool?) content.GetValueForProperty("EnableSnapCatalog",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).EnableSnapCatalog, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionStartTime"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionStartTime = (long?) content.GetValueForProperty("BackupCopyOptionStartTime",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionAction"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionAction = (string) content.GetValueForProperty("BackupCopyOptionAction",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionAction, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyScheduleFrequencyType"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyScheduleFrequencyType = (string) content.GetValueForProperty("BackupCopyFrequencyScheduleFrequencyType",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyScheduleFrequencyType, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyFrequency"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyFrequency = (long?) content.GetValueForProperty("BackupCopyFrequencyFrequency",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyFrequency, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyFrequencyWeeklyDays"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyWeeklyDays = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupCopyFrequencyWeeklyDays",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyWeeklyDays, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupCopyFrequencyDayOfMonth"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyDayOfMonth = (long?) content.GetValueForProperty("BackupCopyFrequencyDayOfMonth",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyDayOfMonth, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyFrequencyWeekOfMonth"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyWeekOfMonth = (string) content.GetValueForProperty("BackupCopyFrequencyWeekOfMonth",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyWeekOfMonth, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyDayOfWeek"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyDayOfWeek = (string) content.GetValueForProperty("BackupCopyFrequencyDayOfWeek",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyDayOfWeek, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyMonthOfYear"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyMonthOfYear = (string) content.GetValueForProperty("BackupCopyFrequencyMonthOfYear",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyMonthOfYear, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyStartTime"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyStartTime = (long?) content.GetValueForProperty("BackupCopyFrequencyStartTime",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyFrequencyStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionBackupTypeToCopy"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionBackupTypeToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupTypeToCopy",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionBackupTypeToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionBackupFullToCopy"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionBackupFullToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupFullToCopy",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionBackupFullToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionEnableAlert"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionEnableAlert = (bool?) content.GetValueForProperty("BackupCopyOptionEnableAlert",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionEnableAlert, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionAlertInHours"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionAlertInHours = (long?) content.GetValueForProperty("BackupCopyOptionAlertInHours",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionAlertInHours, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionSkipAfterThresholdDays"))
            {
                ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionSkipAfterThresholdDays = (long?) content.GetValueForProperty("BackupCopyOptionSkipAfterThresholdDays",((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)this).BackupCopyOptionSkipAfterThresholdDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// This feature applies only to File System Agents
    [System.ComponentModel.TypeConverter(typeof(PlanSnapshotOptionsTypeConverter))]
    public partial interface IPlanSnapshotOptions

    {

    }
}