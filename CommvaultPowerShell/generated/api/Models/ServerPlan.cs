// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class ServerPlan :
        Commvault.Powershell.Models.IServerPlan,
        Commvault.Powershell.Models.IServerPlanInternal
    {

        /// <summary>Backing field for <see cref="AdditionalProperties" /> property.</summary>
        private Commvault.Powershell.Models.IPlanAdditionalProperties _additionalProperties;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanAdditionalProperties AdditionalProperties { get => (this._additionalProperties = this._additionalProperties ?? new Commvault.Powershell.Models.PlanAdditionalProperties()); set => this._additionalProperties = value; }

        /// <summary>The least RPO in minutes for the plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? AdditionalPropertyRpo { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).Rpo; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).Rpo = value ?? default(long); }

        /// <summary>status if plan backups are enabled or disabled</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string AdditionalPropertyStatus { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).Status; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).Status = value ?? null; }

        /// <summary>Database options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonDatabase { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonDatabase; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonDatabase = value ?? default(bool); }

        /// <summary>File system options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonFileSystem { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonFileSystem; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonFileSystem = value ?? default(bool); }

        /// <summary>Index copy options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonIndexCopy { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonIndexCopy; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonIndexCopy = value ?? default(bool); }

        /// <summary>Snap options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonSnap { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonSnap; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonSnap = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string AddonSnapStatus { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonSnapStatus; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonSnapStatus = value ?? null; }

        /// <summary>Backing field for <see cref="AllowPlanOverride" /> property.</summary>
        private bool? _allowPlanOverride;

        /// <summary>Is deriving and overriding the plan allowed</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? AllowPlanOverride { get => this._allowPlanOverride; set => this._allowPlanOverride = value; }

        /// <summary>Backing field for <see cref="AssociatedEntities" /> property.</summary>
        private System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameCount> _associatedEntities;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameCount> AssociatedEntities { get => this._associatedEntities; set => this._associatedEntities = value; }

        /// <summary>Backing field for <see cref="BackupContent" /> property.</summary>
        private Commvault.Powershell.Models.IPlanContent _backupContent;

        /// <summary>This feature applies only to file system agents</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanContent BackupContent { get => (this._backupContent = this._backupContent ?? new Commvault.Powershell.Models.PlanContent()); set => this._backupContent = value; }

        /// <summary>Do you want to back up the system state? Applicable only for Windows</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupContentBackupSystemState { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).BackupSystemState; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).BackupSystemState = value ?? default(bool); }

        /// <summary>
        /// Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupContentBackupSystemStateOnlyWithFullBackup { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).BackupSystemStateOnlyWithFullBackup; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).BackupSystemStateOnlyWithFullBackup = value ?? default(bool); }

        /// <summary>
        /// Do you want to sync properties on associated subclients even if properties are overriden at subclient level?
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupContentForceUpdateProperties { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).ForceUpdateProperties; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).ForceUpdateProperties = value ?? default(bool); }

        /// <summary>Paths to exclude for Mac</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> BackupContentMacExcludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacExcludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacExcludedPaths = value ?? null /* arrayOf */; }

        /// <summary>Paths that are exception to excluded paths for Mac</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> BackupContentMacFilterToExcludePaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacFilterToExcludePaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacFilterToExcludePaths = value ?? null /* arrayOf */; }

        /// <summary>Paths to include for Mac</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> BackupContentMacIncludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacIncludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacIncludedPaths = value ?? null /* arrayOf */; }

        /// <summary>Paths to exclude for UNIX</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> BackupContentUnixExcludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixExcludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixExcludedPaths = value ?? null /* arrayOf */; }

        /// <summary>Paths that are exception to excluded paths for Unix</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> BackupContentUnixFilterToExcludePaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixFilterToExcludePaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixFilterToExcludePaths = value ?? null /* arrayOf */; }

        /// <summary>Paths to include for UNIX</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> BackupContentUnixIncludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixIncludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixIncludedPaths = value ?? null /* arrayOf */; }

        /// <summary>
        /// Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupContentUseVssForSystemState { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UseVssForSystemState; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UseVssForSystemState = value ?? default(bool); }

        /// <summary>Paths to exclude for Windows</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> BackupContentWindowsExcludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsExcludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsExcludedPaths = value ?? null /* arrayOf */; }

        /// <summary>Paths that are exception to excluded paths for Windows</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> BackupContentWindowsFilterToExcludePaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsFilterToExcludePaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsFilterToExcludePaths = value ?? null /* arrayOf */; }

        /// <summary>Paths to include for Windows</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> BackupContentWindowsIncludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsIncludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsIncludedPaths = value ?? null /* arrayOf */; }

        /// <summary>
        /// Frequency of the schedule based on schedule frequency type eg. for Hours, value 2 is 2 hours, for Minutes, 30 is 30 minutes,
        /// for Daily, 2 is 2 days. for Monthly 2 is it repeats every 2 months
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyFrequency { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyFrequency; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyFrequency = value ?? default(long); }

        /// <summary>Day on which to run the schedule, applicable for monthly, yearly</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyFrequencyDayOfMonth { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyDayOfMonth; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyDayOfMonth = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyFrequencyDayOfWeek { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyDayOfWeek; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyDayOfWeek = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyFrequencyMonthOfYear { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyMonthOfYear; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyMonthOfYear = value ?? null; }

        /// <summary>schedule frequency type</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyFrequencyScheduleFrequencyType { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyScheduleFrequencyType; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyScheduleFrequencyType = value ?? null; }

        /// <summary>start time of schedule in seconds for daily, weekly, monthly, yearly frequency</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyFrequencyStartTime { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyStartTime; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyStartTime = value ?? default(long); }

        /// <summary>Specific week of a month</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyFrequencyWeekOfMonth { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyWeekOfMonth; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyWeekOfMonth = value ?? null; }

        /// <summary>Days of the week for weekly frequency</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> BackupCopyFrequencyWeeklyDays { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyWeeklyDays; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequencyWeeklyDays = value ?? null /* arrayOf */; }

        /// <summary>Which type of action should be followed if backup copy falls behind</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyOptionAction { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionAction; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionAction = value ?? null; }

        /// <summary>Alert to throw when backup copy falls behind in hours</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyOptionAlertInHours { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionAlertInHours; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionAlertInHours = value ?? default(long); }

        /// <summary>
        /// Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default
        /// is LAST while adding new backup destination.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyOptionBackupFullToCopy { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionBackupFullToCopy; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionBackupFullToCopy = value ?? null; }

        /// <summary>Backup type to copy for backup copy operation</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyOptionBackupTypeToCopy { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionBackupTypeToCopy; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionBackupTypeToCopy = value ?? null; }

        /// <summary>Flag to enable backup copy fallen behind alert</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupCopyOptionEnableAlert { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionEnableAlert; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionEnableAlert = value ?? default(bool); }

        /// <summary>The allowable delay in days before a backup copy job is considered overdue</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyOptionSkipAfterThresholdDays { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionSkipAfterThresholdDays; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionSkipAfterThresholdDays = value ?? default(long); }

        /// <summary>
        /// Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap
        /// copy.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyOptionStartTime { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionStartTime; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionStartTime = value ?? default(long); }

        /// <summary>Backing field for <see cref="BackupDestinationIds" /> property.</summary>
        private System.Collections.Generic.List<long> _backupDestinationIds;

        /// <summary>Primary Backup Destination Ids associated to this plan.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<long> BackupDestinationIds { get => this._backupDestinationIds; set => this._backupDestinationIds = value; }

        /// <summary>Backing field for <see cref="BackupDestinations" /> property.</summary>
        private System.Collections.Generic.List<Commvault.Powershell.Models.IPlanBackupDestination> _backupDestinations;

        /// <summary>Backup destinations for the plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IPlanBackupDestination> BackupDestinations { get => this._backupDestinations; set => this._backupDestinations = value; }

        /// <summary>Operation type for the list</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupFrequencyOperationType { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupFrequencyOperationType; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupFrequencyOperationType = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IPlanSchedule> BackupFrequencySchedules { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupFrequencySchedules; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupFrequencySchedules = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for AdditionalProperties</summary>
        Commvault.Powershell.Models.IPlanAdditionalProperties Commvault.Powershell.Models.IServerPlanInternal.AdditionalProperties { get => (this._additionalProperties = this._additionalProperties ?? new Commvault.Powershell.Models.PlanAdditionalProperties()); set { {_additionalProperties = value;} } }

        /// <summary>Internal Acessors for AdditionalPropertyAddons</summary>
        Commvault.Powershell.Models.IPlanAddons Commvault.Powershell.Models.IServerPlanInternal.AdditionalPropertyAddons { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).Addons; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).Addons = value; }

        /// <summary>Internal Acessors for BackupContent</summary>
        Commvault.Powershell.Models.IPlanContent Commvault.Powershell.Models.IServerPlanInternal.BackupContent { get => (this._backupContent = this._backupContent ?? new Commvault.Powershell.Models.PlanContent()); set { {_backupContent = value;} } }

        /// <summary>Internal Acessors for BackupContentMacNumberOfDataReaders</summary>
        Commvault.Powershell.Models.IPlanContentDataReaders Commvault.Powershell.Models.IServerPlanInternal.BackupContentMacNumberOfDataReaders { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacNumberOfDataReaders; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacNumberOfDataReaders = value; }

        /// <summary>Internal Acessors for BackupContentUnixNumberOfDataReaders</summary>
        Commvault.Powershell.Models.IPlanContentDataReaders Commvault.Powershell.Models.IServerPlanInternal.BackupContentUnixNumberOfDataReaders { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixNumberOfDataReaders; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixNumberOfDataReaders = value; }

        /// <summary>Internal Acessors for BackupContentWindowsNumberOfDataReaders</summary>
        Commvault.Powershell.Models.IPlanContentDataReaders Commvault.Powershell.Models.IServerPlanInternal.BackupContentWindowsNumberOfDataReaders { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsNumberOfDataReaders; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsNumberOfDataReaders = value; }

        /// <summary>Internal Acessors for DatabaseOptions</summary>
        Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo Commvault.Powershell.Models.IServerPlanInternal.DatabaseOptions { get => (this._databaseOptions = this._databaseOptions ?? new Commvault.Powershell.Models.ServerPlanDatabaseOptionsInfo()); set { {_databaseOptions = value;} } }

        /// <summary>Internal Acessors for GlobalConfigInfo</summary>
        Commvault.Powershell.Models.IGlobalConfigInfo Commvault.Powershell.Models.IServerPlanInternal.GlobalConfigInfo { get => (this._globalConfigInfo = this._globalConfigInfo ?? new Commvault.Powershell.Models.GlobalConfigInfo()); set { {_globalConfigInfo = value;} } }

        /// <summary>Internal Acessors for InheritSettingBackupContent</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions Commvault.Powershell.Models.IServerPlanInternal.InheritSettingBackupContent { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContent; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContent = value; }

        /// <summary>Internal Acessors for InheritSettingBasePlan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IServerPlanInternal.InheritSettingBasePlan { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlan; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlan = value; }

        /// <summary>Internal Acessors for InheritSettingRpo</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions Commvault.Powershell.Models.IServerPlanInternal.InheritSettingRpo { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).Rpo; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).Rpo = value; }

        /// <summary>Internal Acessors for InheritSettingStoragePool</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions Commvault.Powershell.Models.IServerPlanInternal.InheritSettingStoragePool { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePool; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePool = value; }

        /// <summary>Internal Acessors for InheritSettings</summary>
        Commvault.Powershell.Models.IServerPlanInheritSettings Commvault.Powershell.Models.IServerPlanInternal.InheritSettings { get => (this._inheritSettings = this._inheritSettings ?? new Commvault.Powershell.Models.ServerPlanInheritSettings()); set { {_inheritSettings = value;} } }

        /// <summary>Internal Acessors for OverrideRestrictions</summary>
        Commvault.Powershell.Models.IPlanOverrideSettings Commvault.Powershell.Models.IServerPlanInternal.OverrideRestrictions { get => (this._overrideRestrictions = this._overrideRestrictions ?? new Commvault.Powershell.Models.PlanOverrideSettings()); set { {_overrideRestrictions = value;} } }

        /// <summary>Internal Acessors for ParentInheritSettingBackupContent</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions Commvault.Powershell.Models.IServerPlanInternal.ParentInheritSettingBackupContent { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BackupContent; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BackupContent = value; }

        /// <summary>Internal Acessors for ParentInheritSettingBasePlan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IServerPlanInternal.ParentInheritSettingBasePlan { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BasePlan; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BasePlan = value; }

        /// <summary>Internal Acessors for ParentInheritSettingRpo</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions Commvault.Powershell.Models.IServerPlanInternal.ParentInheritSettingRpo { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).Rpo; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).Rpo = value; }

        /// <summary>Internal Acessors for ParentInheritSettingStoragePool</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions Commvault.Powershell.Models.IServerPlanInternal.ParentInheritSettingStoragePool { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).StoragePool; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).StoragePool = value; }

        /// <summary>Internal Acessors for ParentInheritSettings</summary>
        Commvault.Powershell.Models.IServerPlanInheritSettings Commvault.Powershell.Models.IServerPlanInternal.ParentInheritSettings { get => (this._parentInheritSettings = this._parentInheritSettings ?? new Commvault.Powershell.Models.ServerPlanInheritSettings()); set { {_parentInheritSettings = value;} } }

        /// <summary>Internal Acessors for Plan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IServerPlanInternal.Plan { get => (this._plan = this._plan ?? new Commvault.Powershell.Models.IdName()); set { {_plan = value;} } }

        /// <summary>Internal Acessors for Rpo</summary>
        Commvault.Powershell.Models.IServerPlanRpo Commvault.Powershell.Models.IServerPlanInternal.Rpo { get => (this._rpo = this._rpo ?? new Commvault.Powershell.Models.ServerPlanRpo()); set { {_rpo = value;} } }

        /// <summary>Internal Acessors for RpoBackupFrequency</summary>
        Commvault.Powershell.Models.IPlanSchedules Commvault.Powershell.Models.IServerPlanInternal.RpoBackupFrequency { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupFrequency; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupFrequency = value; }

        /// <summary>Internal Acessors for RpoSla</summary>
        Commvault.Powershell.Models.ISlaOptions Commvault.Powershell.Models.IServerPlanInternal.RpoSla { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).Sla; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).Sla = value; }

        /// <summary>Internal Acessors for SettingFileSearch</summary>
        Commvault.Powershell.Models.IPlanFileSearch Commvault.Powershell.Models.IServerPlanInternal.SettingFileSearch { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearch; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearch = value; }

        /// <summary>Internal Acessors for Settings</summary>
        Commvault.Powershell.Models.IServerPlanSettings Commvault.Powershell.Models.IServerPlanInternal.Settings { get => (this._settings = this._settings ?? new Commvault.Powershell.Models.ServerPlanSettings()); set { {_settings = value;} } }

        /// <summary>Internal Acessors for SnapshotOptionBackupCopyFrequency</summary>
        Commvault.Powershell.Models.IBackupFrequencyPattern Commvault.Powershell.Models.IServerPlanInternal.SnapshotOptionBackupCopyFrequency { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequency; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyFrequency = value; }

        /// <summary>Internal Acessors for SnapshotOptionBackupCopyOptions</summary>
        Commvault.Powershell.Models.IBackupCopyOptions Commvault.Powershell.Models.IServerPlanInternal.SnapshotOptionBackupCopyOptions { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptions; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptions = value; }

        /// <summary>Internal Acessors for SnapshotOptions</summary>
        Commvault.Powershell.Models.IPlanSnapshotOptions Commvault.Powershell.Models.IServerPlanInternal.SnapshotOptions { get => (this._snapshotOptions = this._snapshotOptions ?? new Commvault.Powershell.Models.PlanSnapshotOptions()); set { {_snapshotOptions = value;} } }

        /// <summary>Internal Acessors for Workload</summary>
        Commvault.Powershell.Models.IPlanWorkloads Commvault.Powershell.Models.IServerPlanInternal.Workload { get => (this._workload = this._workload ?? new Commvault.Powershell.Models.PlanWorkloads()); set { {_workload = value;} } }

        /// <summary>Commit frequency in hours</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? DatabaseOptionCommitFrequencyInHours { get => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).CommitFrequencyInHours; set => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).CommitFrequencyInHours = value ?? default(long); }

        /// <summary>Log backup RPO in minutes</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? DatabaseOptionLogBackupRpoMins { get => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).LogBackupRpoMins; set => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).LogBackupRpoMins = value ?? default(long); }

        /// <summary>Full backup frequency in days</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? DatabaseOptionRunFullBackupEvery { get => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).RunFullBackupEvery; set => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).RunFullBackupEvery = value ?? default(long); }

        /// <summary>Use disk cache for log backups</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? DatabaseOptionUseDiskCacheForLogBackups { get => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).UseDiskCacheForLogBackups; set => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).UseDiskCacheForLogBackups = value ?? default(bool); }

        /// <summary>Backing field for <see cref="DatabaseOptions" /> property.</summary>
        private Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo _databaseOptions;

        /// <summary>This feature applies only to database agents</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo DatabaseOptions { get => (this._databaseOptions = this._databaseOptions ?? new Commvault.Powershell.Models.ServerPlanDatabaseOptionsInfo()); set => this._databaseOptions = value; }

        /// <summary>Flag for enabling indexing</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? FileSearchEnabled { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchEnabled; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchEnabled = value ?? default(bool); }

        /// <summary>
        /// File search was enabled on plan but failed to process some of the storage pool(s) with these errors
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IPlanFileSearchSetupError> FileSearchErrors { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchErrors; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchErrors = value ?? null /* arrayOf */; }

        /// <summary>Type of indexing status.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string FileSearchStatus { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchStatus; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchStatus = value ?? null; }

        /// <summary>
        /// Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string FileSearchStatusMessage { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchStatusMessage; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchStatusMessage = value ?? null; }

        /// <summary>Backing field for <see cref="GlobalConfigInfo" /> property.</summary>
        private Commvault.Powershell.Models.IGlobalConfigInfo _globalConfigInfo;

        /// <summary>Only applicable on Global CommCells</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IGlobalConfigInfo GlobalConfigInfo { get => (this._globalConfigInfo = this._globalConfigInfo ?? new Commvault.Powershell.Models.GlobalConfigInfo()); set => this._globalConfigInfo = value; }

        /// <summary>
        /// Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? GlobalConfigInfoApplyOnAllCommCells { get => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).ApplyOnAllCommCells; set => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).ApplyOnAllCommCells = value ?? default(bool); }

        /// <summary>List of Service CommCells where the global configuration is applied</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IGlobalConfigCommcellInfo> GlobalConfigInfoCommcells { get => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).Commcells; set => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).Commcells = value ?? null /* arrayOf */; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoId { get => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).Id; set => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).Id = value ?? null; }

        /// <summary>Indicates whether global configuration deletion has been started.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? GlobalConfigInfoIsMarkedForDeletion { get => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).IsMarkedForDeletion; set => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).IsMarkedForDeletion = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoName { get => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).Name; set => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).Name = value ?? null; }

        /// <summary>The entity level at which the config is applied.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoScope { get => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).Scope; set => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).Scope = value ?? null; }

        /// <summary>CommCellEntityCache filter query string used for filtering the scope</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoScopeFilterQuery { get => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).ScopeFilterQuery; set => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).ScopeFilterQuery = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoStatus { get => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).Status; set => ((Commvault.Powershell.Models.IGlobalConfigInfoInternal)GlobalConfigInfo).Status = value ?? null; }

        /// <summary>Backing field for <see cref="InheritSettings" /> property.</summary>
        private Commvault.Powershell.Models.IServerPlanInheritSettings _inheritSettings;

        /// <summary>ServerPlanInheritSettings</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IServerPlanInheritSettings InheritSettings { get => (this._inheritSettings = this._inheritSettings ?? new Commvault.Powershell.Models.ServerPlanInheritSettings()); set => this._inheritSettings = value; }

        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? InheritSettingsBackupContentOverridden { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContentOverridden; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContentOverridden = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string InheritSettingsBackupContentOverrideBase { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContentOverrideBase; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContentOverrideBase = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? InheritSettingsBasePlanId { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlanId; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlanId = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string InheritSettingsBasePlanName { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlanName; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlanName = value ?? null; }

        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? InheritSettingsRPOOverridden { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).RpoOverridden; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).RpoOverridden = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string InheritSettingsRPOOverrideBase { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).RpoOverrideBase; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).RpoOverrideBase = value ?? null; }

        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? InheritSettingsStoragePoolOverridden { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePoolOverridden; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePoolOverridden = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string InheritSettingsStoragePoolOverrideBase { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePoolOverrideBase; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePoolOverrideBase = value ?? null; }

        /// <summary>Number of data readers.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? MacNumberOfDataReaderCount { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacNumberOfDataReaderCount; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacNumberOfDataReaderCount = value ?? default(long); }

        /// <summary>
        /// Set optimal number of data readers. if it is set to true, count will be ignored.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? MacNumberOfDataReaderUseOptimal { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacNumberOfDataReaderUseOptimal; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacNumberOfDataReaderUseOptimal = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string OverrideRestrictionBackupContent { get => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).BackupContent; set => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).BackupContent = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string OverrideRestrictionRpo { get => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).Rpo; set => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).Rpo = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string OverrideRestrictionStoragePool { get => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).StoragePool; set => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).StoragePool = value ?? null; }

        /// <summary>Backing field for <see cref="OverrideRestrictions" /> property.</summary>
        private Commvault.Powershell.Models.IPlanOverrideSettings _overrideRestrictions;

        /// <summary>
        /// To allow the derived plans that use this plan as the base plan to override the settings, property allowPlanOverride must
        /// be true, and then select one of the options for Storage pool, RPO and backup Content.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanOverrideSettings OverrideRestrictions { get => (this._overrideRestrictions = this._overrideRestrictions ?? new Commvault.Powershell.Models.PlanOverrideSettings()); set => this._overrideRestrictions = value; }

        /// <summary>Backing field for <see cref="ParentInheritSettings" /> property.</summary>
        private Commvault.Powershell.Models.IServerPlanInheritSettings _parentInheritSettings;

        /// <summary>ServerPlanInheritSettings</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IServerPlanInheritSettings ParentInheritSettings { get => (this._parentInheritSettings = this._parentInheritSettings ?? new Commvault.Powershell.Models.ServerPlanInheritSettings()); set => this._parentInheritSettings = value; }

        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ParentInheritSettingsBackupContentOverridden { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BackupContentOverridden; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BackupContentOverridden = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ParentInheritSettingsBackupContentOverrideBase { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BackupContentOverrideBase; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BackupContentOverrideBase = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? ParentInheritSettingsBasePlanId { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BasePlanId; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BasePlanId = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ParentInheritSettingsBasePlanName { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BasePlanName; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).BasePlanName = value ?? null; }

        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ParentInheritSettingsRPOOverridden { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).RpoOverridden; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).RpoOverridden = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ParentInheritSettingsRPOOverrideBase { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).RpoOverrideBase; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).RpoOverrideBase = value ?? null; }

        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ParentInheritSettingsStoragePoolOverridden { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).StoragePoolOverridden; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).StoragePoolOverridden = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ParentInheritSettingsStoragePoolOverrideBase { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).StoragePoolOverrideBase; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)ParentInheritSettings).StoragePoolOverrideBase = value ?? null; }

        /// <summary>Backing field for <see cref="Permissions" /> property.</summary>
        private System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> _permissions;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> Permissions { get => this._permissions; set => this._permissions = value; }

        /// <summary>Backing field for <see cref="Plan" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _plan;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Plan { get => (this._plan = this._plan ?? new Commvault.Powershell.Models.IdName()); set => this._plan = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? PlanId { get => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string PlanName { get => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Name = value ?? null; }

        /// <summary>Backing field for <see cref="RegionsConfigured" /> property.</summary>
        private bool? _regionsConfigured;

        /// <summary>Specifies if the destinations are associated to regions</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? RegionsConfigured { get => this._regionsConfigured; set => this._regionsConfigured = value; }

        /// <summary>Backing field for <see cref="Rpo" /> property.</summary>
        private Commvault.Powershell.Models.IServerPlanRpo _rpo;

        /// <summary>
        /// Recovery Point Objective (RPO) is the maximum amount of time that data can be lost during a service disruption. Your RPO
        /// determines the frequency of your backup jobs.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IServerPlanRpo Rpo { get => (this._rpo = this._rpo ?? new Commvault.Powershell.Models.ServerPlanRpo()); set => this._rpo = value; }

        /// <summary>Backup window for incremental backup</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IDayAndTime> RpoBackupWindow { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupWindow; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupWindow = value ?? null /* arrayOf */; }

        /// <summary>Backup window for full backup</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IDayAndTime> RpoFullBackupWindow { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).FullBackupWindow; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).FullBackupWindow = value ?? null /* arrayOf */; }

        /// <summary>
        /// For each region, the data to backup is divided into these many streams while writing to backup destination.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SettingDeviceStreams { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).DeviceStreams; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).DeviceStreams = value ?? default(long); }

        /// <summary>
        /// Setting to suggest plan has some advanced settings present. Setting is OEM specific and not applicable for all cases.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SettingEnableAdvancedView { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).EnableAdvancedView; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).EnableAdvancedView = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Settings" /> property.</summary>
        private Commvault.Powershell.Models.IServerPlanSettings _settings;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IServerPlanSettings Settings { get => (this._settings = this._settings ?? new Commvault.Powershell.Models.ServerPlanSettings()); set => this._settings = value; }

        /// <summary>Time provided in Unix format. Give 0 to reset any existing delay.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SlaEnableAfterDelay { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaEnableAfterDelay; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaEnableAfterDelay = value ?? default(long); }

        /// <summary>Flag to set to exclude plan from SLA</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SlaExcludeFromSla { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaExcludeFromSla; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaExcludeFromSla = value ?? default(bool); }

        /// <summary>Reason for exclusion from SLA</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SlaExclusionReason { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaExclusionReason; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaExclusionReason = value ?? null; }

        /// <summary>Tells us from where SLA Period was inherited</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SlaInheritedFrom { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaInheritedFrom; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaInheritedFrom = value ?? null; }

        /// <summary>Inherited SLA Period in Days</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SlaInheritedSlaPeriod { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaInheritedSlaPeriod; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaInheritedSlaPeriod = value ?? default(long); }

        /// <summary>Database log SLA period in Minutes</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SlaLogSlaMinutes { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaLogSlaMinutes; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaLogSlaMinutes = value ?? default(long); }

        /// <summary>SLA Period in Days</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SlaPeriod { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaPeriod; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaPeriod = value ?? default(long); }

        /// <summary>Flag to set to use System Default Service Level Agreement</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SlaUseSystemDefaultSla { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaUseSystemDefaultSla; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaUseSystemDefaultSla = value ?? default(bool); }

        /// <summary>Backup copy RPO in minutes</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SnapshotOptionBackupCopyRpoMins { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyRpoMins; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyRpoMins = value ?? default(long); }

        /// <summary>Flag to enable backup copy</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SnapshotOptionEnableBackupCopy { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).EnableBackupCopy; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).EnableBackupCopy = value ?? default(bool); }

        /// <summary>Flag to enable deferred snapshot cataloging</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SnapshotOptionEnableSnapCatalog { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).EnableSnapCatalog; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).EnableSnapCatalog = value ?? default(bool); }

        /// <summary>Backing field for <see cref="SnapshotOptions" /> property.</summary>
        private Commvault.Powershell.Models.IPlanSnapshotOptions _snapshotOptions;

        /// <summary>This feature applies only to File System Agents</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanSnapshotOptions SnapshotOptions { get => (this._snapshotOptions = this._snapshotOptions ?? new Commvault.Powershell.Models.PlanSnapshotOptions()); set => this._snapshotOptions = value; }

        /// <summary>Number of data readers.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? UnixNumberOfDataReaderCount { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixNumberOfDataReaderCount; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixNumberOfDataReaderCount = value ?? default(long); }

        /// <summary>
        /// Set optimal number of data readers. if it is set to true, count will be ignored.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? UnixNumberOfDataReaderUseOptimal { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixNumberOfDataReaderUseOptimal; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixNumberOfDataReaderUseOptimal = value ?? default(bool); }

        /// <summary>Number of data readers.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? WindowNumberOfDataReaderCount { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowNumberOfDataReaderCount; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowNumberOfDataReaderCount = value ?? default(long); }

        /// <summary>
        /// Set optimal number of data readers. if it is set to true, count will be ignored.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? WindowNumberOfDataReaderUseOptimal { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowNumberOfDataReaderUseOptimal; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowNumberOfDataReaderUseOptimal = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Workload" /> property.</summary>
        private Commvault.Powershell.Models.IPlanWorkloads _workload;

        /// <summary>PlanWorkloads</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanWorkloads Workload { get => (this._workload = this._workload ?? new Commvault.Powershell.Models.PlanWorkloads()); set => this._workload = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> WorkloadGroupTypes { get => ((Commvault.Powershell.Models.IPlanWorkloadsInternal)Workload).WorkloadGroupTypes; set => ((Commvault.Powershell.Models.IPlanWorkloadsInternal)Workload).WorkloadGroupTypes = value ?? null /* arrayOf */; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> WorkloadSolutions { get => ((Commvault.Powershell.Models.IPlanWorkloadsInternal)Workload).Solutions; set => ((Commvault.Powershell.Models.IPlanWorkloadsInternal)Workload).Solutions = value ?? null /* arrayOf */; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> WorkloadTypes { get => ((Commvault.Powershell.Models.IPlanWorkloadsInternal)Workload).WorkloadTypes; set => ((Commvault.Powershell.Models.IPlanWorkloadsInternal)Workload).WorkloadTypes = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="ServerPlan" /> instance.</summary>
        public ServerPlan()
        {

        }
    }
    public partial interface IServerPlan :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>The least RPO in minutes for the plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The least RPO in minutes for the plan",
        SerializedName = @"RPO",
        PossibleTypes = new [] { typeof(long) })]
        long? AdditionalPropertyRpo { get; set; }
        /// <summary>status if plan backups are enabled or disabled</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"status if plan backups are enabled or disabled",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string AdditionalPropertyStatus { get; set; }
        /// <summary>Database options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Database options should be shown with this plan",
        SerializedName = @"database",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonDatabase { get; set; }
        /// <summary>File system options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"File system options should be shown with this plan",
        SerializedName = @"fileSystem",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonFileSystem { get; set; }
        /// <summary>Index copy options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Index copy options should be shown with this plan",
        SerializedName = @"indexCopy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonIndexCopy { get; set; }
        /// <summary>Snap options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Snap options should be shown with this plan",
        SerializedName = @"snap",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonSnap { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"snapStatus",
        PossibleTypes = new [] { typeof(string) })]
        string AddonSnapStatus { get; set; }
        /// <summary>Is deriving and overriding the plan allowed</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Is deriving and overriding the plan allowed",
        SerializedName = @"allowPlanOverride",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowPlanOverride { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"associatedEntities",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdNameCount) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameCount> AssociatedEntities { get; set; }
        /// <summary>Do you want to back up the system state? Applicable only for Windows</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Do you want to back up the system state? Applicable only for Windows",
        SerializedName = @"backupSystemState",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupContentBackupSystemState { get; set; }
        /// <summary>
        /// Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true",
        SerializedName = @"backupSystemStateOnlyWithFullBackup",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupContentBackupSystemStateOnlyWithFullBackup { get; set; }
        /// <summary>
        /// Do you want to sync properties on associated subclients even if properties are overriden at subclient level?
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Do you want to sync properties on associated subclients even if properties are overriden at subclient level?",
        SerializedName = @"forceUpdateProperties",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupContentForceUpdateProperties { get; set; }
        /// <summary>Paths to exclude for Mac</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Paths to exclude for Mac",
        SerializedName = @"macExcludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BackupContentMacExcludedPaths { get; set; }
        /// <summary>Paths that are exception to excluded paths for Mac</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Paths that are exception to excluded paths for Mac",
        SerializedName = @"macFilterToExcludePaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BackupContentMacFilterToExcludePaths { get; set; }
        /// <summary>Paths to include for Mac</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Paths to include for Mac",
        SerializedName = @"macIncludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BackupContentMacIncludedPaths { get; set; }
        /// <summary>Paths to exclude for UNIX</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Paths to exclude for UNIX",
        SerializedName = @"unixExcludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BackupContentUnixExcludedPaths { get; set; }
        /// <summary>Paths that are exception to excluded paths for Unix</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Paths that are exception to excluded paths for Unix",
        SerializedName = @"unixFilterToExcludePaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BackupContentUnixFilterToExcludePaths { get; set; }
        /// <summary>Paths to include for UNIX</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Paths to include for UNIX",
        SerializedName = @"unixIncludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BackupContentUnixIncludedPaths { get; set; }
        /// <summary>
        /// Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true",
        SerializedName = @"useVSSForSystemState",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupContentUseVssForSystemState { get; set; }
        /// <summary>Paths to exclude for Windows</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Paths to exclude for Windows",
        SerializedName = @"windowsExcludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BackupContentWindowsExcludedPaths { get; set; }
        /// <summary>Paths that are exception to excluded paths for Windows</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Paths that are exception to excluded paths for Windows",
        SerializedName = @"windowsFilterToExcludePaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BackupContentWindowsFilterToExcludePaths { get; set; }
        /// <summary>Paths to include for Windows</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Paths to include for Windows",
        SerializedName = @"windowsIncludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BackupContentWindowsIncludedPaths { get; set; }
        /// <summary>
        /// Frequency of the schedule based on schedule frequency type eg. for Hours, value 2 is 2 hours, for Minutes, 30 is 30 minutes,
        /// for Daily, 2 is 2 days. for Monthly 2 is it repeats every 2 months
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Frequency of the schedule based on schedule frequency type eg. for Hours, value 2 is 2 hours, for Minutes, 30 is 30 minutes, for Daily, 2 is 2 days. for Monthly 2 is it repeats every 2 months",
        SerializedName = @"frequency",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyFrequency { get; set; }
        /// <summary>Day on which to run the schedule, applicable for monthly, yearly</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Day on which to run the schedule, applicable for monthly, yearly",
        SerializedName = @"dayOfMonth",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyFrequencyDayOfMonth { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyFrequencyDayOfWeek { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"monthOfYear",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyFrequencyMonthOfYear { get; set; }
        /// <summary>schedule frequency type</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"schedule frequency type",
        SerializedName = @"scheduleFrequencyType",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyFrequencyScheduleFrequencyType { get; set; }
        /// <summary>start time of schedule in seconds for daily, weekly, monthly, yearly frequency</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"start time of schedule in seconds for daily, weekly, monthly, yearly frequency",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyFrequencyStartTime { get; set; }
        /// <summary>Specific week of a month</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specific week of a month",
        SerializedName = @"weekOfMonth",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyFrequencyWeekOfMonth { get; set; }
        /// <summary>Days of the week for weekly frequency</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Days of the week for weekly frequency",
        SerializedName = @"weeklyDays",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BackupCopyFrequencyWeeklyDays { get; set; }
        /// <summary>Which type of action should be followed if backup copy falls behind</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Which type of action should be followed if backup copy falls behind",
        SerializedName = @"action",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyOptionAction { get; set; }
        /// <summary>Alert to throw when backup copy falls behind in hours</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Alert to throw when backup copy falls behind in hours",
        SerializedName = @"alertInHours",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyOptionAlertInHours { get; set; }
        /// <summary>
        /// Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default
        /// is LAST while adding new backup destination.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default is LAST while adding new backup destination.",
        SerializedName = @"backupFullToCopy",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyOptionBackupFullToCopy { get; set; }
        /// <summary>Backup type to copy for backup copy operation</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Backup type to copy for backup copy operation",
        SerializedName = @"backupTypeToCopy",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyOptionBackupTypeToCopy { get; set; }
        /// <summary>Flag to enable backup copy fallen behind alert</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to enable backup copy fallen behind alert",
        SerializedName = @"enableAlert",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupCopyOptionEnableAlert { get; set; }
        /// <summary>The allowable delay in days before a backup copy job is considered overdue</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The allowable delay in days before a backup copy job is considered overdue",
        SerializedName = @"skipAfterThresholdDays",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyOptionSkipAfterThresholdDays { get; set; }
        /// <summary>
        /// Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap
        /// copy.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap copy.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyOptionStartTime { get; set; }
        /// <summary>Primary Backup Destination Ids associated to this plan.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Primary Backup Destination Ids associated to this plan.",
        SerializedName = @"backupDestinationIds",
        PossibleTypes = new [] { typeof(long) })]
        System.Collections.Generic.List<long> BackupDestinationIds { get; set; }
        /// <summary>Backup destinations for the plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Backup destinations for the plan",
        SerializedName = @"backupDestinations",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IPlanBackupDestination) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IPlanBackupDestination> BackupDestinations { get; set; }
        /// <summary>Operation type for the list</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Operation type for the list",
        SerializedName = @"operationType",
        PossibleTypes = new [] { typeof(string) })]
        string BackupFrequencyOperationType { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"schedules",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IPlanSchedule) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IPlanSchedule> BackupFrequencySchedules { get; set; }
        /// <summary>Commit frequency in hours</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Commit frequency in hours",
        SerializedName = @"commitFrequencyInHours",
        PossibleTypes = new [] { typeof(long) })]
        long? DatabaseOptionCommitFrequencyInHours { get; set; }
        /// <summary>Log backup RPO in minutes</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Log backup RPO in minutes",
        SerializedName = @"logBackupRPOMins",
        PossibleTypes = new [] { typeof(long) })]
        long? DatabaseOptionLogBackupRpoMins { get; set; }
        /// <summary>Full backup frequency in days</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Full backup frequency in days",
        SerializedName = @"runFullBackupEvery",
        PossibleTypes = new [] { typeof(long) })]
        long? DatabaseOptionRunFullBackupEvery { get; set; }
        /// <summary>Use disk cache for log backups</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Use disk cache for log backups",
        SerializedName = @"useDiskCacheForLogBackups",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DatabaseOptionUseDiskCacheForLogBackups { get; set; }
        /// <summary>Flag for enabling indexing</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag for enabling indexing",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FileSearchEnabled { get; set; }
        /// <summary>
        /// File search was enabled on plan but failed to process some of the storage pool(s) with these errors
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"File search was enabled on plan but failed to process some of the storage pool(s) with these errors",
        SerializedName = @"errors",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IPlanFileSearchSetupError) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IPlanFileSearchSetupError> FileSearchErrors { get; set; }
        /// <summary>Type of indexing status.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of indexing status.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string FileSearchStatus { get; set; }
        /// <summary>
        /// Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress",
        SerializedName = @"statusMessage",
        PossibleTypes = new [] { typeof(string) })]
        string FileSearchStatusMessage { get; set; }
        /// <summary>
        /// Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones",
        SerializedName = @"applyOnAllCommCells",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GlobalConfigInfoApplyOnAllCommCells { get; set; }
        /// <summary>List of Service CommCells where the global configuration is applied</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of Service CommCells where the global configuration is applied",
        SerializedName = @"commcells",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IGlobalConfigCommcellInfo) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IGlobalConfigCommcellInfo> GlobalConfigInfoCommcells { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoId { get; set; }
        /// <summary>Indicates whether global configuration deletion has been started.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether global configuration deletion has been started.",
        SerializedName = @"isMarkedForDeletion",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GlobalConfigInfoIsMarkedForDeletion { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoName { get; set; }
        /// <summary>The entity level at which the config is applied.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The entity level at which the config is applied.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoScope { get; set; }
        /// <summary>CommCellEntityCache filter query string used for filtering the scope</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"CommCellEntityCache filter query string used for filtering the scope",
        SerializedName = @"scopeFilterQuery",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoScopeFilterQuery { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoStatus { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag telling if this setting is currently being overriden",
        SerializedName = @"overridden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? InheritSettingsBackupContentOverridden { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"overrideBase",
        PossibleTypes = new [] { typeof(string) })]
        string InheritSettingsBackupContentOverrideBase { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? InheritSettingsBasePlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string InheritSettingsBasePlanName { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag telling if this setting is currently being overriden",
        SerializedName = @"overridden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? InheritSettingsRPOOverridden { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"overrideBase",
        PossibleTypes = new [] { typeof(string) })]
        string InheritSettingsRPOOverrideBase { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag telling if this setting is currently being overriden",
        SerializedName = @"overridden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? InheritSettingsStoragePoolOverridden { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"overrideBase",
        PossibleTypes = new [] { typeof(string) })]
        string InheritSettingsStoragePoolOverrideBase { get; set; }
        /// <summary>Number of data readers.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of data readers.",
        SerializedName = @"count",
        PossibleTypes = new [] { typeof(long) })]
        long? MacNumberOfDataReaderCount { get; set; }
        /// <summary>
        /// Set optimal number of data readers. if it is set to true, count will be ignored.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Set optimal number of data readers. if it is set to true, count will be ignored.",
        SerializedName = @"useOptimal",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MacNumberOfDataReaderUseOptimal { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"backupContent",
        PossibleTypes = new [] { typeof(string) })]
        string OverrideRestrictionBackupContent { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"RPO",
        PossibleTypes = new [] { typeof(string) })]
        string OverrideRestrictionRpo { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"storagePool",
        PossibleTypes = new [] { typeof(string) })]
        string OverrideRestrictionStoragePool { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag telling if this setting is currently being overriden",
        SerializedName = @"overridden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ParentInheritSettingsBackupContentOverridden { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"overrideBase",
        PossibleTypes = new [] { typeof(string) })]
        string ParentInheritSettingsBackupContentOverrideBase { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? ParentInheritSettingsBasePlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ParentInheritSettingsBasePlanName { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag telling if this setting is currently being overriden",
        SerializedName = @"overridden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ParentInheritSettingsRPOOverridden { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"overrideBase",
        PossibleTypes = new [] { typeof(string) })]
        string ParentInheritSettingsRPOOverrideBase { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag telling if this setting is currently being overriden",
        SerializedName = @"overridden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ParentInheritSettingsStoragePoolOverridden { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"overrideBase",
        PossibleTypes = new [] { typeof(string) })]
        string ParentInheritSettingsStoragePoolOverrideBase { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"permissions",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> Permissions { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? PlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string PlanName { get; set; }
        /// <summary>Specifies if the destinations are associated to regions</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies if the destinations are associated to regions",
        SerializedName = @"regionsConfigured",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RegionsConfigured { get; set; }
        /// <summary>Backup window for incremental backup</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Backup window for incremental backup",
        SerializedName = @"backupWindow",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IDayAndTime) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IDayAndTime> RpoBackupWindow { get; set; }
        /// <summary>Backup window for full backup</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Backup window for full backup",
        SerializedName = @"fullBackupWindow",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IDayAndTime) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IDayAndTime> RpoFullBackupWindow { get; set; }
        /// <summary>
        /// For each region, the data to backup is divided into these many streams while writing to backup destination.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"For each region, the data to backup is divided into these many streams while writing to backup destination.",
        SerializedName = @"deviceStreams",
        PossibleTypes = new [] { typeof(long) })]
        long? SettingDeviceStreams { get; set; }
        /// <summary>
        /// Setting to suggest plan has some advanced settings present. Setting is OEM specific and not applicable for all cases.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Setting to suggest plan has some advanced settings present. Setting is OEM specific and not applicable for all cases.",
        SerializedName = @"enableAdvancedView",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SettingEnableAdvancedView { get; set; }
        /// <summary>Time provided in Unix format. Give 0 to reset any existing delay.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Time provided in Unix format. Give 0 to reset any existing delay.",
        SerializedName = @"enableAfterDelay",
        PossibleTypes = new [] { typeof(long) })]
        long? SlaEnableAfterDelay { get; set; }
        /// <summary>Flag to set to exclude plan from SLA</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to set to exclude plan from SLA",
        SerializedName = @"excludeFromSLA",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SlaExcludeFromSla { get; set; }
        /// <summary>Reason for exclusion from SLA</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Reason for exclusion from SLA",
        SerializedName = @"exclusionReason",
        PossibleTypes = new [] { typeof(string) })]
        string SlaExclusionReason { get; set; }
        /// <summary>Tells us from where SLA Period was inherited</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Tells us from where SLA Period was inherited",
        SerializedName = @"inheritedFrom",
        PossibleTypes = new [] { typeof(string) })]
        string SlaInheritedFrom { get; set; }
        /// <summary>Inherited SLA Period in Days</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Inherited SLA Period in Days",
        SerializedName = @"inheritedSLAPeriod",
        PossibleTypes = new [] { typeof(long) })]
        long? SlaInheritedSlaPeriod { get; set; }
        /// <summary>Database log SLA period in Minutes</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Database log SLA period in Minutes",
        SerializedName = @"logSLAMinutes",
        PossibleTypes = new [] { typeof(long) })]
        long? SlaLogSlaMinutes { get; set; }
        /// <summary>SLA Period in Days</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"SLA Period in Days",
        SerializedName = @"SLAPeriod",
        PossibleTypes = new [] { typeof(long) })]
        long? SlaPeriod { get; set; }
        /// <summary>Flag to set to use System Default Service Level Agreement</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to set to use System Default Service Level Agreement",
        SerializedName = @"useSystemDefaultSLA",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SlaUseSystemDefaultSla { get; set; }
        /// <summary>Backup copy RPO in minutes</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Backup copy RPO in minutes",
        SerializedName = @"backupCopyRPOMins",
        PossibleTypes = new [] { typeof(long) })]
        long? SnapshotOptionBackupCopyRpoMins { get; set; }
        /// <summary>Flag to enable backup copy</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to enable backup copy",
        SerializedName = @"enableBackupCopy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SnapshotOptionEnableBackupCopy { get; set; }
        /// <summary>Flag to enable deferred snapshot cataloging</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to enable deferred snapshot cataloging",
        SerializedName = @"enableSnapCatalog",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SnapshotOptionEnableSnapCatalog { get; set; }
        /// <summary>Number of data readers.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of data readers.",
        SerializedName = @"count",
        PossibleTypes = new [] { typeof(long) })]
        long? UnixNumberOfDataReaderCount { get; set; }
        /// <summary>
        /// Set optimal number of data readers. if it is set to true, count will be ignored.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Set optimal number of data readers. if it is set to true, count will be ignored.",
        SerializedName = @"useOptimal",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UnixNumberOfDataReaderUseOptimal { get; set; }
        /// <summary>Number of data readers.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of data readers.",
        SerializedName = @"count",
        PossibleTypes = new [] { typeof(long) })]
        long? WindowNumberOfDataReaderCount { get; set; }
        /// <summary>
        /// Set optimal number of data readers. if it is set to true, count will be ignored.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Set optimal number of data readers. if it is set to true, count will be ignored.",
        SerializedName = @"useOptimal",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowNumberOfDataReaderUseOptimal { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"workloadGroupTypes",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> WorkloadGroupTypes { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"solutions",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> WorkloadSolutions { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"workloadTypes",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> WorkloadTypes { get; set; }

    }
    internal partial interface IServerPlanInternal

    {
        Commvault.Powershell.Models.IPlanAdditionalProperties AdditionalProperties { get; set; }

        Commvault.Powershell.Models.IPlanAddons AdditionalPropertyAddons { get; set; }
        /// <summary>The least RPO in minutes for the plan</summary>
        long? AdditionalPropertyRpo { get; set; }
        /// <summary>status if plan backups are enabled or disabled</summary>
        string AdditionalPropertyStatus { get; set; }
        /// <summary>Database options should be shown with this plan</summary>
        bool? AddonDatabase { get; set; }
        /// <summary>File system options should be shown with this plan</summary>
        bool? AddonFileSystem { get; set; }
        /// <summary>Index copy options should be shown with this plan</summary>
        bool? AddonIndexCopy { get; set; }
        /// <summary>Snap options should be shown with this plan</summary>
        bool? AddonSnap { get; set; }

        string AddonSnapStatus { get; set; }
        /// <summary>Is deriving and overriding the plan allowed</summary>
        bool? AllowPlanOverride { get; set; }

        System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameCount> AssociatedEntities { get; set; }
        /// <summary>This feature applies only to file system agents</summary>
        Commvault.Powershell.Models.IPlanContent BackupContent { get; set; }
        /// <summary>Do you want to back up the system state? Applicable only for Windows</summary>
        bool? BackupContentBackupSystemState { get; set; }
        /// <summary>
        /// Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true
        /// </summary>
        bool? BackupContentBackupSystemStateOnlyWithFullBackup { get; set; }
        /// <summary>
        /// Do you want to sync properties on associated subclients even if properties are overriden at subclient level?
        /// </summary>
        bool? BackupContentForceUpdateProperties { get; set; }
        /// <summary>Paths to exclude for Mac</summary>
        System.Collections.Generic.List<string> BackupContentMacExcludedPaths { get; set; }
        /// <summary>Paths that are exception to excluded paths for Mac</summary>
        System.Collections.Generic.List<string> BackupContentMacFilterToExcludePaths { get; set; }
        /// <summary>Paths to include for Mac</summary>
        System.Collections.Generic.List<string> BackupContentMacIncludedPaths { get; set; }

        Commvault.Powershell.Models.IPlanContentDataReaders BackupContentMacNumberOfDataReaders { get; set; }
        /// <summary>Paths to exclude for UNIX</summary>
        System.Collections.Generic.List<string> BackupContentUnixExcludedPaths { get; set; }
        /// <summary>Paths that are exception to excluded paths for Unix</summary>
        System.Collections.Generic.List<string> BackupContentUnixFilterToExcludePaths { get; set; }
        /// <summary>Paths to include for UNIX</summary>
        System.Collections.Generic.List<string> BackupContentUnixIncludedPaths { get; set; }

        Commvault.Powershell.Models.IPlanContentDataReaders BackupContentUnixNumberOfDataReaders { get; set; }
        /// <summary>
        /// Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true
        /// </summary>
        bool? BackupContentUseVssForSystemState { get; set; }
        /// <summary>Paths to exclude for Windows</summary>
        System.Collections.Generic.List<string> BackupContentWindowsExcludedPaths { get; set; }
        /// <summary>Paths that are exception to excluded paths for Windows</summary>
        System.Collections.Generic.List<string> BackupContentWindowsFilterToExcludePaths { get; set; }
        /// <summary>Paths to include for Windows</summary>
        System.Collections.Generic.List<string> BackupContentWindowsIncludedPaths { get; set; }

        Commvault.Powershell.Models.IPlanContentDataReaders BackupContentWindowsNumberOfDataReaders { get; set; }
        /// <summary>
        /// Frequency of the schedule based on schedule frequency type eg. for Hours, value 2 is 2 hours, for Minutes, 30 is 30 minutes,
        /// for Daily, 2 is 2 days. for Monthly 2 is it repeats every 2 months
        /// </summary>
        long? BackupCopyFrequency { get; set; }
        /// <summary>Day on which to run the schedule, applicable for monthly, yearly</summary>
        long? BackupCopyFrequencyDayOfMonth { get; set; }

        string BackupCopyFrequencyDayOfWeek { get; set; }

        string BackupCopyFrequencyMonthOfYear { get; set; }
        /// <summary>schedule frequency type</summary>
        string BackupCopyFrequencyScheduleFrequencyType { get; set; }
        /// <summary>start time of schedule in seconds for daily, weekly, monthly, yearly frequency</summary>
        long? BackupCopyFrequencyStartTime { get; set; }
        /// <summary>Specific week of a month</summary>
        string BackupCopyFrequencyWeekOfMonth { get; set; }
        /// <summary>Days of the week for weekly frequency</summary>
        System.Collections.Generic.List<string> BackupCopyFrequencyWeeklyDays { get; set; }
        /// <summary>Which type of action should be followed if backup copy falls behind</summary>
        string BackupCopyOptionAction { get; set; }
        /// <summary>Alert to throw when backup copy falls behind in hours</summary>
        long? BackupCopyOptionAlertInHours { get; set; }
        /// <summary>
        /// Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default
        /// is LAST while adding new backup destination.
        /// </summary>
        string BackupCopyOptionBackupFullToCopy { get; set; }
        /// <summary>Backup type to copy for backup copy operation</summary>
        string BackupCopyOptionBackupTypeToCopy { get; set; }
        /// <summary>Flag to enable backup copy fallen behind alert</summary>
        bool? BackupCopyOptionEnableAlert { get; set; }
        /// <summary>The allowable delay in days before a backup copy job is considered overdue</summary>
        long? BackupCopyOptionSkipAfterThresholdDays { get; set; }
        /// <summary>
        /// Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap
        /// copy.
        /// </summary>
        long? BackupCopyOptionStartTime { get; set; }
        /// <summary>Primary Backup Destination Ids associated to this plan.</summary>
        System.Collections.Generic.List<long> BackupDestinationIds { get; set; }
        /// <summary>Backup destinations for the plan</summary>
        System.Collections.Generic.List<Commvault.Powershell.Models.IPlanBackupDestination> BackupDestinations { get; set; }
        /// <summary>Operation type for the list</summary>
        string BackupFrequencyOperationType { get; set; }

        System.Collections.Generic.List<Commvault.Powershell.Models.IPlanSchedule> BackupFrequencySchedules { get; set; }
        /// <summary>Commit frequency in hours</summary>
        long? DatabaseOptionCommitFrequencyInHours { get; set; }
        /// <summary>Log backup RPO in minutes</summary>
        long? DatabaseOptionLogBackupRpoMins { get; set; }
        /// <summary>Full backup frequency in days</summary>
        long? DatabaseOptionRunFullBackupEvery { get; set; }
        /// <summary>Use disk cache for log backups</summary>
        bool? DatabaseOptionUseDiskCacheForLogBackups { get; set; }
        /// <summary>This feature applies only to database agents</summary>
        Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo DatabaseOptions { get; set; }
        /// <summary>Flag for enabling indexing</summary>
        bool? FileSearchEnabled { get; set; }
        /// <summary>
        /// File search was enabled on plan but failed to process some of the storage pool(s) with these errors
        /// </summary>
        System.Collections.Generic.List<Commvault.Powershell.Models.IPlanFileSearchSetupError> FileSearchErrors { get; set; }
        /// <summary>Type of indexing status.</summary>
        string FileSearchStatus { get; set; }
        /// <summary>
        /// Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress
        /// </summary>
        string FileSearchStatusMessage { get; set; }
        /// <summary>Only applicable on Global CommCells</summary>
        Commvault.Powershell.Models.IGlobalConfigInfo GlobalConfigInfo { get; set; }
        /// <summary>
        /// Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones
        /// </summary>
        bool? GlobalConfigInfoApplyOnAllCommCells { get; set; }
        /// <summary>List of Service CommCells where the global configuration is applied</summary>
        System.Collections.Generic.List<Commvault.Powershell.Models.IGlobalConfigCommcellInfo> GlobalConfigInfoCommcells { get; set; }

        string GlobalConfigInfoId { get; set; }
        /// <summary>Indicates whether global configuration deletion has been started.</summary>
        bool? GlobalConfigInfoIsMarkedForDeletion { get; set; }

        string GlobalConfigInfoName { get; set; }
        /// <summary>The entity level at which the config is applied.</summary>
        string GlobalConfigInfoScope { get; set; }
        /// <summary>CommCellEntityCache filter query string used for filtering the scope</summary>
        string GlobalConfigInfoScopeFilterQuery { get; set; }

        string GlobalConfigInfoStatus { get; set; }
        /// <summary>PlanOverridenOptions</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions InheritSettingBackupContent { get; set; }

        Commvault.Powershell.Models.IIdName InheritSettingBasePlan { get; set; }
        /// <summary>PlanOverridenOptions</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions InheritSettingRpo { get; set; }
        /// <summary>PlanOverridenOptions</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions InheritSettingStoragePool { get; set; }
        /// <summary>ServerPlanInheritSettings</summary>
        Commvault.Powershell.Models.IServerPlanInheritSettings InheritSettings { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        bool? InheritSettingsBackupContentOverridden { get; set; }

        string InheritSettingsBackupContentOverrideBase { get; set; }

        long? InheritSettingsBasePlanId { get; set; }

        string InheritSettingsBasePlanName { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        bool? InheritSettingsRPOOverridden { get; set; }

        string InheritSettingsRPOOverrideBase { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        bool? InheritSettingsStoragePoolOverridden { get; set; }

        string InheritSettingsStoragePoolOverrideBase { get; set; }
        /// <summary>Number of data readers.</summary>
        long? MacNumberOfDataReaderCount { get; set; }
        /// <summary>
        /// Set optimal number of data readers. if it is set to true, count will be ignored.
        /// </summary>
        bool? MacNumberOfDataReaderUseOptimal { get; set; }

        string OverrideRestrictionBackupContent { get; set; }

        string OverrideRestrictionRpo { get; set; }

        string OverrideRestrictionStoragePool { get; set; }
        /// <summary>
        /// To allow the derived plans that use this plan as the base plan to override the settings, property allowPlanOverride must
        /// be true, and then select one of the options for Storage pool, RPO and backup Content.
        /// </summary>
        Commvault.Powershell.Models.IPlanOverrideSettings OverrideRestrictions { get; set; }
        /// <summary>PlanOverridenOptions</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions ParentInheritSettingBackupContent { get; set; }

        Commvault.Powershell.Models.IIdName ParentInheritSettingBasePlan { get; set; }
        /// <summary>PlanOverridenOptions</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions ParentInheritSettingRpo { get; set; }
        /// <summary>PlanOverridenOptions</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions ParentInheritSettingStoragePool { get; set; }
        /// <summary>ServerPlanInheritSettings</summary>
        Commvault.Powershell.Models.IServerPlanInheritSettings ParentInheritSettings { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        bool? ParentInheritSettingsBackupContentOverridden { get; set; }

        string ParentInheritSettingsBackupContentOverrideBase { get; set; }

        long? ParentInheritSettingsBasePlanId { get; set; }

        string ParentInheritSettingsBasePlanName { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        bool? ParentInheritSettingsRPOOverridden { get; set; }

        string ParentInheritSettingsRPOOverrideBase { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        bool? ParentInheritSettingsStoragePoolOverridden { get; set; }

        string ParentInheritSettingsStoragePoolOverrideBase { get; set; }

        System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> Permissions { get; set; }

        Commvault.Powershell.Models.IIdName Plan { get; set; }

        long? PlanId { get; set; }

        string PlanName { get; set; }
        /// <summary>Specifies if the destinations are associated to regions</summary>
        bool? RegionsConfigured { get; set; }
        /// <summary>
        /// Recovery Point Objective (RPO) is the maximum amount of time that data can be lost during a service disruption. Your RPO
        /// determines the frequency of your backup jobs.
        /// </summary>
        Commvault.Powershell.Models.IServerPlanRpo Rpo { get; set; }
        /// <summary>PlanSchedules</summary>
        Commvault.Powershell.Models.IPlanSchedules RpoBackupFrequency { get; set; }
        /// <summary>Backup window for incremental backup</summary>
        System.Collections.Generic.List<Commvault.Powershell.Models.IDayAndTime> RpoBackupWindow { get; set; }
        /// <summary>Backup window for full backup</summary>
        System.Collections.Generic.List<Commvault.Powershell.Models.IDayAndTime> RpoFullBackupWindow { get; set; }
        /// <summary>
        /// A server meets SLA (Service Level Agreement) when all of its subclients have at least one successful backup during the
        /// number of days specified at the CommCell, Server Group or plan level.
        /// </summary>
        Commvault.Powershell.Models.ISlaOptions RpoSla { get; set; }
        /// <summary>
        /// For each region, the data to backup is divided into these many streams while writing to backup destination.
        /// </summary>
        long? SettingDeviceStreams { get; set; }
        /// <summary>
        /// Setting to suggest plan has some advanced settings present. Setting is OEM specific and not applicable for all cases.
        /// </summary>
        bool? SettingEnableAdvancedView { get; set; }
        /// <summary>
        /// This feature applies to file servers and virtualization. Enabling this feature allows you to search for backed-up files
        /// using the global search bar, and creates resource pools with required infrastructure entities.
        /// </summary>
        Commvault.Powershell.Models.IPlanFileSearch SettingFileSearch { get; set; }

        Commvault.Powershell.Models.IServerPlanSettings Settings { get; set; }
        /// <summary>Time provided in Unix format. Give 0 to reset any existing delay.</summary>
        long? SlaEnableAfterDelay { get; set; }
        /// <summary>Flag to set to exclude plan from SLA</summary>
        bool? SlaExcludeFromSla { get; set; }
        /// <summary>Reason for exclusion from SLA</summary>
        string SlaExclusionReason { get; set; }
        /// <summary>Tells us from where SLA Period was inherited</summary>
        string SlaInheritedFrom { get; set; }
        /// <summary>Inherited SLA Period in Days</summary>
        long? SlaInheritedSlaPeriod { get; set; }
        /// <summary>Database log SLA period in Minutes</summary>
        long? SlaLogSlaMinutes { get; set; }
        /// <summary>SLA Period in Days</summary>
        long? SlaPeriod { get; set; }
        /// <summary>Flag to set to use System Default Service Level Agreement</summary>
        bool? SlaUseSystemDefaultSla { get; set; }
        /// <summary>Used to describe the frequency of backup</summary>
        Commvault.Powershell.Models.IBackupFrequencyPattern SnapshotOptionBackupCopyFrequency { get; set; }
        /// <summary>Options for snap management with backup copy</summary>
        Commvault.Powershell.Models.IBackupCopyOptions SnapshotOptionBackupCopyOptions { get; set; }
        /// <summary>Backup copy RPO in minutes</summary>
        long? SnapshotOptionBackupCopyRpoMins { get; set; }
        /// <summary>Flag to enable backup copy</summary>
        bool? SnapshotOptionEnableBackupCopy { get; set; }
        /// <summary>Flag to enable deferred snapshot cataloging</summary>
        bool? SnapshotOptionEnableSnapCatalog { get; set; }
        /// <summary>This feature applies only to File System Agents</summary>
        Commvault.Powershell.Models.IPlanSnapshotOptions SnapshotOptions { get; set; }
        /// <summary>Number of data readers.</summary>
        long? UnixNumberOfDataReaderCount { get; set; }
        /// <summary>
        /// Set optimal number of data readers. if it is set to true, count will be ignored.
        /// </summary>
        bool? UnixNumberOfDataReaderUseOptimal { get; set; }
        /// <summary>Number of data readers.</summary>
        long? WindowNumberOfDataReaderCount { get; set; }
        /// <summary>
        /// Set optimal number of data readers. if it is set to true, count will be ignored.
        /// </summary>
        bool? WindowNumberOfDataReaderUseOptimal { get; set; }
        /// <summary>PlanWorkloads</summary>
        Commvault.Powershell.Models.IPlanWorkloads Workload { get; set; }

        System.Collections.Generic.List<string> WorkloadGroupTypes { get; set; }

        System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> WorkloadSolutions { get; set; }

        System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> WorkloadTypes { get; set; }

    }
}