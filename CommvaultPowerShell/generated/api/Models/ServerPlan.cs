// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.2, generator: @autorest/powershell@3.0.494)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class ServerPlan :
        Commvault.Powershell.Models.IServerPlan,
        Commvault.Powershell.Models.IServerPlanInternal
    {

        /// <summary>Backing field for <see cref="AdditionalProperties" /> property.</summary>
        private Commvault.Powershell.Models.IPlanAdditionalProperties _additionalProperties;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanAdditionalProperties AdditionalProperties { get => (this._additionalProperties = this._additionalProperties ?? new Commvault.Powershell.Models.PlanAdditionalProperties()); set => this._additionalProperties = value; }

        /// <summary>Database options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonDatabase { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonDatabase; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonDatabase = value ?? default(bool); }

        /// <summary>File system options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonFileSystem { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonFileSystem; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonFileSystem = value ?? default(bool); }

        /// <summary>Index copy options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonIndexCopy { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonIndexCopy; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonIndexCopy = value ?? default(bool); }

        /// <summary>Snap options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonSnap { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonSnap; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonSnap = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string AddonSnapStatus { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonSnapStatus; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).AddonSnapStatus = value ?? null; }

        /// <summary>Backing field for <see cref="AllowPlanOverride" /> property.</summary>
        private bool? _allowPlanOverride;

        /// <summary>Is deriving and overriding the plan allowed</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? AllowPlanOverride { get => this._allowPlanOverride; set => this._allowPlanOverride = value; }

        /// <summary>Backing field for <see cref="AssociatedEntities" /> property.</summary>
        private Commvault.Powershell.Models.IIdNameCount[] _associatedEntities;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdNameCount[] AssociatedEntities { get => this._associatedEntities; set => this._associatedEntities = value; }

        /// <summary>Backing field for <see cref="BackupContent" /> property.</summary>
        private Commvault.Powershell.Models.IPlanContent _backupContent;

        /// <summary>This feature applies only to file system agents</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanContent BackupContent { get => (this._backupContent = this._backupContent ?? new Commvault.Powershell.Models.PlanContent()); set => this._backupContent = value; }

        /// <summary>Do you want to back up the system state? Applicable only for Windows</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupContentBackupSystemState { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).BackupSystemState; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).BackupSystemState = value ?? default(bool); }

        /// <summary>
        /// Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupContentBackupSystemStateOnlyWithFullBackup { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).BackupSystemStateOnlyWithFullBackup; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).BackupSystemStateOnlyWithFullBackup = value ?? default(bool); }

        /// <summary>Paths to exclude for Mac</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string[] BackupContentMacExcludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacExcludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacExcludedPaths = value ?? null /* arrayOf */; }

        /// <summary>Paths to include for Mac</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string[] BackupContentMacIncludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacIncludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).MacIncludedPaths = value ?? null /* arrayOf */; }

        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupContentOverridden { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContentOverridden; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContentOverridden = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupContentOverrideBase { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContentOverrideBase; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContentOverrideBase = value ?? null; }

        /// <summary>Paths to exclude for UNIX</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string[] BackupContentUnixExcludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixExcludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixExcludedPaths = value ?? null /* arrayOf */; }

        /// <summary>Paths to include for UNIX</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string[] BackupContentUnixIncludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixIncludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UnixIncludedPaths = value ?? null /* arrayOf */; }

        /// <summary>
        /// Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupContentUseVssForSystemState { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UseVssForSystemState; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).UseVssForSystemState = value ?? default(bool); }

        /// <summary>Paths to exclude for Windows</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string[] BackupContentWindowsExcludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsExcludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsExcludedPaths = value ?? null /* arrayOf */; }

        /// <summary>Paths to include for Windows</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string[] BackupContentWindowsIncludedPaths { get => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsIncludedPaths; set => ((Commvault.Powershell.Models.IPlanContentInternal)BackupContent).WindowsIncludedPaths = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="BackupDestinations" /> property.</summary>
        private Commvault.Powershell.Models.IPlanBackupDestination[] _backupDestinations;

        /// <summary>Backup destinations for the plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IPlanBackupDestination[] BackupDestinations { get => this._backupDestinations; set => this._backupDestinations = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IPlanSchedule[] BackupFrequencySchedules { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupFrequencySchedules; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupFrequencySchedules = value ?? null /* arrayOf */; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BasePlanId { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlanId; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlanId = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BasePlanName { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlanName; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlanName = value ?? null; }

        /// <summary>Internal Acessors for AdditionalProperties</summary>
        Commvault.Powershell.Models.IPlanAdditionalProperties Commvault.Powershell.Models.IServerPlanInternal.AdditionalProperties { get => (this._additionalProperties = this._additionalProperties ?? new Commvault.Powershell.Models.PlanAdditionalProperties()); set { {_additionalProperties = value;} } }

        /// <summary>Internal Acessors for AdditionalPropertyAddons</summary>
        Commvault.Powershell.Models.IPlanAddons Commvault.Powershell.Models.IServerPlanInternal.AdditionalPropertyAddons { get => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).Addons; set => ((Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal)AdditionalProperties).Addons = value; }

        /// <summary>Internal Acessors for BackupContent</summary>
        Commvault.Powershell.Models.IPlanContent Commvault.Powershell.Models.IServerPlanInternal.BackupContent { get => (this._backupContent = this._backupContent ?? new Commvault.Powershell.Models.PlanContent()); set { {_backupContent = value;} } }

        /// <summary>Internal Acessors for DatabaseOptions</summary>
        Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo Commvault.Powershell.Models.IServerPlanInternal.DatabaseOptions { get => (this._databaseOptions = this._databaseOptions ?? new Commvault.Powershell.Models.ServerPlanDatabaseOptionsInfo()); set { {_databaseOptions = value;} } }

        /// <summary>Internal Acessors for InheritSettingBackupContent</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions Commvault.Powershell.Models.IServerPlanInternal.InheritSettingBackupContent { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContent; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BackupContent = value; }

        /// <summary>Internal Acessors for InheritSettingBasePlan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IServerPlanInternal.InheritSettingBasePlan { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlan; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).BasePlan = value; }

        /// <summary>Internal Acessors for InheritSettingRpo</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions Commvault.Powershell.Models.IServerPlanInternal.InheritSettingRpo { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).Rpo; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).Rpo = value; }

        /// <summary>Internal Acessors for InheritSettingStoragePool</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions Commvault.Powershell.Models.IServerPlanInternal.InheritSettingStoragePool { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePool; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePool = value; }

        /// <summary>Internal Acessors for InheritSettings</summary>
        Commvault.Powershell.Models.IServerPlanInheritSettings Commvault.Powershell.Models.IServerPlanInternal.InheritSettings { get => (this._inheritSettings = this._inheritSettings ?? new Commvault.Powershell.Models.ServerPlanInheritSettings()); set { {_inheritSettings = value;} } }

        /// <summary>Internal Acessors for OverrideRestrictions</summary>
        Commvault.Powershell.Models.IPlanOverrideSettings Commvault.Powershell.Models.IServerPlanInternal.OverrideRestrictions { get => (this._overrideRestrictions = this._overrideRestrictions ?? new Commvault.Powershell.Models.PlanOverrideSettings()); set { {_overrideRestrictions = value;} } }

        /// <summary>Internal Acessors for Plan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IServerPlanInternal.Plan { get => (this._plan = this._plan ?? new Commvault.Powershell.Models.IdName()); set { {_plan = value;} } }

        /// <summary>Internal Acessors for Rpo</summary>
        Commvault.Powershell.Models.IServerPlanRpo Commvault.Powershell.Models.IServerPlanInternal.Rpo { get => (this._rpo = this._rpo ?? new Commvault.Powershell.Models.ServerPlanRpo()); set { {_rpo = value;} } }

        /// <summary>Internal Acessors for RpoBackupFrequency</summary>
        Commvault.Powershell.Models.IPlanSchedules Commvault.Powershell.Models.IServerPlanInternal.RpoBackupFrequency { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupFrequency; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupFrequency = value; }

        /// <summary>Internal Acessors for RpoSla</summary>
        Commvault.Powershell.Models.ISlaOptions Commvault.Powershell.Models.IServerPlanInternal.RpoSla { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).Sla; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).Sla = value; }

        /// <summary>Internal Acessors for SettingFileSearch</summary>
        Commvault.Powershell.Models.IPlanFileSearch Commvault.Powershell.Models.IServerPlanInternal.SettingFileSearch { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearch; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearch = value; }

        /// <summary>Internal Acessors for Settings</summary>
        Commvault.Powershell.Models.IServerPlanSettings Commvault.Powershell.Models.IServerPlanInternal.Settings { get => (this._settings = this._settings ?? new Commvault.Powershell.Models.ServerPlanSettings()); set { {_settings = value;} } }

        /// <summary>Internal Acessors for SnapshotOptions</summary>
        Commvault.Powershell.Models.IPlanSnapshotOptions Commvault.Powershell.Models.IServerPlanInternal.SnapshotOptions { get => (this._snapshotOptions = this._snapshotOptions ?? new Commvault.Powershell.Models.PlanSnapshotOptions()); set { {_snapshotOptions = value;} } }

        /// <summary>Commit frequency in hours</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? DatabaseOptionCommitFrequencyInHours { get => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).CommitFrequencyInHours; set => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).CommitFrequencyInHours = value ?? default(long); }

        /// <summary>Log backup RPO in minutes</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? DatabaseOptionLogBackupRpoMins { get => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).LogBackupRpoMins; set => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).LogBackupRpoMins = value ?? default(long); }

        /// <summary>Full backup frequency in days</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? DatabaseOptionRunFullBackupEvery { get => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).RunFullBackupEvery; set => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).RunFullBackupEvery = value ?? default(long); }

        /// <summary>Use disk cache for log backups</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? DatabaseOptionUseDiskCacheForLogBackups { get => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).UseDiskCacheForLogBackups; set => ((Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfoInternal)DatabaseOptions).UseDiskCacheForLogBackups = value ?? default(bool); }

        /// <summary>Backing field for <see cref="DatabaseOptions" /> property.</summary>
        private Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo _databaseOptions;

        /// <summary>This feature applies only to database agents</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo DatabaseOptions { get => (this._databaseOptions = this._databaseOptions ?? new Commvault.Powershell.Models.ServerPlanDatabaseOptionsInfo()); set => this._databaseOptions = value; }

        /// <summary>Flag for enabling indexing</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? FileSearchEnabled { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchEnabled; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchEnabled = value ?? default(bool); }

        /// <summary>Type of indexing status.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string FileSearchStatus { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchStatus; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchStatus = value ?? null; }

        /// <summary>
        /// Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string FileSearchStatusMessage { get => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchStatusMessage; set => ((Commvault.Powershell.Models.IServerPlanSettingsInternal)Settings).FileSearchStatusMessage = value ?? null; }

        /// <summary>Backing field for <see cref="InheritSettings" /> property.</summary>
        private Commvault.Powershell.Models.IServerPlanInheritSettings _inheritSettings;

        /// <summary>ServerPlanInheritSettings</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IServerPlanInheritSettings InheritSettings { get => (this._inheritSettings = this._inheritSettings ?? new Commvault.Powershell.Models.ServerPlanInheritSettings()); set => this._inheritSettings = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string OverrideRestrictionBackupContent { get => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).BackupContent; set => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).BackupContent = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string OverrideRestrictionRpo { get => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).Rpo; set => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).Rpo = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string OverrideRestrictionStoragePool { get => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).StoragePool; set => ((Commvault.Powershell.Models.IPlanOverrideSettingsInternal)OverrideRestrictions).StoragePool = value ?? null; }

        /// <summary>Backing field for <see cref="OverrideRestrictions" /> property.</summary>
        private Commvault.Powershell.Models.IPlanOverrideSettings _overrideRestrictions;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanOverrideSettings OverrideRestrictions { get => (this._overrideRestrictions = this._overrideRestrictions ?? new Commvault.Powershell.Models.PlanOverrideSettings()); set => this._overrideRestrictions = value; }

        /// <summary>Backing field for <see cref="Permissions" /> property.</summary>
        private Commvault.Powershell.Models.IIdName[] _permissions;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdName[] Permissions { get => this._permissions; set => this._permissions = value; }

        /// <summary>Backing field for <see cref="Plan" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _plan;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Plan { get => (this._plan = this._plan ?? new Commvault.Powershell.Models.IdName()); set => this._plan = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? PlanId { get => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string PlanName { get => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Name = value ?? null; }

        /// <summary>Backing field for <see cref="RegionsConfigured" /> property.</summary>
        private bool? _regionsConfigured;

        /// <summary>Specifies if the destinations are associated to regions</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? RegionsConfigured { get => this._regionsConfigured; set => this._regionsConfigured = value; }

        /// <summary>Backing field for <see cref="Rpo" /> property.</summary>
        private Commvault.Powershell.Models.IServerPlanRpo _rpo;

        /// <summary>
        /// Recovery Point Objective (RPO) is the maximum amount of time that data can be lost during a service disruption. Your RPO
        /// determines the frequency of your backup jobs.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IServerPlanRpo Rpo { get => (this._rpo = this._rpo ?? new Commvault.Powershell.Models.ServerPlanRpo()); set => this._rpo = value; }

        /// <summary>Backup window for incremental backup</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IDayAndTime[] RpoBackupWindow { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupWindow; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).BackupWindow = value ?? null /* arrayOf */; }

        /// <summary>Backup window for full backup</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IDayAndTime[] RpoFullBackupWindow { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).FullBackupWindow; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).FullBackupWindow = value ?? null /* arrayOf */; }

        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? RpoOverridden { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).RpoOverridden; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).RpoOverridden = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string RpoOverrideBase { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).RpoOverrideBase; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).RpoOverrideBase = value ?? null; }

        /// <summary>Backing field for <see cref="Settings" /> property.</summary>
        private Commvault.Powershell.Models.IServerPlanSettings _settings;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IServerPlanSettings Settings { get => (this._settings = this._settings ?? new Commvault.Powershell.Models.ServerPlanSettings()); set => this._settings = value; }

        /// <summary>Time provided in Unix format. Give 0 to reset any existing delay.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SlaEnableAfterDelay { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaEnableAfterDelay; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaEnableAfterDelay = value ?? default(long); }

        /// <summary>Flag to set to exclude plan from SLA</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SlaExcludeFromSla { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaExcludeFromSla; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaExcludeFromSla = value ?? default(bool); }

        /// <summary>Reason for exclusion from SLA</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SlaExclusionReason { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaExclusionReason; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaExclusionReason = value ?? null; }

        /// <summary>Tells us from where SLA Period was inherited</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SlaInheritedFrom { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaInheritedFrom; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaInheritedFrom = value ?? null; }

        /// <summary>Inherited SLA Period in Days</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SlaInheritedSlaPeriod { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaInheritedSlaPeriod; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaInheritedSlaPeriod = value ?? default(long); }

        /// <summary>SLA Period in Days</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SlaPeriod { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaPeriod; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaPeriod = value ?? default(long); }

        /// <summary>Flag to set to use System Default Service Level Agreement</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SlaUseSystemDefaultSla { get => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaUseSystemDefaultSla; set => ((Commvault.Powershell.Models.IServerPlanRpoInternal)Rpo).SlaUseSystemDefaultSla = value ?? default(bool); }

        /// <summary>Backup copy RPO in minutes</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SnapshotOptionBackupCopyRpoMins { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyRpoMins; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyRpoMins = value ?? default(long); }

        /// <summary>Flag to enable backup copy</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SnapshotOptionEnableBackupCopy { get => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).EnableBackupCopy; set => ((Commvault.Powershell.Models.IPlanSnapshotOptionsInternal)SnapshotOptions).EnableBackupCopy = value ?? default(bool); }

        /// <summary>Backing field for <see cref="SnapshotOptions" /> property.</summary>
        private Commvault.Powershell.Models.IPlanSnapshotOptions _snapshotOptions;

        /// <summary>This feature applies only to File System Agents</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanSnapshotOptions SnapshotOptions { get => (this._snapshotOptions = this._snapshotOptions ?? new Commvault.Powershell.Models.PlanSnapshotOptions()); set => this._snapshotOptions = value; }

        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? StoragePoolOverridden { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePoolOverridden; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePoolOverridden = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string StoragePoolOverrideBase { get => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePoolOverrideBase; set => ((Commvault.Powershell.Models.IServerPlanInheritSettingsInternal)InheritSettings).StoragePoolOverrideBase = value ?? null; }

        /// <summary>Creates an new <see cref="ServerPlan" /> instance.</summary>
        public ServerPlan()
        {

        }
    }
    public partial interface IServerPlan :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Database options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Database options should be shown with this plan",
        SerializedName = @"database",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonDatabase { get; set; }
        /// <summary>File system options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"File system options should be shown with this plan",
        SerializedName = @"fileSystem",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonFileSystem { get; set; }
        /// <summary>Index copy options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Index copy options should be shown with this plan",
        SerializedName = @"indexCopy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonIndexCopy { get; set; }
        /// <summary>Snap options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Snap options should be shown with this plan",
        SerializedName = @"snap",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonSnap { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"snapStatus",
        PossibleTypes = new [] { typeof(string) })]
        string AddonSnapStatus { get; set; }
        /// <summary>Is deriving and overriding the plan allowed</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Is deriving and overriding the plan allowed",
        SerializedName = @"allowPlanOverride",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowPlanOverride { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"associatedEntities",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdNameCount) })]
        Commvault.Powershell.Models.IIdNameCount[] AssociatedEntities { get; set; }
        /// <summary>Do you want to back up the system state? Applicable only for Windows</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Do you want to back up the system state? Applicable only for Windows",
        SerializedName = @"backupSystemState",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupContentBackupSystemState { get; set; }
        /// <summary>
        /// Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true",
        SerializedName = @"backupSystemStateOnlyWithFullBackup",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupContentBackupSystemStateOnlyWithFullBackup { get; set; }
        /// <summary>Paths to exclude for Mac</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to exclude for Mac",
        SerializedName = @"macExcludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] BackupContentMacExcludedPaths { get; set; }
        /// <summary>Paths to include for Mac</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to include for Mac",
        SerializedName = @"macIncludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] BackupContentMacIncludedPaths { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag telling if this setting is currently being overriden",
        SerializedName = @"overridden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupContentOverridden { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"overrideBase",
        PossibleTypes = new [] { typeof(string) })]
        string BackupContentOverrideBase { get; set; }
        /// <summary>Paths to exclude for UNIX</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to exclude for UNIX",
        SerializedName = @"unixExcludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] BackupContentUnixExcludedPaths { get; set; }
        /// <summary>Paths to include for UNIX</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to include for UNIX",
        SerializedName = @"unixIncludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] BackupContentUnixIncludedPaths { get; set; }
        /// <summary>
        /// Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true",
        SerializedName = @"useVSSForSystemState",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupContentUseVssForSystemState { get; set; }
        /// <summary>Paths to exclude for Windows</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to exclude for Windows",
        SerializedName = @"windowsExcludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] BackupContentWindowsExcludedPaths { get; set; }
        /// <summary>Paths to include for Windows</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Paths to include for Windows",
        SerializedName = @"windowsIncludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        string[] BackupContentWindowsIncludedPaths { get; set; }
        /// <summary>Backup destinations for the plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup destinations for the plan",
        SerializedName = @"backupDestinations",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IPlanBackupDestination) })]
        Commvault.Powershell.Models.IPlanBackupDestination[] BackupDestinations { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"schedules",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IPlanSchedule) })]
        Commvault.Powershell.Models.IPlanSchedule[] BackupFrequencySchedules { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? BasePlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string BasePlanName { get; set; }
        /// <summary>Commit frequency in hours</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Commit frequency in hours",
        SerializedName = @"commitFrequencyInHours",
        PossibleTypes = new [] { typeof(long) })]
        long? DatabaseOptionCommitFrequencyInHours { get; set; }
        /// <summary>Log backup RPO in minutes</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Log backup RPO in minutes",
        SerializedName = @"logBackupRPOMins",
        PossibleTypes = new [] { typeof(long) })]
        long? DatabaseOptionLogBackupRpoMins { get; set; }
        /// <summary>Full backup frequency in days</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Full backup frequency in days",
        SerializedName = @"runFullBackupEvery",
        PossibleTypes = new [] { typeof(long) })]
        long? DatabaseOptionRunFullBackupEvery { get; set; }
        /// <summary>Use disk cache for log backups</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Use disk cache for log backups",
        SerializedName = @"useDiskCacheForLogBackups",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DatabaseOptionUseDiskCacheForLogBackups { get; set; }
        /// <summary>Flag for enabling indexing</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for enabling indexing",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FileSearchEnabled { get; set; }
        /// <summary>Type of indexing status.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of indexing status.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string FileSearchStatus { get; set; }
        /// <summary>
        /// Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress",
        SerializedName = @"statusMessage",
        PossibleTypes = new [] { typeof(string) })]
        string FileSearchStatusMessage { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"backupContent",
        PossibleTypes = new [] { typeof(string) })]
        string OverrideRestrictionBackupContent { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"RPO",
        PossibleTypes = new [] { typeof(string) })]
        string OverrideRestrictionRpo { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"storagePool",
        PossibleTypes = new [] { typeof(string) })]
        string OverrideRestrictionStoragePool { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"permissions",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] Permissions { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? PlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string PlanName { get; set; }
        /// <summary>Specifies if the destinations are associated to regions</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if the destinations are associated to regions",
        SerializedName = @"regionsConfigured",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RegionsConfigured { get; set; }
        /// <summary>Backup window for incremental backup</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup window for incremental backup",
        SerializedName = @"backupWindow",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IDayAndTime) })]
        Commvault.Powershell.Models.IDayAndTime[] RpoBackupWindow { get; set; }
        /// <summary>Backup window for full backup</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup window for full backup",
        SerializedName = @"fullBackupWindow",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IDayAndTime) })]
        Commvault.Powershell.Models.IDayAndTime[] RpoFullBackupWindow { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag telling if this setting is currently being overriden",
        SerializedName = @"overridden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RpoOverridden { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"overrideBase",
        PossibleTypes = new [] { typeof(string) })]
        string RpoOverrideBase { get; set; }
        /// <summary>Time provided in Unix format. Give 0 to reset any existing delay.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time provided in Unix format. Give 0 to reset any existing delay.",
        SerializedName = @"enableAfterDelay",
        PossibleTypes = new [] { typeof(long) })]
        long? SlaEnableAfterDelay { get; set; }
        /// <summary>Flag to set to exclude plan from SLA</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to set to exclude plan from SLA",
        SerializedName = @"excludeFromSLA",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SlaExcludeFromSla { get; set; }
        /// <summary>Reason for exclusion from SLA</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Reason for exclusion from SLA",
        SerializedName = @"exclusionReason",
        PossibleTypes = new [] { typeof(string) })]
        string SlaExclusionReason { get; set; }
        /// <summary>Tells us from where SLA Period was inherited</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tells us from where SLA Period was inherited",
        SerializedName = @"inheritedFrom",
        PossibleTypes = new [] { typeof(string) })]
        string SlaInheritedFrom { get; set; }
        /// <summary>Inherited SLA Period in Days</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Inherited SLA Period in Days",
        SerializedName = @"inheritedSLAPeriod",
        PossibleTypes = new [] { typeof(long) })]
        long? SlaInheritedSlaPeriod { get; set; }
        /// <summary>SLA Period in Days</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SLA Period in Days",
        SerializedName = @"SLAPeriod",
        PossibleTypes = new [] { typeof(long) })]
        long? SlaPeriod { get; set; }
        /// <summary>Flag to set to use System Default Service Level Agreement</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to set to use System Default Service Level Agreement",
        SerializedName = @"useSystemDefaultSLA",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SlaUseSystemDefaultSla { get; set; }
        /// <summary>Backup copy RPO in minutes</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup copy RPO in minutes",
        SerializedName = @"backupCopyRPOMins",
        PossibleTypes = new [] { typeof(long) })]
        long? SnapshotOptionBackupCopyRpoMins { get; set; }
        /// <summary>Flag to enable backup copy</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to enable backup copy",
        SerializedName = @"enableBackupCopy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SnapshotOptionEnableBackupCopy { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag telling if this setting is currently being overriden",
        SerializedName = @"overridden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? StoragePoolOverridden { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"overrideBase",
        PossibleTypes = new [] { typeof(string) })]
        string StoragePoolOverrideBase { get; set; }

    }
    internal partial interface IServerPlanInternal

    {
        Commvault.Powershell.Models.IPlanAdditionalProperties AdditionalProperties { get; set; }

        Commvault.Powershell.Models.IPlanAddons AdditionalPropertyAddons { get; set; }
        /// <summary>Database options should be shown with this plan</summary>
        bool? AddonDatabase { get; set; }
        /// <summary>File system options should be shown with this plan</summary>
        bool? AddonFileSystem { get; set; }
        /// <summary>Index copy options should be shown with this plan</summary>
        bool? AddonIndexCopy { get; set; }
        /// <summary>Snap options should be shown with this plan</summary>
        bool? AddonSnap { get; set; }

        string AddonSnapStatus { get; set; }
        /// <summary>Is deriving and overriding the plan allowed</summary>
        bool? AllowPlanOverride { get; set; }

        Commvault.Powershell.Models.IIdNameCount[] AssociatedEntities { get; set; }
        /// <summary>This feature applies only to file system agents</summary>
        Commvault.Powershell.Models.IPlanContent BackupContent { get; set; }
        /// <summary>Do you want to back up the system state? Applicable only for Windows</summary>
        bool? BackupContentBackupSystemState { get; set; }
        /// <summary>
        /// Do you want to back up system state only with full backup? Applicable only if the value of backupSystemState is true
        /// </summary>
        bool? BackupContentBackupSystemStateOnlyWithFullBackup { get; set; }
        /// <summary>Paths to exclude for Mac</summary>
        string[] BackupContentMacExcludedPaths { get; set; }
        /// <summary>Paths to include for Mac</summary>
        string[] BackupContentMacIncludedPaths { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        bool? BackupContentOverridden { get; set; }

        string BackupContentOverrideBase { get; set; }
        /// <summary>Paths to exclude for UNIX</summary>
        string[] BackupContentUnixExcludedPaths { get; set; }
        /// <summary>Paths to include for UNIX</summary>
        string[] BackupContentUnixIncludedPaths { get; set; }
        /// <summary>
        /// Do you want to back up system state with VSS? Applicable only if the value of backupSystemState is true
        /// </summary>
        bool? BackupContentUseVssForSystemState { get; set; }
        /// <summary>Paths to exclude for Windows</summary>
        string[] BackupContentWindowsExcludedPaths { get; set; }
        /// <summary>Paths to include for Windows</summary>
        string[] BackupContentWindowsIncludedPaths { get; set; }
        /// <summary>Backup destinations for the plan</summary>
        Commvault.Powershell.Models.IPlanBackupDestination[] BackupDestinations { get; set; }

        Commvault.Powershell.Models.IPlanSchedule[] BackupFrequencySchedules { get; set; }

        long? BasePlanId { get; set; }

        string BasePlanName { get; set; }
        /// <summary>Commit frequency in hours</summary>
        long? DatabaseOptionCommitFrequencyInHours { get; set; }
        /// <summary>Log backup RPO in minutes</summary>
        long? DatabaseOptionLogBackupRpoMins { get; set; }
        /// <summary>Full backup frequency in days</summary>
        long? DatabaseOptionRunFullBackupEvery { get; set; }
        /// <summary>Use disk cache for log backups</summary>
        bool? DatabaseOptionUseDiskCacheForLogBackups { get; set; }
        /// <summary>This feature applies only to database agents</summary>
        Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo DatabaseOptions { get; set; }
        /// <summary>Flag for enabling indexing</summary>
        bool? FileSearchEnabled { get; set; }
        /// <summary>Type of indexing status.</summary>
        string FileSearchStatus { get; set; }
        /// <summary>
        /// Tells what is happening behind the scene, so that user can knows why indexing is not enabled or if its in progress
        /// </summary>
        string FileSearchStatusMessage { get; set; }
        /// <summary>PlanOverridenOptions</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions InheritSettingBackupContent { get; set; }

        Commvault.Powershell.Models.IIdName InheritSettingBasePlan { get; set; }
        /// <summary>PlanOverridenOptions</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions InheritSettingRpo { get; set; }
        /// <summary>PlanOverridenOptions</summary>
        Commvault.Powershell.Models.IPlanOverridenOptions InheritSettingStoragePool { get; set; }
        /// <summary>ServerPlanInheritSettings</summary>
        Commvault.Powershell.Models.IServerPlanInheritSettings InheritSettings { get; set; }

        string OverrideRestrictionBackupContent { get; set; }

        string OverrideRestrictionRpo { get; set; }

        string OverrideRestrictionStoragePool { get; set; }

        Commvault.Powershell.Models.IPlanOverrideSettings OverrideRestrictions { get; set; }

        Commvault.Powershell.Models.IIdName[] Permissions { get; set; }

        Commvault.Powershell.Models.IIdName Plan { get; set; }

        long? PlanId { get; set; }

        string PlanName { get; set; }
        /// <summary>Specifies if the destinations are associated to regions</summary>
        bool? RegionsConfigured { get; set; }
        /// <summary>
        /// Recovery Point Objective (RPO) is the maximum amount of time that data can be lost during a service disruption. Your RPO
        /// determines the frequency of your backup jobs.
        /// </summary>
        Commvault.Powershell.Models.IServerPlanRpo Rpo { get; set; }
        /// <summary>PlanSchedules</summary>
        Commvault.Powershell.Models.IPlanSchedules RpoBackupFrequency { get; set; }
        /// <summary>Backup window for incremental backup</summary>
        Commvault.Powershell.Models.IDayAndTime[] RpoBackupWindow { get; set; }
        /// <summary>Backup window for full backup</summary>
        Commvault.Powershell.Models.IDayAndTime[] RpoFullBackupWindow { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        bool? RpoOverridden { get; set; }

        string RpoOverrideBase { get; set; }
        /// <summary>
        /// A server meets SLA (Service Level Agreement) when all of its subclients have at least one successful backup during the
        /// number of days specified at the CommCell, Server Group or plan level.
        /// </summary>
        Commvault.Powershell.Models.ISlaOptions RpoSla { get; set; }
        /// <summary>
        /// This feature applies to file servers and virtualization. Enabling this feature allows you to search for backed-up files
        /// using the global search bar, and creates resource pools with required infrastructure entities.
        /// </summary>
        Commvault.Powershell.Models.IPlanFileSearch SettingFileSearch { get; set; }

        Commvault.Powershell.Models.IServerPlanSettings Settings { get; set; }
        /// <summary>Time provided in Unix format. Give 0 to reset any existing delay.</summary>
        long? SlaEnableAfterDelay { get; set; }
        /// <summary>Flag to set to exclude plan from SLA</summary>
        bool? SlaExcludeFromSla { get; set; }
        /// <summary>Reason for exclusion from SLA</summary>
        string SlaExclusionReason { get; set; }
        /// <summary>Tells us from where SLA Period was inherited</summary>
        string SlaInheritedFrom { get; set; }
        /// <summary>Inherited SLA Period in Days</summary>
        long? SlaInheritedSlaPeriod { get; set; }
        /// <summary>SLA Period in Days</summary>
        long? SlaPeriod { get; set; }
        /// <summary>Flag to set to use System Default Service Level Agreement</summary>
        bool? SlaUseSystemDefaultSla { get; set; }
        /// <summary>Backup copy RPO in minutes</summary>
        long? SnapshotOptionBackupCopyRpoMins { get; set; }
        /// <summary>Flag to enable backup copy</summary>
        bool? SnapshotOptionEnableBackupCopy { get; set; }
        /// <summary>This feature applies only to File System Agents</summary>
        Commvault.Powershell.Models.IPlanSnapshotOptions SnapshotOptions { get; set; }
        /// <summary>Flag telling if this setting is currently being overriden</summary>
        bool? StoragePoolOverridden { get; set; }

        string StoragePoolOverrideBase { get; set; }

    }
}