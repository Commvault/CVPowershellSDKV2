// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Recovery target info</summary>
    public partial class RecoveryTargetDetails
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Commvault.Powershell.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json erialization has finished, allowing customization of the <see cref="Commvault.Powershell.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Commvault.Powershell.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Commvault.Powershell.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Commvault.Powershell.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Commvault.Powershell.Runtime.Json.JsonNode"/> into an instance of Commvault.Powershell.Models.IRecoveryTargetDetails.
        /// </summary>
        /// <param name="node">a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of Commvault.Powershell.Models.IRecoveryTargetDetails.</returns>
        public static Commvault.Powershell.Models.IRecoveryTargetDetails FromJson(Commvault.Powershell.Runtime.Json.JsonNode node)
        {
            return node is Commvault.Powershell.Runtime.Json.JsonObject json ? new RecoveryTargetDetails(json) : null;
        }

        /// <summary>
        /// Deserializes a Commvault.Powershell.Runtime.Json.JsonObject into a new instance of <see cref="RecoveryTargetDetails" />.
        /// </summary>
        /// <param name="json">A Commvault.Powershell.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal RecoveryTargetDetails(Commvault.Powershell.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_destinationHypervisor = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonObject>("destinationHypervisor"), out var __jsonDestinationHypervisor) ? Commvault.Powershell.Models.IdName.FromJson(__jsonDestinationHypervisor) : DestinationHypervisor;}
            {_accessNode = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonObject>("accessNode"), out var __jsonAccessNode) ? Commvault.Powershell.Models.IdName.FromJson(__jsonAccessNode) : AccessNode;}
            {_vMDisplayName = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonObject>("vmDisplayName"), out var __jsonVMDisplayName) ? Commvault.Powershell.Models.VMDisplayName.FromJson(__jsonVMDisplayName) : VMDisplayName;}
            {_id = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonNumber>("id"), out var __jsonId) ? (long?)__jsonId : Id;}
            {_name = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("name"), out var __jsonName) ? (string)__jsonName : (string)Name;}
            {_applicationType = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("applicationType"), out var __jsonApplicationType) ? (string)__jsonApplicationType : (string)ApplicationType;}
            {_users = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("users"), out var __jsonUsers) ? If( __jsonUsers as Commvault.Powershell.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Commvault.Powershell.Models.IIdNameGuid[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Commvault.Powershell.Models.IIdNameGuid) (Commvault.Powershell.Models.IdNameGuid.FromJson(__u) )) ))() : null : Users;}
            {_destinationHost = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("destinationHost"), out var __jsonDestinationHost) ? If( __jsonDestinationHost as Commvault.Powershell.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<Commvault.Powershell.Models.IIdName[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(Commvault.Powershell.Models.IIdName) (Commvault.Powershell.Models.IdName.FromJson(__p) )) ))() : null : DestinationHost;}
            {_dataStore = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("dataStore"), out var __jsonDataStore) ? If( __jsonDataStore as Commvault.Powershell.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is Commvault.Powershell.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : DataStore;}
            {_region = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("region"), out var __jsonRegion) ? (string)__jsonRegion : (string)Region;}
            {_resourcePoolPath = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("resourcePoolPath"), out var __jsonResourcePoolPath) ? (string)__jsonResourcePoolPath : (string)ResourcePoolPath;}
            {_destinationNetwork = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("destinationNetwork"), out var __jsonDestinationNetwork) ? If( __jsonDestinationNetwork as Commvault.Powershell.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(string) (__f is Commvault.Powershell.Runtime.Json.JsonString __e ? (string)(__e.ToString()) : null)) ))() : null : DestinationNetwork;}
            {_availabilityZones = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("availabilityZones"), out var __jsonAvailabilityZones) ? If( __jsonAvailabilityZones as Commvault.Powershell.Runtime.Json.JsonArray, out var __b) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__b, (__a)=>(string) (__a is Commvault.Powershell.Runtime.Json.JsonString ___z ? (string)(___z.ToString()) : null)) ))() : null : AvailabilityZones;}
            {_vMInstanceTypes = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("vmInstanceTypes"), out var __jsonVMInstanceTypes) ? If( __jsonVMInstanceTypes as Commvault.Powershell.Runtime.Json.JsonArray, out var ___w) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___w, (___v)=>(string) (___v is Commvault.Powershell.Runtime.Json.JsonString ___u ? (string)(___u.ToString()) : null)) ))() : null : VMInstanceTypes;}
            {_encryptionKey = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("encryptionKey"), out var __jsonEncryptionKey) ? (string)__jsonEncryptionKey : (string)EncryptionKey;}
            {_volumeType = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("volumeType"), out var __jsonVolumeType) ? (string)__jsonVolumeType : (string)VolumeType;}
            {_maximumCpuCores = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonNumber>("maximumCPUCores"), out var __jsonMaximumCpuCores) ? (long?)__jsonMaximumCpuCores : MaximumCpuCores;}
            {_publicIP = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonBoolean>("publicIP"), out var __jsonPublicIP) ? (bool?)__jsonPublicIP : PublicIP;}
            {_restoreAsManagedVM = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonBoolean>("restoreAsManagedVM"), out var __jsonRestoreAsManagedVM) ? (bool?)__jsonRestoreAsManagedVM : RestoreAsManagedVM;}
            {_numberOfVMS = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonNumber>("numberOfVMs"), out var __jsonNumberOfVMS) ? (long?)__jsonNumberOfVMS : NumberOfVMS;}
            {_expirationTime = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonNumber>("expirationTime"), out var __jsonExpirationTime) ? (long?)__jsonExpirationTime : ExpirationTime;}
            {_maximumMemory = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("maximumMemory"), out var __jsonMaximumMemory) ? (string)__jsonMaximumMemory : (string)MaximumMemory;}
            {_isoPath = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("isoPath"), out var __jsonIsoPath) ? If( __jsonIsoPath as Commvault.Powershell.Runtime.Json.JsonArray, out var ___r) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___r, (___q)=>(string) (___q is Commvault.Powershell.Runtime.Json.JsonString ___p ? (string)(___p.ToString()) : null)) ))() : null : IsoPath;}
            {_configureIsolatedNetwork = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonBoolean>("configureIsolatedNetwork"), out var __jsonConfigureIsolatedNetwork) ? (bool?)__jsonConfigureIsolatedNetwork : ConfigureIsolatedNetwork;}
            {_migrateVM = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonBoolean>("migrateVM"), out var __jsonMigrateVM) ? (bool?)__jsonMigrateVM : MigrateVM;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="RecoveryTargetDetails" /> into a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Commvault.Powershell.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Commvault.Powershell.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="RecoveryTargetDetails" /> as a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" />.
        /// </returns>
        public Commvault.Powershell.Runtime.Json.JsonNode ToJson(Commvault.Powershell.Runtime.Json.JsonObject container, Commvault.Powershell.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Commvault.Powershell.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._destinationHypervisor ? (Commvault.Powershell.Runtime.Json.JsonNode) this._destinationHypervisor.ToJson(null,serializationMode) : null, "destinationHypervisor" ,container.Add );
            AddIf( null != this._accessNode ? (Commvault.Powershell.Runtime.Json.JsonNode) this._accessNode.ToJson(null,serializationMode) : null, "accessNode" ,container.Add );
            AddIf( null != this._vMDisplayName ? (Commvault.Powershell.Runtime.Json.JsonNode) this._vMDisplayName.ToJson(null,serializationMode) : null, "vmDisplayName" ,container.Add );
            AddIf( null != this._id ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonNumber((long)this._id) : null, "id" ,container.Add );
            AddIf( null != (((object)this._name)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._name.ToString()) : null, "name" ,container.Add );
            AddIf( null != (((object)this._applicationType)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._applicationType.ToString()) : null, "applicationType" ,container.Add );
            if (null != this._users)
            {
                var __w = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __x in this._users )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("users",__w);
            }
            if (null != this._destinationHost)
            {
                var __r = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __s in this._destinationHost )
                {
                    AddIf(__s?.ToJson(null, serializationMode) ,__r.Add);
                }
                container.Add("destinationHost",__r);
            }
            if (null != this._dataStore)
            {
                var __m = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __n in this._dataStore )
                {
                    AddIf(null != (((object)__n)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                }
                container.Add("dataStore",__m);
            }
            AddIf( null != (((object)this._region)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._region.ToString()) : null, "region" ,container.Add );
            AddIf( null != (((object)this._resourcePoolPath)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._resourcePoolPath.ToString()) : null, "resourcePoolPath" ,container.Add );
            if (null != this._destinationNetwork)
            {
                var __h = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __i in this._destinationNetwork )
                {
                    AddIf(null != (((object)__i)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(__i.ToString()) : null ,__h.Add);
                }
                container.Add("destinationNetwork",__h);
            }
            if (null != this._availabilityZones)
            {
                var __c = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __d in this._availabilityZones )
                {
                    AddIf(null != (((object)__d)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(__d.ToString()) : null ,__c.Add);
                }
                container.Add("availabilityZones",__c);
            }
            if (null != this._vMInstanceTypes)
            {
                var ___x = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var ___y in this._vMInstanceTypes )
                {
                    AddIf(null != (((object)___y)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(___y.ToString()) : null ,___x.Add);
                }
                container.Add("vmInstanceTypes",___x);
            }
            AddIf( null != (((object)this._encryptionKey)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._encryptionKey.ToString()) : null, "encryptionKey" ,container.Add );
            AddIf( null != (((object)this._volumeType)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._volumeType.ToString()) : null, "volumeType" ,container.Add );
            AddIf( null != this._maximumCpuCores ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonNumber((long)this._maximumCpuCores) : null, "maximumCPUCores" ,container.Add );
            AddIf( null != this._publicIP ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonBoolean((bool)this._publicIP) : null, "publicIP" ,container.Add );
            AddIf( null != this._restoreAsManagedVM ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonBoolean((bool)this._restoreAsManagedVM) : null, "restoreAsManagedVM" ,container.Add );
            AddIf( null != this._numberOfVMS ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonNumber((long)this._numberOfVMS) : null, "numberOfVMs" ,container.Add );
            AddIf( null != this._expirationTime ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonNumber((long)this._expirationTime) : null, "expirationTime" ,container.Add );
            AddIf( null != (((object)this._maximumMemory)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._maximumMemory.ToString()) : null, "maximumMemory" ,container.Add );
            if (null != this._isoPath)
            {
                var ___s = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var ___t in this._isoPath )
                {
                    AddIf(null != (((object)___t)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(___t.ToString()) : null ,___s.Add);
                }
                container.Add("isoPath",___s);
            }
            AddIf( null != this._configureIsolatedNetwork ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonBoolean((bool)this._configureIsolatedNetwork) : null, "configureIsolatedNetwork" ,container.Add );
            AddIf( null != this._migrateVM ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonBoolean((bool)this._migrateVM) : null, "migrateVM" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}