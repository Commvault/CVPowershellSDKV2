// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>BucketResp</summary>
    public partial class BucketsResp :
        Commvault.Powershell.Models.IBucketsResp,
        Commvault.Powershell.Models.IBucketsRespInternal
    {

        /// <summary>Backing field for <see cref="CloudAccessPaths" /> property.</summary>
        private System.Collections.Generic.List<Commvault.Powershell.Models.ICloudAccessPathsResp> _cloudAccessPaths;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.ICloudAccessPathsResp> CloudAccessPaths { get => this._cloudAccessPaths; set => this._cloudAccessPaths = value; }

        /// <summary>Internal Acessors for Configuration</summary>
        Commvault.Powershell.Models.ICloudBucketConfiguration Commvault.Powershell.Models.IBucketsRespInternal.Configuration { get => (this._configuration = this._configuration ?? new Commvault.Powershell.Models.CloudBucketConfiguration()); set { {_configuration = value;} } }

        /// <summary>Internal Acessors for ConfigurationStorageAcceleratorCredentials</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IBucketsRespInternal.ConfigurationStorageAcceleratorCredentials { get => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).StorageAcceleratorCredentials; set => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).StorageAcceleratorCredentials = value; }

        /// <summary>Backing field for <see cref="Configuration" /> property.</summary>
        private Commvault.Powershell.Models.ICloudBucketConfiguration _configuration;

        /// <summary>CloudBucketConfiguration</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ICloudBucketConfiguration Configuration { get => (this._configuration = this._configuration ?? new Commvault.Powershell.Models.CloudBucketConfiguration()); set => this._configuration = value; }

        /// <summary>
        /// When true, prevents new data writes to backup location by changing number of writers to zero
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ConfigurationDisableBackupLocationForFutureBackups { get => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).DisableBackupLocationForFutureBackups; set => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).DisableBackupLocationForFutureBackups = value ?? default(bool); }

        /// <summary>When true, means mount path is enabled</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ConfigurationEnable { get => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).Enable; set => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).Enable = value ?? default(bool); }

        /// <summary>
        /// When true, the deduplicated blocks in the mount path will not be referenced when there are multiple mount paths in the
        /// library.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ConfigurationPrepareForRetirement { get => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).PrepareForRetirement; set => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).PrepareForRetirement = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private long? _id;

        /// <summary>Id of the bucket</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>MediaAgent display name along with name of the bucket</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? StorageAcceleratorCredentialsId { get => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).StorageAcceleratorCredentialsId; set => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).StorageAcceleratorCredentialsId = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string StorageAcceleratorCredentialsName { get => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).StorageAcceleratorCredentialsName; set => ((Commvault.Powershell.Models.ICloudBucketConfigurationInternal)Configuration).StorageAcceleratorCredentialsName = value ?? null; }

        /// <summary>Creates an new <see cref="BucketsResp" /> instance.</summary>
        public BucketsResp()
        {

        }
    }
    /// BucketResp
    public partial interface IBucketsResp :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"cloudAccessPaths",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.ICloudAccessPathsResp) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.ICloudAccessPathsResp> CloudAccessPaths { get; set; }
        /// <summary>
        /// When true, prevents new data writes to backup location by changing number of writers to zero
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"When true, prevents new data writes to backup location by changing number of writers to zero",
        SerializedName = @"disableBackupLocationForFutureBackups",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ConfigurationDisableBackupLocationForFutureBackups { get; set; }
        /// <summary>When true, means mount path is enabled</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"When true, means mount path is enabled",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ConfigurationEnable { get; set; }
        /// <summary>
        /// When true, the deduplicated blocks in the mount path will not be referenced when there are multiple mount paths in the
        /// library.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"When true, the deduplicated blocks in the mount path will not be referenced when there are multiple mount paths in the library.",
        SerializedName = @"prepareForRetirement",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ConfigurationPrepareForRetirement { get; set; }
        /// <summary>Id of the bucket</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Id of the bucket",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? Id { get; set; }
        /// <summary>MediaAgent display name along with name of the bucket</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"MediaAgent display name along with name of the bucket",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? StorageAcceleratorCredentialsId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAcceleratorCredentialsName { get; set; }

    }
    /// BucketResp
    internal partial interface IBucketsRespInternal

    {
        System.Collections.Generic.List<Commvault.Powershell.Models.ICloudAccessPathsResp> CloudAccessPaths { get; set; }
        /// <summary>CloudBucketConfiguration</summary>
        Commvault.Powershell.Models.ICloudBucketConfiguration Configuration { get; set; }
        /// <summary>
        /// When true, prevents new data writes to backup location by changing number of writers to zero
        /// </summary>
        bool? ConfigurationDisableBackupLocationForFutureBackups { get; set; }
        /// <summary>When true, means mount path is enabled</summary>
        bool? ConfigurationEnable { get; set; }
        /// <summary>
        /// When true, the deduplicated blocks in the mount path will not be referenced when there are multiple mount paths in the
        /// library.
        /// </summary>
        bool? ConfigurationPrepareForRetirement { get; set; }

        Commvault.Powershell.Models.IIdName ConfigurationStorageAcceleratorCredentials { get; set; }
        /// <summary>Id of the bucket</summary>
        long? Id { get; set; }
        /// <summary>MediaAgent display name along with name of the bucket</summary>
        string Name { get; set; }

        long? StorageAcceleratorCredentialsId { get; set; }

        string StorageAcceleratorCredentialsName { get; set; }

    }
}