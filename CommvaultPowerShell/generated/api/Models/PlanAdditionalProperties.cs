// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class PlanAdditionalProperties :
        Commvault.Powershell.Models.IPlanAdditionalProperties,
        Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal
    {

        /// <summary>Database options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonDatabase { get => ((Commvault.Powershell.Models.IPlanAddonsInternal)Addons).Database; set => ((Commvault.Powershell.Models.IPlanAddonsInternal)Addons).Database = value ?? default(bool); }

        /// <summary>File system options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonFileSystem { get => ((Commvault.Powershell.Models.IPlanAddonsInternal)Addons).FileSystem; set => ((Commvault.Powershell.Models.IPlanAddonsInternal)Addons).FileSystem = value ?? default(bool); }

        /// <summary>Index copy options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonIndexCopy { get => ((Commvault.Powershell.Models.IPlanAddonsInternal)Addons).IndexCopy; set => ((Commvault.Powershell.Models.IPlanAddonsInternal)Addons).IndexCopy = value ?? default(bool); }

        /// <summary>Snap options should be shown with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? AddonSnap { get => ((Commvault.Powershell.Models.IPlanAddonsInternal)Addons).Snap; set => ((Commvault.Powershell.Models.IPlanAddonsInternal)Addons).Snap = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string AddonSnapStatus { get => ((Commvault.Powershell.Models.IPlanAddonsInternal)Addons).SnapStatus; set => ((Commvault.Powershell.Models.IPlanAddonsInternal)Addons).SnapStatus = value ?? null; }

        /// <summary>Backing field for <see cref="Addons" /> property.</summary>
        private Commvault.Powershell.Models.IPlanAddons _addons;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IPlanAddons Addons { get => (this._addons = this._addons ?? new Commvault.Powershell.Models.PlanAddons()); set => this._addons = value; }

        /// <summary>Internal Acessors for Addons</summary>
        Commvault.Powershell.Models.IPlanAddons Commvault.Powershell.Models.IPlanAdditionalPropertiesInternal.Addons { get => (this._addons = this._addons ?? new Commvault.Powershell.Models.PlanAddons()); set { {_addons = value;} } }

        /// <summary>Backing field for <see cref="Rpo" /> property.</summary>
        private long? _rpo;

        /// <summary>The least RPO in minutes for the plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? Rpo { get => this._rpo; set => this._rpo = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>status if plan backups are enabled or disabled</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Creates an new <see cref="PlanAdditionalProperties" /> instance.</summary>
        public PlanAdditionalProperties()
        {

        }
    }
    public partial interface IPlanAdditionalProperties :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Database options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Database options should be shown with this plan",
        SerializedName = @"database",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonDatabase { get; set; }
        /// <summary>File system options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"File system options should be shown with this plan",
        SerializedName = @"fileSystem",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonFileSystem { get; set; }
        /// <summary>Index copy options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Index copy options should be shown with this plan",
        SerializedName = @"indexCopy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonIndexCopy { get; set; }
        /// <summary>Snap options should be shown with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Snap options should be shown with this plan",
        SerializedName = @"snap",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddonSnap { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"snapStatus",
        PossibleTypes = new [] { typeof(string) })]
        string AddonSnapStatus { get; set; }
        /// <summary>The least RPO in minutes for the plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The least RPO in minutes for the plan",
        SerializedName = @"RPO",
        PossibleTypes = new [] { typeof(long) })]
        long? Rpo { get; set; }
        /// <summary>status if plan backups are enabled or disabled</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"status if plan backups are enabled or disabled",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string Status { get; set; }

    }
    internal partial interface IPlanAdditionalPropertiesInternal

    {
        /// <summary>Database options should be shown with this plan</summary>
        bool? AddonDatabase { get; set; }
        /// <summary>File system options should be shown with this plan</summary>
        bool? AddonFileSystem { get; set; }
        /// <summary>Index copy options should be shown with this plan</summary>
        bool? AddonIndexCopy { get; set; }
        /// <summary>Snap options should be shown with this plan</summary>
        bool? AddonSnap { get; set; }

        string AddonSnapStatus { get; set; }

        Commvault.Powershell.Models.IPlanAddons Addons { get; set; }
        /// <summary>The least RPO in minutes for the plan</summary>
        long? Rpo { get; set; }
        /// <summary>status if plan backups are enabled or disabled</summary>
        string Status { get; set; }

    }
}