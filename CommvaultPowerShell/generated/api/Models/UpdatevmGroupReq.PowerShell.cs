// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    /// <summary>UpdatevmGroupReq</summary>
    [System.ComponentModel.TypeConverter(typeof(UpdatevmGroupReqTypeConverter))]
    public partial class UpdatevmGroupReq
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.UpdatevmGroupReq"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IUpdatevmGroupReq" />.</returns>
        public static Commvault.Powershell.Models.IUpdatevmGroupReq DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new UpdatevmGroupReq(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.UpdatevmGroupReq"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IUpdatevmGroupReq" />.</returns>
        public static Commvault.Powershell.Models.IUpdatevmGroupReq DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new UpdatevmGroupReq(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="UpdatevmGroupReq" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="UpdatevmGroupReq" /> model class.</returns>
        public static Commvault.Powershell.Models.IUpdatevmGroupReq FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.UpdatevmGroupReq"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal UpdatevmGroupReq(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Content"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Content = (Commvault.Powershell.Models.IVMContent) content.GetValueForProperty("Content",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Content, Commvault.Powershell.Models.VMContentTypeConverter.ConvertFrom);
            }
            if (content.Contains("Plan"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Plan = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("Plan",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Plan, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("Storage"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Storage = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("Storage",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Storage, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("Filters"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Filters = (Commvault.Powershell.Models.IVMContent) content.GetValueForProperty("Filters",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Filters, Commvault.Powershell.Models.VMContentTypeConverter.ConvertFrom);
            }
            if (content.Contains("DiskFilters"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilters = (Commvault.Powershell.Models.IVMDiskFilterProp) content.GetValueForProperty("DiskFilters",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilters, Commvault.Powershell.Models.VMDiskFilterPropTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotManagement"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagement = (Commvault.Powershell.Models.ISnapCopyInfo) content.GetValueForProperty("SnapshotManagement",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagement, Commvault.Powershell.Models.SnapCopyInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("ActivityControl"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControl = (Commvault.Powershell.Models.IActivityControlOptions) content.GetValueForProperty("ActivityControl",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControl, Commvault.Powershell.Models.ActivityControlOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("TimeZone"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZone = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("TimeZone",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZone, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("MeditechSystems"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystems = (Commvault.Powershell.Models.IMeditechPropResp) content.GetValueForProperty("MeditechSystems",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystems, Commvault.Powershell.Models.MeditechPropRespTypeConverter.ConvertFrom);
            }
            if (content.Contains("NewName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).NewName = (string) content.GetValueForProperty("NewName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).NewName, global::System.Convert.ToString);
            }
            if (content.Contains("SecurityAssociations"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SecurityAssociations = (System.Collections.Generic.List<Commvault.Powershell.Models.ISecurityAssoc>) content.GetValueForProperty("SecurityAssociations",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SecurityAssociations, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.ISecurityAssoc>(__y, Commvault.Powershell.Models.SecurityAssocTypeConverter.ConvertFrom));
            }
            if (content.Contains("EnableFileIndexing"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).EnableFileIndexing = (bool?) content.GetValueForProperty("EnableFileIndexing",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).EnableFileIndexing, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AccessNode"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).AccessNode = (System.Collections.Generic.List<Commvault.Powershell.Models.IAccessNodeModel>) content.GetValueForProperty("AccessNode",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).AccessNode, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IAccessNodeModel>(__y, Commvault.Powershell.Models.AccessNodeModelTypeConverter.ConvertFrom));
            }
            if (content.Contains("Settings"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Settings = (Commvault.Powershell.Models.IVMGroupSettings) content.GetValueForProperty("Settings",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Settings, Commvault.Powershell.Models.VMGroupSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ApplicationValidation"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ApplicationValidation = (Commvault.Powershell.Models.IVMAppValidation) content.GetValueForProperty("ApplicationValidation",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ApplicationValidation, Commvault.Powershell.Models.VMAppValidationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContentOverwrite"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentOverwrite = (bool?) content.GetValueForProperty("ContentOverwrite",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentOverwrite, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ContentVirtualMachines"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentVirtualMachines = (System.Collections.Generic.List<Commvault.Powershell.Models.IVirtualMachinecontent>) content.GetValueForProperty("ContentVirtualMachines",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentVirtualMachines, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IVirtualMachinecontent>(__y, Commvault.Powershell.Models.VirtualMachinecontentTypeConverter.ConvertFrom));
            }
            if (content.Contains("ContentRuleGroups"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentRuleGroups = (System.Collections.Generic.List<Commvault.Powershell.Models.IRuleGroupContent>) content.GetValueForProperty("ContentRuleGroups",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentRuleGroups, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IRuleGroupContent>(__y, Commvault.Powershell.Models.RuleGroupContentTypeConverter.ConvertFrom));
            }
            if (content.Contains("PlanId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).PlanId = (long?) content.GetValueForProperty("PlanId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).PlanId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("PlanName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).PlanName = (string) content.GetValueForProperty("PlanName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).PlanName, global::System.Convert.ToString);
            }
            if (content.Contains("StorageId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).StorageId = (long?) content.GetValueForProperty("StorageId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).StorageId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StorageName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).StorageName = (string) content.GetValueForProperty("StorageName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).StorageName, global::System.Convert.ToString);
            }
            if (content.Contains("FilterOverwrite"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterOverwrite = (bool?) content.GetValueForProperty("FilterOverwrite",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterOverwrite, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("FilterVirtualMachines"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterVirtualMachines = (System.Collections.Generic.List<Commvault.Powershell.Models.IVirtualMachinecontent>) content.GetValueForProperty("FilterVirtualMachines",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterVirtualMachines, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IVirtualMachinecontent>(__y, Commvault.Powershell.Models.VirtualMachinecontentTypeConverter.ConvertFrom));
            }
            if (content.Contains("FilterRuleGroups"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterRuleGroups = (System.Collections.Generic.List<Commvault.Powershell.Models.IRuleGroupContent>) content.GetValueForProperty("FilterRuleGroups",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterRuleGroups, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IRuleGroupContent>(__y, Commvault.Powershell.Models.RuleGroupContentTypeConverter.ConvertFrom));
            }
            if (content.Contains("DiskFilterOverwrite"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilterOverwrite = (bool?) content.GetValueForProperty("DiskFilterOverwrite",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilterOverwrite, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("DiskFilterRules"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilterRules = (System.Collections.Generic.List<Commvault.Powershell.Models.IVMDiskFilter>) content.GetValueForProperty("DiskFilterRules",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilterRules, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IVMDiskFilter>(__y, Commvault.Powershell.Models.VMDiskFilterTypeConverter.ConvertFrom));
            }
            if (content.Contains("SnapshotManagementSnapEngine"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapEngine = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SnapshotManagementSnapEngine",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapEngine, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotManagementSnapMountProxy"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapMountProxy = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SnapshotManagementSnapMountProxy",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapMountProxy, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotManagementEnableHardwareSnapshot"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementEnableHardwareSnapshot = (bool?) content.GetValueForProperty("SnapshotManagementEnableHardwareSnapshot",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementEnableHardwareSnapshot, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotManagementSnapMountEsxHost"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapMountEsxHost = (string) content.GetValueForProperty("SnapshotManagementSnapMountEsxHost",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapMountEsxHost, global::System.Convert.ToString);
            }
            if (content.Contains("SnapshotManagementIsIndependentDisksEnabled"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementIsIndependentDisksEnabled = (bool?) content.GetValueForProperty("SnapshotManagementIsIndependentDisksEnabled",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementIsIndependentDisksEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotManagementIsRawDeviceMapsEnabled"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementIsRawDeviceMapsEnabled = (bool?) content.GetValueForProperty("SnapshotManagementIsRawDeviceMapsEnabled",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementIsRawDeviceMapsEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotManagementUseSeparateProxyForSnapToTape"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementUseSeparateProxyForSnapToTape = (bool?) content.GetValueForProperty("SnapshotManagementUseSeparateProxyForSnapToTape",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementUseSeparateProxyForSnapToTape, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotManagementVMApplicationUserName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementVMApplicationUserName = (string) content.GetValueForProperty("SnapshotManagementVMApplicationUserName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementVMApplicationUserName, global::System.Convert.ToString);
            }
            if (content.Contains("SnapshotManagementBackupCopyInterface"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementBackupCopyInterface = (string) content.GetValueForProperty("SnapshotManagementBackupCopyInterface",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementBackupCopyInterface, global::System.Convert.ToString);
            }
            if (content.Contains("ActivityControlBackupActivityControlOptions"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlBackupActivityControlOptions = (Commvault.Powershell.Models.IActivityControlOptionsProp) content.GetValueForProperty("ActivityControlBackupActivityControlOptions",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlBackupActivityControlOptions, Commvault.Powershell.Models.ActivityControlOptionsPropTypeConverter.ConvertFrom);
            }
            if (content.Contains("ActivityControlRestoreActivityControlOptions"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlRestoreActivityControlOptions = (Commvault.Powershell.Models.IActivityControlOptionsProp) content.GetValueForProperty("ActivityControlRestoreActivityControlOptions",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlRestoreActivityControlOptions, Commvault.Powershell.Models.ActivityControlOptionsPropTypeConverter.ConvertFrom);
            }
            if (content.Contains("ActivityControlEnableBackup"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlEnableBackup = (bool?) content.GetValueForProperty("ActivityControlEnableBackup",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlEnableBackup, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ActivityControlEnableRestore"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlEnableRestore = (bool?) content.GetValueForProperty("ActivityControlEnableRestore",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlEnableRestore, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("TimeZoneId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZoneId = (long?) content.GetValueForProperty("TimeZoneId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZoneId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("TimeZoneName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZoneName = (string) content.GetValueForProperty("TimeZoneName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZoneName, global::System.Convert.ToString);
            }
            if (content.Contains("MeditechSystemUserAccount"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemUserAccount = (Commvault.Powershell.Models.IUserNamePassword) content.GetValueForProperty("MeditechSystemUserAccount",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemUserAccount, Commvault.Powershell.Models.UserNamePasswordTypeConverter.ConvertFrom);
            }
            if (content.Contains("MeditechSystemName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemName = (string) content.GetValueForProperty("MeditechSystemName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemName, global::System.Convert.ToString);
            }
            if (content.Contains("MeditechSystemListenerIP"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemListenerIP = (string) content.GetValueForProperty("MeditechSystemListenerIP",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemListenerIP, global::System.Convert.ToString);
            }
            if (content.Contains("MeditechSystemListenerPort"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemListenerPort = (long?) content.GetValueForProperty("MeditechSystemListenerPort",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemListenerPort, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("MeditechSystemMbFtimeout"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemMbFtimeout = (long?) content.GetValueForProperty("MeditechSystemMbFtimeout",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemMbFtimeout, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapEngineId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapEngineId = (long?) content.GetValueForProperty("SnapEngineId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapEngineId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapEngineName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapEngineName = (string) content.GetValueForProperty("SnapEngineName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapEngineName, global::System.Convert.ToString);
            }
            if (content.Contains("SnapMountProxyId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapMountProxyId = (long?) content.GetValueForProperty("SnapMountProxyId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapMountProxyId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapMountProxyName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapMountProxyName = (string) content.GetValueForProperty("SnapMountProxyName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapMountProxyName, global::System.Convert.ToString);
            }
            if (content.Contains("BackupActivityControlOptionDelayTime"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionDelayTime = (Commvault.Powershell.Models.IActivityControlTileDelayTime) content.GetValueForProperty("BackupActivityControlOptionDelayTime",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionDelayTime, Commvault.Powershell.Models.ActivityControlTileDelayTimeTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupActivityControlOptionActivityType"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionActivityType = (string) content.GetValueForProperty("BackupActivityControlOptionActivityType",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionActivityType, global::System.Convert.ToString);
            }
            if (content.Contains("BackupActivityControlOptionEnableAfterADelay"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionEnableAfterADelay = (bool?) content.GetValueForProperty("BackupActivityControlOptionEnableAfterADelay",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionEnableAfterADelay, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupActivityControlOptionEnableActivityType"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionEnableActivityType = (bool?) content.GetValueForProperty("BackupActivityControlOptionEnableActivityType",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionEnableActivityType, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RestoreActivityControlOptionDelayTime"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionDelayTime = (Commvault.Powershell.Models.IActivityControlTileDelayTime) content.GetValueForProperty("RestoreActivityControlOptionDelayTime",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionDelayTime, Commvault.Powershell.Models.ActivityControlTileDelayTimeTypeConverter.ConvertFrom);
            }
            if (content.Contains("RestoreActivityControlOptionActivityType"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionActivityType = (string) content.GetValueForProperty("RestoreActivityControlOptionActivityType",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionActivityType, global::System.Convert.ToString);
            }
            if (content.Contains("RestoreActivityControlOptionEnableAfterADelay"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionEnableAfterADelay = (bool?) content.GetValueForProperty("RestoreActivityControlOptionEnableAfterADelay",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionEnableAfterADelay, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RestoreActivityControlOptionEnableActivityType"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionEnableActivityType = (bool?) content.GetValueForProperty("RestoreActivityControlOptionEnableActivityType",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionEnableActivityType, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserAccountName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).UserAccountName = (string) content.GetValueForProperty("UserAccountName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).UserAccountName, global::System.Convert.ToString);
            }
            if (content.Contains("UserAccountPassword"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).UserAccountPassword = (string) content.GetValueForProperty("UserAccountPassword",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).UserAccountPassword, global::System.Convert.ToString);
            }
            if (content.Contains("BackupActivityControlOptionsDelayTimeZone"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZone = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("BackupActivityControlOptionsDelayTimeZone",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZone, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupActivityControlOptionsDelayTime"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTime = (long?) content.GetValueForProperty("BackupActivityControlOptionsDelayTime",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupActivityControlOptionsDelayTimeValue"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeValue = (string) content.GetValueForProperty("BackupActivityControlOptionsDelayTimeValue",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeValue, global::System.Convert.ToString);
            }
            if (content.Contains("RestoreActivityControlOptionsDelayTimeZone"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZone = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("RestoreActivityControlOptionsDelayTimeZone",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZone, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("RestoreActivityControlOptionsDelayTime"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTime = (long?) content.GetValueForProperty("RestoreActivityControlOptionsDelayTime",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RestoreActivityControlOptionsDelayTimeValue"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeValue = (string) content.GetValueForProperty("RestoreActivityControlOptionsDelayTimeValue",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeValue, global::System.Convert.ToString);
            }
            if (content.Contains("BackupActivityControlOptionsDelayTimeZoneId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZoneId = (long?) content.GetValueForProperty("BackupActivityControlOptionsDelayTimeZoneId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZoneId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupActivityControlOptionsDelayTimeZoneName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZoneName = (string) content.GetValueForProperty("BackupActivityControlOptionsDelayTimeZoneName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZoneName, global::System.Convert.ToString);
            }
            if (content.Contains("RestoreActivityControlOptionsDelayTimeZoneId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZoneId = (long?) content.GetValueForProperty("RestoreActivityControlOptionsDelayTimeZoneId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZoneId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RestoreActivityControlOptionsDelayTimeZoneName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZoneName = (string) content.GetValueForProperty("RestoreActivityControlOptionsDelayTimeZoneName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZoneName, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.UpdatevmGroupReq"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal UpdatevmGroupReq(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Content"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Content = (Commvault.Powershell.Models.IVMContent) content.GetValueForProperty("Content",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Content, Commvault.Powershell.Models.VMContentTypeConverter.ConvertFrom);
            }
            if (content.Contains("Plan"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Plan = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("Plan",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Plan, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("Storage"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Storage = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("Storage",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Storage, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("Filters"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Filters = (Commvault.Powershell.Models.IVMContent) content.GetValueForProperty("Filters",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Filters, Commvault.Powershell.Models.VMContentTypeConverter.ConvertFrom);
            }
            if (content.Contains("DiskFilters"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilters = (Commvault.Powershell.Models.IVMDiskFilterProp) content.GetValueForProperty("DiskFilters",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilters, Commvault.Powershell.Models.VMDiskFilterPropTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotManagement"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagement = (Commvault.Powershell.Models.ISnapCopyInfo) content.GetValueForProperty("SnapshotManagement",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagement, Commvault.Powershell.Models.SnapCopyInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("ActivityControl"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControl = (Commvault.Powershell.Models.IActivityControlOptions) content.GetValueForProperty("ActivityControl",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControl, Commvault.Powershell.Models.ActivityControlOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("TimeZone"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZone = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("TimeZone",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZone, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("MeditechSystems"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystems = (Commvault.Powershell.Models.IMeditechPropResp) content.GetValueForProperty("MeditechSystems",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystems, Commvault.Powershell.Models.MeditechPropRespTypeConverter.ConvertFrom);
            }
            if (content.Contains("NewName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).NewName = (string) content.GetValueForProperty("NewName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).NewName, global::System.Convert.ToString);
            }
            if (content.Contains("SecurityAssociations"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SecurityAssociations = (System.Collections.Generic.List<Commvault.Powershell.Models.ISecurityAssoc>) content.GetValueForProperty("SecurityAssociations",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SecurityAssociations, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.ISecurityAssoc>(__y, Commvault.Powershell.Models.SecurityAssocTypeConverter.ConvertFrom));
            }
            if (content.Contains("EnableFileIndexing"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).EnableFileIndexing = (bool?) content.GetValueForProperty("EnableFileIndexing",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).EnableFileIndexing, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AccessNode"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).AccessNode = (System.Collections.Generic.List<Commvault.Powershell.Models.IAccessNodeModel>) content.GetValueForProperty("AccessNode",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).AccessNode, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IAccessNodeModel>(__y, Commvault.Powershell.Models.AccessNodeModelTypeConverter.ConvertFrom));
            }
            if (content.Contains("Settings"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Settings = (Commvault.Powershell.Models.IVMGroupSettings) content.GetValueForProperty("Settings",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).Settings, Commvault.Powershell.Models.VMGroupSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ApplicationValidation"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ApplicationValidation = (Commvault.Powershell.Models.IVMAppValidation) content.GetValueForProperty("ApplicationValidation",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ApplicationValidation, Commvault.Powershell.Models.VMAppValidationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContentOverwrite"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentOverwrite = (bool?) content.GetValueForProperty("ContentOverwrite",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentOverwrite, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ContentVirtualMachines"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentVirtualMachines = (System.Collections.Generic.List<Commvault.Powershell.Models.IVirtualMachinecontent>) content.GetValueForProperty("ContentVirtualMachines",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentVirtualMachines, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IVirtualMachinecontent>(__y, Commvault.Powershell.Models.VirtualMachinecontentTypeConverter.ConvertFrom));
            }
            if (content.Contains("ContentRuleGroups"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentRuleGroups = (System.Collections.Generic.List<Commvault.Powershell.Models.IRuleGroupContent>) content.GetValueForProperty("ContentRuleGroups",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ContentRuleGroups, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IRuleGroupContent>(__y, Commvault.Powershell.Models.RuleGroupContentTypeConverter.ConvertFrom));
            }
            if (content.Contains("PlanId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).PlanId = (long?) content.GetValueForProperty("PlanId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).PlanId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("PlanName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).PlanName = (string) content.GetValueForProperty("PlanName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).PlanName, global::System.Convert.ToString);
            }
            if (content.Contains("StorageId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).StorageId = (long?) content.GetValueForProperty("StorageId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).StorageId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StorageName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).StorageName = (string) content.GetValueForProperty("StorageName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).StorageName, global::System.Convert.ToString);
            }
            if (content.Contains("FilterOverwrite"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterOverwrite = (bool?) content.GetValueForProperty("FilterOverwrite",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterOverwrite, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("FilterVirtualMachines"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterVirtualMachines = (System.Collections.Generic.List<Commvault.Powershell.Models.IVirtualMachinecontent>) content.GetValueForProperty("FilterVirtualMachines",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterVirtualMachines, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IVirtualMachinecontent>(__y, Commvault.Powershell.Models.VirtualMachinecontentTypeConverter.ConvertFrom));
            }
            if (content.Contains("FilterRuleGroups"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterRuleGroups = (System.Collections.Generic.List<Commvault.Powershell.Models.IRuleGroupContent>) content.GetValueForProperty("FilterRuleGroups",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).FilterRuleGroups, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IRuleGroupContent>(__y, Commvault.Powershell.Models.RuleGroupContentTypeConverter.ConvertFrom));
            }
            if (content.Contains("DiskFilterOverwrite"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilterOverwrite = (bool?) content.GetValueForProperty("DiskFilterOverwrite",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilterOverwrite, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("DiskFilterRules"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilterRules = (System.Collections.Generic.List<Commvault.Powershell.Models.IVMDiskFilter>) content.GetValueForProperty("DiskFilterRules",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).DiskFilterRules, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IVMDiskFilter>(__y, Commvault.Powershell.Models.VMDiskFilterTypeConverter.ConvertFrom));
            }
            if (content.Contains("SnapshotManagementSnapEngine"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapEngine = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SnapshotManagementSnapEngine",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapEngine, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotManagementSnapMountProxy"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapMountProxy = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SnapshotManagementSnapMountProxy",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapMountProxy, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotManagementEnableHardwareSnapshot"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementEnableHardwareSnapshot = (bool?) content.GetValueForProperty("SnapshotManagementEnableHardwareSnapshot",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementEnableHardwareSnapshot, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotManagementSnapMountEsxHost"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapMountEsxHost = (string) content.GetValueForProperty("SnapshotManagementSnapMountEsxHost",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementSnapMountEsxHost, global::System.Convert.ToString);
            }
            if (content.Contains("SnapshotManagementIsIndependentDisksEnabled"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementIsIndependentDisksEnabled = (bool?) content.GetValueForProperty("SnapshotManagementIsIndependentDisksEnabled",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementIsIndependentDisksEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotManagementIsRawDeviceMapsEnabled"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementIsRawDeviceMapsEnabled = (bool?) content.GetValueForProperty("SnapshotManagementIsRawDeviceMapsEnabled",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementIsRawDeviceMapsEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotManagementUseSeparateProxyForSnapToTape"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementUseSeparateProxyForSnapToTape = (bool?) content.GetValueForProperty("SnapshotManagementUseSeparateProxyForSnapToTape",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementUseSeparateProxyForSnapToTape, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotManagementVMApplicationUserName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementVMApplicationUserName = (string) content.GetValueForProperty("SnapshotManagementVMApplicationUserName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementVMApplicationUserName, global::System.Convert.ToString);
            }
            if (content.Contains("SnapshotManagementBackupCopyInterface"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementBackupCopyInterface = (string) content.GetValueForProperty("SnapshotManagementBackupCopyInterface",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapshotManagementBackupCopyInterface, global::System.Convert.ToString);
            }
            if (content.Contains("ActivityControlBackupActivityControlOptions"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlBackupActivityControlOptions = (Commvault.Powershell.Models.IActivityControlOptionsProp) content.GetValueForProperty("ActivityControlBackupActivityControlOptions",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlBackupActivityControlOptions, Commvault.Powershell.Models.ActivityControlOptionsPropTypeConverter.ConvertFrom);
            }
            if (content.Contains("ActivityControlRestoreActivityControlOptions"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlRestoreActivityControlOptions = (Commvault.Powershell.Models.IActivityControlOptionsProp) content.GetValueForProperty("ActivityControlRestoreActivityControlOptions",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlRestoreActivityControlOptions, Commvault.Powershell.Models.ActivityControlOptionsPropTypeConverter.ConvertFrom);
            }
            if (content.Contains("ActivityControlEnableBackup"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlEnableBackup = (bool?) content.GetValueForProperty("ActivityControlEnableBackup",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlEnableBackup, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ActivityControlEnableRestore"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlEnableRestore = (bool?) content.GetValueForProperty("ActivityControlEnableRestore",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).ActivityControlEnableRestore, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("TimeZoneId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZoneId = (long?) content.GetValueForProperty("TimeZoneId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZoneId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("TimeZoneName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZoneName = (string) content.GetValueForProperty("TimeZoneName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).TimeZoneName, global::System.Convert.ToString);
            }
            if (content.Contains("MeditechSystemUserAccount"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemUserAccount = (Commvault.Powershell.Models.IUserNamePassword) content.GetValueForProperty("MeditechSystemUserAccount",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemUserAccount, Commvault.Powershell.Models.UserNamePasswordTypeConverter.ConvertFrom);
            }
            if (content.Contains("MeditechSystemName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemName = (string) content.GetValueForProperty("MeditechSystemName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemName, global::System.Convert.ToString);
            }
            if (content.Contains("MeditechSystemListenerIP"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemListenerIP = (string) content.GetValueForProperty("MeditechSystemListenerIP",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemListenerIP, global::System.Convert.ToString);
            }
            if (content.Contains("MeditechSystemListenerPort"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemListenerPort = (long?) content.GetValueForProperty("MeditechSystemListenerPort",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemListenerPort, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("MeditechSystemMbFtimeout"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemMbFtimeout = (long?) content.GetValueForProperty("MeditechSystemMbFtimeout",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).MeditechSystemMbFtimeout, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapEngineId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapEngineId = (long?) content.GetValueForProperty("SnapEngineId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapEngineId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapEngineName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapEngineName = (string) content.GetValueForProperty("SnapEngineName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapEngineName, global::System.Convert.ToString);
            }
            if (content.Contains("SnapMountProxyId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapMountProxyId = (long?) content.GetValueForProperty("SnapMountProxyId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapMountProxyId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapMountProxyName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapMountProxyName = (string) content.GetValueForProperty("SnapMountProxyName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).SnapMountProxyName, global::System.Convert.ToString);
            }
            if (content.Contains("BackupActivityControlOptionDelayTime"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionDelayTime = (Commvault.Powershell.Models.IActivityControlTileDelayTime) content.GetValueForProperty("BackupActivityControlOptionDelayTime",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionDelayTime, Commvault.Powershell.Models.ActivityControlTileDelayTimeTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupActivityControlOptionActivityType"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionActivityType = (string) content.GetValueForProperty("BackupActivityControlOptionActivityType",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionActivityType, global::System.Convert.ToString);
            }
            if (content.Contains("BackupActivityControlOptionEnableAfterADelay"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionEnableAfterADelay = (bool?) content.GetValueForProperty("BackupActivityControlOptionEnableAfterADelay",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionEnableAfterADelay, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupActivityControlOptionEnableActivityType"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionEnableActivityType = (bool?) content.GetValueForProperty("BackupActivityControlOptionEnableActivityType",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionEnableActivityType, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RestoreActivityControlOptionDelayTime"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionDelayTime = (Commvault.Powershell.Models.IActivityControlTileDelayTime) content.GetValueForProperty("RestoreActivityControlOptionDelayTime",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionDelayTime, Commvault.Powershell.Models.ActivityControlTileDelayTimeTypeConverter.ConvertFrom);
            }
            if (content.Contains("RestoreActivityControlOptionActivityType"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionActivityType = (string) content.GetValueForProperty("RestoreActivityControlOptionActivityType",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionActivityType, global::System.Convert.ToString);
            }
            if (content.Contains("RestoreActivityControlOptionEnableAfterADelay"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionEnableAfterADelay = (bool?) content.GetValueForProperty("RestoreActivityControlOptionEnableAfterADelay",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionEnableAfterADelay, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RestoreActivityControlOptionEnableActivityType"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionEnableActivityType = (bool?) content.GetValueForProperty("RestoreActivityControlOptionEnableActivityType",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionEnableActivityType, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserAccountName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).UserAccountName = (string) content.GetValueForProperty("UserAccountName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).UserAccountName, global::System.Convert.ToString);
            }
            if (content.Contains("UserAccountPassword"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).UserAccountPassword = (string) content.GetValueForProperty("UserAccountPassword",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).UserAccountPassword, global::System.Convert.ToString);
            }
            if (content.Contains("BackupActivityControlOptionsDelayTimeZone"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZone = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("BackupActivityControlOptionsDelayTimeZone",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZone, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupActivityControlOptionsDelayTime"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTime = (long?) content.GetValueForProperty("BackupActivityControlOptionsDelayTime",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupActivityControlOptionsDelayTimeValue"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeValue = (string) content.GetValueForProperty("BackupActivityControlOptionsDelayTimeValue",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeValue, global::System.Convert.ToString);
            }
            if (content.Contains("RestoreActivityControlOptionsDelayTimeZone"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZone = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("RestoreActivityControlOptionsDelayTimeZone",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZone, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("RestoreActivityControlOptionsDelayTime"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTime = (long?) content.GetValueForProperty("RestoreActivityControlOptionsDelayTime",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RestoreActivityControlOptionsDelayTimeValue"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeValue = (string) content.GetValueForProperty("RestoreActivityControlOptionsDelayTimeValue",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeValue, global::System.Convert.ToString);
            }
            if (content.Contains("BackupActivityControlOptionsDelayTimeZoneId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZoneId = (long?) content.GetValueForProperty("BackupActivityControlOptionsDelayTimeZoneId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZoneId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupActivityControlOptionsDelayTimeZoneName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZoneName = (string) content.GetValueForProperty("BackupActivityControlOptionsDelayTimeZoneName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).BackupActivityControlOptionsDelayTimeZoneName, global::System.Convert.ToString);
            }
            if (content.Contains("RestoreActivityControlOptionsDelayTimeZoneId"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZoneId = (long?) content.GetValueForProperty("RestoreActivityControlOptionsDelayTimeZoneId",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZoneId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RestoreActivityControlOptionsDelayTimeZoneName"))
            {
                ((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZoneName = (string) content.GetValueForProperty("RestoreActivityControlOptionsDelayTimeZoneName",((Commvault.Powershell.Models.IUpdatevmGroupReqInternal)this).RestoreActivityControlOptionsDelayTimeZoneName, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }
    }
    /// UpdatevmGroupReq
    [System.ComponentModel.TypeConverter(typeof(UpdatevmGroupReqTypeConverter))]
    public partial interface IUpdatevmGroupReq

    {

    }
}