// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.2, generator: @autorest/powershell@3.0.494)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>vmPreviewInfo</summary>
    public partial class VMPreviewInfo :
        Commvault.Powershell.Models.IVMPreviewInfo,
        Commvault.Powershell.Models.IVMPreviewInfoInternal
    {

        /// <summary>Backing field for <see cref="Guid" /> property.</summary>
        private string _guid;

        /// <summary>GUID of the VM</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Guid { get => this._guid; set => this._guid = value; }

        /// <summary>Backing field for <see cref="Host" /> property.</summary>
        private string _host;

        /// <summary>host of the VM</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Host { get => this._host; set => this._host = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>name of the VM</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="PoweredStatus" /> property.</summary>
        private string _poweredStatus;

        /// <summary>
        /// Power status of the VM from the hypervisor Eg- Powered on , Running if the VM is powered on . Values might differ based
        /// on hypervisor type
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string PoweredStatus { get => this._poweredStatus; set => this._poweredStatus = value; }

        /// <summary>Backing field for <see cref="ToolStatus" /> property.</summary>
        private string _toolStatus;

        /// <summary>
        /// if Installed then the corresponding tools version of the VM. VMWare - VMWare tools version Hyper-V - Integration services
        /// version Values might differ based on hypervisor type status would be not installed if tools is not installed.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string ToolStatus { get => this._toolStatus; set => this._toolStatus = value; }

        /// <summary>Creates an new <see cref="VMPreviewInfo" /> instance.</summary>
        public VMPreviewInfo()
        {

        }
    }
    /// vmPreviewInfo
    public partial interface IVMPreviewInfo :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>GUID of the VM</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"GUID  of the VM",
        SerializedName = @"GUID",
        PossibleTypes = new [] { typeof(string) })]
        string Guid { get; set; }
        /// <summary>host of the VM</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"host of the VM",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        string Host { get; set; }
        /// <summary>name of the VM</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"name  of the VM",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// Power status of the VM from the hypervisor Eg- Powered on , Running if the VM is powered on . Values might differ based
        /// on hypervisor type
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Power status of the VM from the hypervisor Eg- Powered on ,  Running if the VM is powered on . Values might differ based on hypervisor type",
        SerializedName = @"poweredStatus",
        PossibleTypes = new [] { typeof(string) })]
        string PoweredStatus { get; set; }
        /// <summary>
        /// if Installed then the corresponding tools version of the VM. VMWare - VMWare tools version Hyper-V - Integration services
        /// version Values might differ based on hypervisor type status would be not installed if tools is not installed.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"if Installed then the corresponding tools version of the VM. VMWare - VMWare tools version Hyper-V - Integration services version Values might differ based on hypervisor type status would be not installed if tools is not installed.",
        SerializedName = @"toolStatus",
        PossibleTypes = new [] { typeof(string) })]
        string ToolStatus { get; set; }

    }
    /// vmPreviewInfo
    internal partial interface IVMPreviewInfoInternal

    {
        /// <summary>GUID of the VM</summary>
        string Guid { get; set; }
        /// <summary>host of the VM</summary>
        string Host { get; set; }
        /// <summary>name of the VM</summary>
        string Name { get; set; }
        /// <summary>
        /// Power status of the VM from the hypervisor Eg- Powered on , Running if the VM is powered on . Values might differ based
        /// on hypervisor type
        /// </summary>
        string PoweredStatus { get; set; }
        /// <summary>
        /// if Installed then the corresponding tools version of the VM. VMWare - VMWare tools version Hyper-V - Integration services
        /// version Values might differ based on hypervisor type status would be not installed if tools is not installed.
        /// </summary>
        string ToolStatus { get; set; }

    }
}