// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>ValidationScript</summary>
    public partial class ValidationScript :
        Commvault.Powershell.Models.IValidationScript,
        Commvault.Powershell.Models.IValidationScriptInternal
    {

        /// <summary>Backing field for <see cref="Arguments" /> property.</summary>
        private string _arguments;

        /// <summary>Arguments for the script</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Arguments { get => this._arguments; set => this._arguments = value; }

        /// <summary>Internal Acessors for UncCredentials</summary>
        Commvault.Powershell.Models.IUserNamePassword Commvault.Powershell.Models.IValidationScriptInternal.UncCredentials { get => (this._uncCredentials = this._uncCredentials ?? new Commvault.Powershell.Models.UserNamePassword()); set { {_uncCredentials = value;} } }

        /// <summary>Internal Acessors for UncSavedCredentials</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IValidationScriptInternal.UncSavedCredentials { get => (this._uncSavedCredentials = this._uncSavedCredentials ?? new Commvault.Powershell.Models.IdName()); set { {_uncSavedCredentials = value;} } }

        /// <summary>Backing field for <see cref="IsDisabled" /> property.</summary>
        private bool? _isDisabled;

        /// <summary>Is the script disabled</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? IsDisabled { get => this._isDisabled; set => this._isDisabled = value; }

        /// <summary>Backing field for <see cref="IsUnc" /> property.</summary>
        private bool? _isUnc;

        /// <summary>True if the script is a UNC script, False if it is a local script</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? IsUnc { get => this._isUnc; set => this._isUnc = value; }

        /// <summary>Backing field for <see cref="Path" /> property.</summary>
        private string _path;

        /// <summary>Path for the validation script</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Path { get => this._path; set => this._path = value; }

        /// <summary>Backing field for <see cref="UncCredentials" /> property.</summary>
        private Commvault.Powershell.Models.IUserNamePassword _uncCredentials;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IUserNamePassword UncCredentials { get => (this._uncCredentials = this._uncCredentials ?? new Commvault.Powershell.Models.UserNamePassword()); set => this._uncCredentials = value; }

        /// <summary>username to access the network path</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UncCredentialsName { get => ((Commvault.Powershell.Models.IUserNamePasswordInternal)UncCredentials).Name; set => ((Commvault.Powershell.Models.IUserNamePasswordInternal)UncCredentials).Name = value ?? null; }

        /// <summary>password to access the network path</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UncCredentialsPassword { get => ((Commvault.Powershell.Models.IUserNamePasswordInternal)UncCredentials).Password; set => ((Commvault.Powershell.Models.IUserNamePasswordInternal)UncCredentials).Password = value ?? null; }

        /// <summary>Backing field for <see cref="UncSavedCredentials" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _uncSavedCredentials;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName UncSavedCredentials { get => (this._uncSavedCredentials = this._uncSavedCredentials ?? new Commvault.Powershell.Models.IdName()); set => this._uncSavedCredentials = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? UncSavedCredentialsId { get => ((Commvault.Powershell.Models.IIdNameInternal)UncSavedCredentials).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)UncSavedCredentials).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UncSavedCredentialsName { get => ((Commvault.Powershell.Models.IIdNameInternal)UncSavedCredentials).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)UncSavedCredentials).Name = value ?? null; }

        /// <summary>Creates an new <see cref="ValidationScript" /> instance.</summary>
        public ValidationScript()
        {

        }
    }
    /// ValidationScript
    public partial interface IValidationScript :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Arguments for the script</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Arguments for the script",
        SerializedName = @"arguments",
        PossibleTypes = new [] { typeof(string) })]
        string Arguments { get; set; }
        /// <summary>Is the script disabled</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Is the script disabled",
        SerializedName = @"isDisabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsDisabled { get; set; }
        /// <summary>True if the script is a UNC script, False if it is a local script</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"True if the script is a UNC script, False if it is a local script",
        SerializedName = @"isUNC",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsUnc { get; set; }
        /// <summary>Path for the validation script</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Path for the validation script",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string Path { get; set; }
        /// <summary>username to access the network path</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"username to access the network path",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string UncCredentialsName { get; set; }
        /// <summary>password to access the network path</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"password to access the network path",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string UncCredentialsPassword { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? UncSavedCredentialsId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string UncSavedCredentialsName { get; set; }

    }
    /// ValidationScript
    internal partial interface IValidationScriptInternal

    {
        /// <summary>Arguments for the script</summary>
        string Arguments { get; set; }
        /// <summary>Is the script disabled</summary>
        bool? IsDisabled { get; set; }
        /// <summary>True if the script is a UNC script, False if it is a local script</summary>
        bool? IsUnc { get; set; }
        /// <summary>Path for the validation script</summary>
        string Path { get; set; }

        Commvault.Powershell.Models.IUserNamePassword UncCredentials { get; set; }
        /// <summary>username to access the network path</summary>
        string UncCredentialsName { get; set; }
        /// <summary>password to access the network path</summary>
        string UncCredentialsPassword { get; set; }

        Commvault.Powershell.Models.IIdName UncSavedCredentials { get; set; }

        long? UncSavedCredentialsId { get; set; }

        string UncSavedCredentialsName { get; set; }

    }
}