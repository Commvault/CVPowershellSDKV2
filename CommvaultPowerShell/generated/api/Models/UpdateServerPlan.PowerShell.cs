// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    [System.ComponentModel.TypeConverter(typeof(UpdateServerPlanTypeConverter))]
    public partial class UpdateServerPlan
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.UpdateServerPlan"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IUpdateServerPlan" />.</returns>
        public static Commvault.Powershell.Models.IUpdateServerPlan DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new UpdateServerPlan(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.UpdateServerPlan"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IUpdateServerPlan" />.</returns>
        public static Commvault.Powershell.Models.IUpdateServerPlan DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new UpdateServerPlan(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="UpdateServerPlan" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="className" /> model class.</returns>
        public static Commvault.Powershell.Models.IUpdateServerPlan FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.UpdateServerPlan"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal UpdateServerPlan(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContent = (Commvault.Powershell.Models.IPlanContent) content.GetValueForProperty("BackupContent",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContent, Commvault.Powershell.Models.PlanContentTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Rpo = (Commvault.Powershell.Models.IServerPlanUpdateRpo) content.GetValueForProperty("Rpo",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Rpo, Commvault.Powershell.Models.ServerPlanUpdateRpoTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptions = (Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo) content.GetValueForProperty("DatabaseOptions",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptions, Commvault.Powershell.Models.ServerPlanDatabaseOptionsInfoTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigure = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("RegionToConfigure",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigure, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptions = (Commvault.Powershell.Models.IPlanSnapshotOptions) content.GetValueForProperty("SnapshotOptions",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptions, Commvault.Powershell.Models.PlanSnapshotOptionsTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Workload = (Commvault.Powershell.Models.IPlanWorkloads) content.GetValueForProperty("Workload",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Workload, Commvault.Powershell.Models.PlanWorkloadsTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictions = (Commvault.Powershell.Models.IPlanOverrideSettings) content.GetValueForProperty("OverrideRestrictions",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictions, Commvault.Powershell.Models.PlanOverrideSettingsTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettings = (Commvault.Powershell.Models.IPlanOverrideInheritSetting) content.GetValueForProperty("OverrideInheritSettings",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettings, Commvault.Powershell.Models.PlanOverrideInheritSettingTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Settings = (Commvault.Powershell.Models.IServerPlanSettings) content.GetValueForProperty("Settings",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Settings, Commvault.Powershell.Models.ServerPlanSettingsTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).NewName = (string) content.GetValueForProperty("NewName",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).NewName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FilesystemAddon = (bool?) content.GetValueForProperty("FilesystemAddon",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FilesystemAddon, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupDestinationIds = (long[]) content.GetValueForProperty("BackupDestinationIds",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupDestinationIds, __y => TypeConverterExtensions.SelectToArray<long>(__y, (__w)=> (long) global::System.Convert.ChangeType(__w, typeof(long))));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).AllowPlanOverride = (bool?) content.GetValueForProperty("AllowPlanOverride",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).AllowPlanOverride, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentWindowsNumberOfDataReaders",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentUnixNumberOfDataReaders",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentMacNumberOfDataReaders",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsIncludedPaths = (string[]) content.GetValueForProperty("BackupContentWindowsIncludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsIncludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsExcludedPaths = (string[]) content.GetValueForProperty("BackupContentWindowsExcludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsExcludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsFilterToExcludePaths = (string[]) content.GetValueForProperty("BackupContentWindowsFilterToExcludePaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsFilterToExcludePaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentBackupSystemState = (bool?) content.GetValueForProperty("BackupContentBackupSystemState",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentBackupSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentBackupSystemStateOnlyWithFullBackup = (bool?) content.GetValueForProperty("BackupContentBackupSystemStateOnlyWithFullBackup",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentBackupSystemStateOnlyWithFullBackup, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUseVssForSystemState = (bool?) content.GetValueForProperty("BackupContentUseVssForSystemState",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUseVssForSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacIncludedPaths = (string[]) content.GetValueForProperty("BackupContentMacIncludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacIncludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacExcludedPaths = (string[]) content.GetValueForProperty("BackupContentMacExcludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacExcludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacFilterToExcludePaths = (string[]) content.GetValueForProperty("BackupContentMacFilterToExcludePaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacFilterToExcludePaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixIncludedPaths = (string[]) content.GetValueForProperty("BackupContentUnixIncludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixIncludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixExcludedPaths = (string[]) content.GetValueForProperty("BackupContentUnixExcludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixExcludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixFilterToExcludePaths = (string[]) content.GetValueForProperty("BackupContentUnixFilterToExcludePaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixFilterToExcludePaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentForceUpdateProperties = (bool?) content.GetValueForProperty("BackupContentForceUpdateProperties",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentForceUpdateProperties, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoBackupFrequency = (Commvault.Powershell.Models.IPlanSchedules) content.GetValueForProperty("RpoBackupFrequency",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoBackupFrequency, Commvault.Powershell.Models.PlanSchedulesTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoSla = (Commvault.Powershell.Models.ISlaUpdateOptions) content.GetValueForProperty("RpoSla",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoSla, Commvault.Powershell.Models.SlaUpdateOptionsTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoBackupWindow = (Commvault.Powershell.Models.IDayAndTime[]) content.GetValueForProperty("RpoBackupWindow",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoBackupWindow, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IDayAndTime>(__y, Commvault.Powershell.Models.DayAndTimeTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoFullBackupWindow = (Commvault.Powershell.Models.IDayAndTime[]) content.GetValueForProperty("RpoFullBackupWindow",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoFullBackupWindow, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IDayAndTime>(__y, Commvault.Powershell.Models.DayAndTimeTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionLogBackupRpoMins = (long?) content.GetValueForProperty("DatabaseOptionLogBackupRpoMins",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionLogBackupRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionRunFullBackupEvery = (long?) content.GetValueForProperty("DatabaseOptionRunFullBackupEvery",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionRunFullBackupEvery, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionUseDiskCacheForLogBackups = (bool?) content.GetValueForProperty("DatabaseOptionUseDiskCacheForLogBackups",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionUseDiskCacheForLogBackups, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionCommitFrequencyInHours = (long?) content.GetValueForProperty("DatabaseOptionCommitFrequencyInHours",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionCommitFrequencyInHours, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigureId = (long?) content.GetValueForProperty("RegionToConfigureId",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigureId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigureName = (string) content.GetValueForProperty("RegionToConfigureName",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigureName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionBackupCopyFrequency = (Commvault.Powershell.Models.IBackupFrequencyPattern) content.GetValueForProperty("SnapshotOptionBackupCopyFrequency",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionBackupCopyFrequency, Commvault.Powershell.Models.BackupFrequencyPatternTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionEnableBackupCopy = (bool?) content.GetValueForProperty("SnapshotOptionEnableBackupCopy",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionEnableBackupCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionBackupCopyRpoMins = (long?) content.GetValueForProperty("SnapshotOptionBackupCopyRpoMins",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionBackupCopyRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadTypes = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("WorkloadTypes",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadTypes, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadGroupTypes = (string[]) content.GetValueForProperty("WorkloadGroupTypes",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadGroupTypes, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadSolutions = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("WorkloadSolutions",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadSolutions, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionBackupContent = (string) content.GetValueForProperty("OverrideRestrictionBackupContent",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionBackupContent, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionStoragePool = (string) content.GetValueForProperty("OverrideRestrictionStoragePool",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionStoragePool, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionRpo = (string) content.GetValueForProperty("OverrideRestrictionRpo",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionRpo, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingBackupDestination = (bool?) content.GetValueForProperty("OverrideInheritSettingBackupDestination",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingBackupDestination, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingRpo = (bool?) content.GetValueForProperty("OverrideInheritSettingRpo",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingRpo, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingBackupContent = (bool?) content.GetValueForProperty("OverrideInheritSettingBackupContent",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingBackupContent, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SettingFileSearch = (Commvault.Powershell.Models.IPlanFileSearch) content.GetValueForProperty("SettingFileSearch",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SettingFileSearch, Commvault.Powershell.Models.PlanFileSearchTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SettingEnableAdvancedView = (bool?) content.GetValueForProperty("SettingEnableAdvancedView",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SettingEnableAdvancedView, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WindowNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("WindowNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WindowNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WindowNumberOfDataReaderCount = (long?) content.GetValueForProperty("WindowNumberOfDataReaderCount",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WindowNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).UnixNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("UnixNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).UnixNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).UnixNumberOfDataReaderCount = (long?) content.GetValueForProperty("UnixNumberOfDataReaderCount",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).UnixNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).MacNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("MacNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).MacNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).MacNumberOfDataReaderCount = (long?) content.GetValueForProperty("MacNumberOfDataReaderCount",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).MacNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupFrequencySchedules = (Commvault.Powershell.Models.IPlanSchedule[]) content.GetValueForProperty("BackupFrequencySchedules",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupFrequencySchedules, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IPlanSchedule>(__y, Commvault.Powershell.Models.PlanScheduleTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupFrequencyOperationType = (string) content.GetValueForProperty("BackupFrequencyOperationType",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupFrequencyOperationType, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaUseSystemDefaultSla = (bool?) content.GetValueForProperty("SlaUseSystemDefaultSla",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaUseSystemDefaultSla, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaPeriod = (long?) content.GetValueForProperty("SlaPeriod",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaPeriod, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaExcludeFromSla = (bool?) content.GetValueForProperty("SlaExcludeFromSla",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaExcludeFromSla, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaEnableAfterDelay = (long?) content.GetValueForProperty("SlaEnableAfterDelay",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaEnableAfterDelay, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaExclusionReason = (string) content.GetValueForProperty("SlaExclusionReason",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaExclusionReason, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyScheduleFrequencyType = (string) content.GetValueForProperty("BackupCopyFrequencyScheduleFrequencyType",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyScheduleFrequencyType, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequency = (long?) content.GetValueForProperty("BackupCopyFrequency",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequency, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyWeeklyDays = (string[]) content.GetValueForProperty("BackupCopyFrequencyWeeklyDays",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyWeeklyDays, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyDayOfMonth = (long?) content.GetValueForProperty("BackupCopyFrequencyDayOfMonth",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyDayOfMonth, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyWeekOfMonth = (string) content.GetValueForProperty("BackupCopyFrequencyWeekOfMonth",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyWeekOfMonth, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyDayOfWeek = (string) content.GetValueForProperty("BackupCopyFrequencyDayOfWeek",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyDayOfWeek, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyMonthOfYear = (string) content.GetValueForProperty("BackupCopyFrequencyMonthOfYear",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyMonthOfYear, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyStartTime = (long?) content.GetValueForProperty("BackupCopyFrequencyStartTime",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchEnabled = (bool?) content.GetValueForProperty("FileSearchEnabled",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchStatus = (string) content.GetValueForProperty("FileSearchStatus",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchStatus, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchStatusMessage = (string) content.GetValueForProperty("FileSearchStatusMessage",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchStatusMessage, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchErrors = (Commvault.Powershell.Models.IPlanFileSearchSetupError[]) content.GetValueForProperty("FileSearchErrors",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchErrors, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IPlanFileSearchSetupError>(__y, Commvault.Powershell.Models.PlanFileSearchSetupErrorTypeConverter.ConvertFrom));
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.UpdateServerPlan"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal UpdateServerPlan(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContent = (Commvault.Powershell.Models.IPlanContent) content.GetValueForProperty("BackupContent",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContent, Commvault.Powershell.Models.PlanContentTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Rpo = (Commvault.Powershell.Models.IServerPlanUpdateRpo) content.GetValueForProperty("Rpo",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Rpo, Commvault.Powershell.Models.ServerPlanUpdateRpoTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptions = (Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo) content.GetValueForProperty("DatabaseOptions",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptions, Commvault.Powershell.Models.ServerPlanDatabaseOptionsInfoTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigure = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("RegionToConfigure",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigure, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptions = (Commvault.Powershell.Models.IPlanSnapshotOptions) content.GetValueForProperty("SnapshotOptions",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptions, Commvault.Powershell.Models.PlanSnapshotOptionsTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Workload = (Commvault.Powershell.Models.IPlanWorkloads) content.GetValueForProperty("Workload",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Workload, Commvault.Powershell.Models.PlanWorkloadsTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictions = (Commvault.Powershell.Models.IPlanOverrideSettings) content.GetValueForProperty("OverrideRestrictions",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictions, Commvault.Powershell.Models.PlanOverrideSettingsTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettings = (Commvault.Powershell.Models.IPlanOverrideInheritSetting) content.GetValueForProperty("OverrideInheritSettings",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettings, Commvault.Powershell.Models.PlanOverrideInheritSettingTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Settings = (Commvault.Powershell.Models.IServerPlanSettings) content.GetValueForProperty("Settings",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).Settings, Commvault.Powershell.Models.ServerPlanSettingsTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).NewName = (string) content.GetValueForProperty("NewName",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).NewName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FilesystemAddon = (bool?) content.GetValueForProperty("FilesystemAddon",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FilesystemAddon, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupDestinationIds = (long[]) content.GetValueForProperty("BackupDestinationIds",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupDestinationIds, __y => TypeConverterExtensions.SelectToArray<long>(__y, (__w)=> (long) global::System.Convert.ChangeType(__w, typeof(long))));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).AllowPlanOverride = (bool?) content.GetValueForProperty("AllowPlanOverride",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).AllowPlanOverride, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentWindowsNumberOfDataReaders",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentUnixNumberOfDataReaders",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentMacNumberOfDataReaders",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsIncludedPaths = (string[]) content.GetValueForProperty("BackupContentWindowsIncludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsIncludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsExcludedPaths = (string[]) content.GetValueForProperty("BackupContentWindowsExcludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsExcludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsFilterToExcludePaths = (string[]) content.GetValueForProperty("BackupContentWindowsFilterToExcludePaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentWindowsFilterToExcludePaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentBackupSystemState = (bool?) content.GetValueForProperty("BackupContentBackupSystemState",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentBackupSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentBackupSystemStateOnlyWithFullBackup = (bool?) content.GetValueForProperty("BackupContentBackupSystemStateOnlyWithFullBackup",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentBackupSystemStateOnlyWithFullBackup, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUseVssForSystemState = (bool?) content.GetValueForProperty("BackupContentUseVssForSystemState",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUseVssForSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacIncludedPaths = (string[]) content.GetValueForProperty("BackupContentMacIncludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacIncludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacExcludedPaths = (string[]) content.GetValueForProperty("BackupContentMacExcludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacExcludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacFilterToExcludePaths = (string[]) content.GetValueForProperty("BackupContentMacFilterToExcludePaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentMacFilterToExcludePaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixIncludedPaths = (string[]) content.GetValueForProperty("BackupContentUnixIncludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixIncludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixExcludedPaths = (string[]) content.GetValueForProperty("BackupContentUnixExcludedPaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixExcludedPaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixFilterToExcludePaths = (string[]) content.GetValueForProperty("BackupContentUnixFilterToExcludePaths",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentUnixFilterToExcludePaths, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentForceUpdateProperties = (bool?) content.GetValueForProperty("BackupContentForceUpdateProperties",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupContentForceUpdateProperties, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoBackupFrequency = (Commvault.Powershell.Models.IPlanSchedules) content.GetValueForProperty("RpoBackupFrequency",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoBackupFrequency, Commvault.Powershell.Models.PlanSchedulesTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoSla = (Commvault.Powershell.Models.ISlaUpdateOptions) content.GetValueForProperty("RpoSla",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoSla, Commvault.Powershell.Models.SlaUpdateOptionsTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoBackupWindow = (Commvault.Powershell.Models.IDayAndTime[]) content.GetValueForProperty("RpoBackupWindow",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoBackupWindow, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IDayAndTime>(__y, Commvault.Powershell.Models.DayAndTimeTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoFullBackupWindow = (Commvault.Powershell.Models.IDayAndTime[]) content.GetValueForProperty("RpoFullBackupWindow",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RpoFullBackupWindow, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IDayAndTime>(__y, Commvault.Powershell.Models.DayAndTimeTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionLogBackupRpoMins = (long?) content.GetValueForProperty("DatabaseOptionLogBackupRpoMins",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionLogBackupRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionRunFullBackupEvery = (long?) content.GetValueForProperty("DatabaseOptionRunFullBackupEvery",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionRunFullBackupEvery, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionUseDiskCacheForLogBackups = (bool?) content.GetValueForProperty("DatabaseOptionUseDiskCacheForLogBackups",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionUseDiskCacheForLogBackups, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionCommitFrequencyInHours = (long?) content.GetValueForProperty("DatabaseOptionCommitFrequencyInHours",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).DatabaseOptionCommitFrequencyInHours, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigureId = (long?) content.GetValueForProperty("RegionToConfigureId",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigureId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigureName = (string) content.GetValueForProperty("RegionToConfigureName",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).RegionToConfigureName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionBackupCopyFrequency = (Commvault.Powershell.Models.IBackupFrequencyPattern) content.GetValueForProperty("SnapshotOptionBackupCopyFrequency",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionBackupCopyFrequency, Commvault.Powershell.Models.BackupFrequencyPatternTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionEnableBackupCopy = (bool?) content.GetValueForProperty("SnapshotOptionEnableBackupCopy",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionEnableBackupCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionBackupCopyRpoMins = (long?) content.GetValueForProperty("SnapshotOptionBackupCopyRpoMins",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SnapshotOptionBackupCopyRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadTypes = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("WorkloadTypes",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadTypes, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadGroupTypes = (string[]) content.GetValueForProperty("WorkloadGroupTypes",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadGroupTypes, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadSolutions = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("WorkloadSolutions",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WorkloadSolutions, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionBackupContent = (string) content.GetValueForProperty("OverrideRestrictionBackupContent",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionBackupContent, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionStoragePool = (string) content.GetValueForProperty("OverrideRestrictionStoragePool",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionStoragePool, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionRpo = (string) content.GetValueForProperty("OverrideRestrictionRpo",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideRestrictionRpo, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingBackupDestination = (bool?) content.GetValueForProperty("OverrideInheritSettingBackupDestination",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingBackupDestination, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingRpo = (bool?) content.GetValueForProperty("OverrideInheritSettingRpo",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingRpo, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingBackupContent = (bool?) content.GetValueForProperty("OverrideInheritSettingBackupContent",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).OverrideInheritSettingBackupContent, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SettingFileSearch = (Commvault.Powershell.Models.IPlanFileSearch) content.GetValueForProperty("SettingFileSearch",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SettingFileSearch, Commvault.Powershell.Models.PlanFileSearchTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SettingEnableAdvancedView = (bool?) content.GetValueForProperty("SettingEnableAdvancedView",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SettingEnableAdvancedView, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WindowNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("WindowNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WindowNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WindowNumberOfDataReaderCount = (long?) content.GetValueForProperty("WindowNumberOfDataReaderCount",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).WindowNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).UnixNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("UnixNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).UnixNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).UnixNumberOfDataReaderCount = (long?) content.GetValueForProperty("UnixNumberOfDataReaderCount",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).UnixNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).MacNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("MacNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).MacNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).MacNumberOfDataReaderCount = (long?) content.GetValueForProperty("MacNumberOfDataReaderCount",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).MacNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupFrequencySchedules = (Commvault.Powershell.Models.IPlanSchedule[]) content.GetValueForProperty("BackupFrequencySchedules",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupFrequencySchedules, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IPlanSchedule>(__y, Commvault.Powershell.Models.PlanScheduleTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupFrequencyOperationType = (string) content.GetValueForProperty("BackupFrequencyOperationType",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupFrequencyOperationType, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaUseSystemDefaultSla = (bool?) content.GetValueForProperty("SlaUseSystemDefaultSla",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaUseSystemDefaultSla, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaPeriod = (long?) content.GetValueForProperty("SlaPeriod",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaPeriod, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaExcludeFromSla = (bool?) content.GetValueForProperty("SlaExcludeFromSla",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaExcludeFromSla, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaEnableAfterDelay = (long?) content.GetValueForProperty("SlaEnableAfterDelay",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaEnableAfterDelay, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaExclusionReason = (string) content.GetValueForProperty("SlaExclusionReason",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).SlaExclusionReason, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyScheduleFrequencyType = (string) content.GetValueForProperty("BackupCopyFrequencyScheduleFrequencyType",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyScheduleFrequencyType, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequency = (long?) content.GetValueForProperty("BackupCopyFrequency",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequency, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyWeeklyDays = (string[]) content.GetValueForProperty("BackupCopyFrequencyWeeklyDays",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyWeeklyDays, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyDayOfMonth = (long?) content.GetValueForProperty("BackupCopyFrequencyDayOfMonth",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyDayOfMonth, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyWeekOfMonth = (string) content.GetValueForProperty("BackupCopyFrequencyWeekOfMonth",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyWeekOfMonth, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyDayOfWeek = (string) content.GetValueForProperty("BackupCopyFrequencyDayOfWeek",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyDayOfWeek, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyMonthOfYear = (string) content.GetValueForProperty("BackupCopyFrequencyMonthOfYear",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyMonthOfYear, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyStartTime = (long?) content.GetValueForProperty("BackupCopyFrequencyStartTime",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).BackupCopyFrequencyStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchEnabled = (bool?) content.GetValueForProperty("FileSearchEnabled",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchStatus = (string) content.GetValueForProperty("FileSearchStatus",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchStatus, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchStatusMessage = (string) content.GetValueForProperty("FileSearchStatusMessage",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchStatusMessage, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchErrors = (Commvault.Powershell.Models.IPlanFileSearchSetupError[]) content.GetValueForProperty("FileSearchErrors",((Commvault.Powershell.Models.IUpdateServerPlanInternal)this).FileSearchErrors, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IPlanFileSearchSetupError>(__y, Commvault.Powershell.Models.PlanFileSearchSetupErrorTypeConverter.ConvertFrom));
            AfterDeserializePSObject(content);
        }
    }
    [System.ComponentModel.TypeConverter(typeof(UpdateServerPlanTypeConverter))]
    public partial interface IUpdateServerPlan

    {

    }
}