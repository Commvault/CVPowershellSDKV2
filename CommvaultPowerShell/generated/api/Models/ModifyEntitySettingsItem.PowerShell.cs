// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    /// <summary>
    /// Id and Type of the entity is required in entity property to which the entity setting is to be applied. Type of entity
    /// can be Server or Server group.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(ModifyEntitySettingsItemTypeConverter))]
    public partial class ModifyEntitySettingsItem
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.ModifyEntitySettingsItem"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Commvault.Powershell.Models.IModifyEntitySettingsItem" />.
        /// </returns>
        public static Commvault.Powershell.Models.IModifyEntitySettingsItem DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new ModifyEntitySettingsItem(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.ModifyEntitySettingsItem"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Commvault.Powershell.Models.IModifyEntitySettingsItem" />.
        /// </returns>
        public static Commvault.Powershell.Models.IModifyEntitySettingsItem DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new ModifyEntitySettingsItem(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="ModifyEntitySettingsItem" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="ModifyEntitySettingsItem" /> model class.</returns>
        public static Commvault.Powershell.Models.IModifyEntitySettingsItem FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.ModifyEntitySettingsItem"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal ModifyEntitySettingsItem(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Entity"))
            {
                ((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).Entity = (Commvault.Powershell.Models.IIdType) content.GetValueForProperty("Entity",((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).Entity, Commvault.Powershell.Models.IdTypeTypeConverter.ConvertFrom);
            }
            if (content.Contains("Name"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Name = (string) content.GetValueForProperty("Name",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("Category"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Category = (string) content.GetValueForProperty("Category",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Category, global::System.Convert.ToString);
            }
            if (content.Contains("Type"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Type = (string) content.GetValueForProperty("Type",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Type, global::System.Convert.ToString);
            }
            if (content.Contains("NewValue"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).NewValue = (string) content.GetValueForProperty("NewValue",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).NewValue, global::System.Convert.ToString);
            }
            if (content.Contains("Comment"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Comment = (string) content.GetValueForProperty("Comment",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Comment, global::System.Convert.ToString);
            }
            if (content.Contains("Reset"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Reset = (bool?) content.GetValueForProperty("Reset",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Reset, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("EntityId"))
            {
                ((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).EntityId = (long?) content.GetValueForProperty("EntityId",((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).EntityId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("EntityType"))
            {
                ((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).EntityType = (string) content.GetValueForProperty("EntityType",((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).EntityType, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.ModifyEntitySettingsItem"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal ModifyEntitySettingsItem(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Entity"))
            {
                ((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).Entity = (Commvault.Powershell.Models.IIdType) content.GetValueForProperty("Entity",((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).Entity, Commvault.Powershell.Models.IdTypeTypeConverter.ConvertFrom);
            }
            if (content.Contains("Name"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Name = (string) content.GetValueForProperty("Name",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("Category"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Category = (string) content.GetValueForProperty("Category",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Category, global::System.Convert.ToString);
            }
            if (content.Contains("Type"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Type = (string) content.GetValueForProperty("Type",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Type, global::System.Convert.ToString);
            }
            if (content.Contains("NewValue"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).NewValue = (string) content.GetValueForProperty("NewValue",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).NewValue, global::System.Convert.ToString);
            }
            if (content.Contains("Comment"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Comment = (string) content.GetValueForProperty("Comment",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Comment, global::System.Convert.ToString);
            }
            if (content.Contains("Reset"))
            {
                ((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Reset = (bool?) content.GetValueForProperty("Reset",((Commvault.Powershell.Models.IModifyAdditionalSettingInternal)this).Reset, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("EntityId"))
            {
                ((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).EntityId = (long?) content.GetValueForProperty("EntityId",((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).EntityId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("EntityType"))
            {
                ((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).EntityType = (string) content.GetValueForProperty("EntityType",((Commvault.Powershell.Models.IModifyEntitySettingsItemInternal)this).EntityType, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Id and Type of the entity is required in entity property to which the entity setting is to be applied. Type of entity
    /// can be Server or Server group.
    [System.ComponentModel.TypeConverter(typeof(ModifyEntitySettingsItemTypeConverter))]
    public partial interface IModifyEntitySettingsItem

    {

    }
}