// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>CreatevmGroupReq</summary>
    public partial class CreatevmGroupReq :
        Commvault.Powershell.Models.ICreatevmGroupReq,
        Commvault.Powershell.Models.ICreatevmGroupReqInternal
    {

        /// <summary>Internal Acessors for Content</summary>
        Commvault.Powershell.Models.IVMContent Commvault.Powershell.Models.ICreatevmGroupReqInternal.Content { get => (this._content = this._content ?? new Commvault.Powershell.Models.VMContent()); set { {_content = value;} } }

        /// <summary>Internal Acessors for Hypervisor</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.ICreatevmGroupReqInternal.Hypervisor { get => (this._hypervisor = this._hypervisor ?? new Commvault.Powershell.Models.IdName()); set { {_hypervisor = value;} } }

        /// <summary>Internal Acessors for Meditech</summary>
        Commvault.Powershell.Models.IMeditechPropResp Commvault.Powershell.Models.ICreatevmGroupReqInternal.Meditech { get => (this._meditech = this._meditech ?? new Commvault.Powershell.Models.MeditechPropResp()); set { {_meditech = value;} } }

        /// <summary>Internal Acessors for MeditechUserAccount</summary>
        Commvault.Powershell.Models.IUserNamePassword Commvault.Powershell.Models.ICreatevmGroupReqInternal.MeditechUserAccount { get => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).UserAccount; set => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).UserAccount = value; }

        /// <summary>Internal Acessors for Plan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.ICreatevmGroupReqInternal.Plan { get => (this._plan = this._plan ?? new Commvault.Powershell.Models.IdName()); set { {_plan = value;} } }

        /// <summary>Internal Acessors for Storage</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.ICreatevmGroupReqInternal.Storage { get => (this._storage = this._storage ?? new Commvault.Powershell.Models.IdName()); set { {_storage = value;} } }

        /// <summary>Backing field for <see cref="Content" /> property.</summary>
        private Commvault.Powershell.Models.IVMContent _content;

        /// <summary>RuleContent</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IVMContent Content { get => (this._content = this._content ?? new Commvault.Powershell.Models.VMContent()); set => this._content = value; }

        /// <summary>
        /// True if content in vmgroup has to be overwritten, by default it will append the content
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ContentOverwrite { get => ((Commvault.Powershell.Models.IVMContentInternal)Content).Overwrite; set => ((Commvault.Powershell.Models.IVMContentInternal)Content).Overwrite = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IRuleGroupContent[] ContentRuleGroups { get => ((Commvault.Powershell.Models.IVMContentInternal)Content).RuleGroups; set => ((Commvault.Powershell.Models.IVMContentInternal)Content).RuleGroups = value ?? null /* arrayOf */; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IVirtualMachinecontent[] ContentVirtualMachines { get => ((Commvault.Powershell.Models.IVMContentInternal)Content).VirtualMachines; set => ((Commvault.Powershell.Models.IVMContentInternal)Content).VirtualMachines = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="EnableIntellisnap" /> property.</summary>
        private bool? _enableIntellisnap;

        /// <summary>True if Intellisnap has to be enabled</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? EnableIntellisnap { get => this._enableIntellisnap; set => this._enableIntellisnap = value; }

        /// <summary>Backing field for <see cref="Hypervisor" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _hypervisor;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Hypervisor { get => (this._hypervisor = this._hypervisor ?? new Commvault.Powershell.Models.IdName()); set => this._hypervisor = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? HypervisorId { get => ((Commvault.Powershell.Models.IIdNameInternal)Hypervisor).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Hypervisor).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string HypervisorName { get => ((Commvault.Powershell.Models.IIdNameInternal)Hypervisor).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Hypervisor).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Meditech" /> property.</summary>
        private Commvault.Powershell.Models.IMeditechPropResp _meditech;

        /// <summary>meditechPropResp</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IMeditechPropResp Meditech { get => (this._meditech = this._meditech ?? new Commvault.Powershell.Models.MeditechPropResp()); set => this._meditech = value; }

        /// <summary>Meditech Listener IP of FQDN name</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string MeditechListenerIP { get => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).ListenerIP; set => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).ListenerIP = value ?? null; }

        /// <summary>Meditech Listener Port</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? MeditechListenerPort { get => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).ListenerPort; set => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).ListenerPort = value ?? default(long); }

        /// <summary>MBF timeout (in seconds)</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? MeditechMbFtimeout { get => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).MbFtimeout; set => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).MbFtimeout = value ?? default(long); }

        /// <summary>Meditech system name</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string MeditechSystemName { get => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).SystemName; set => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).SystemName = value ?? null; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>subclient name</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Plan" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _plan;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Plan { get => (this._plan = this._plan ?? new Commvault.Powershell.Models.IdName()); set => this._plan = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? PlanId { get => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string PlanName { get => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Storage" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _storage;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Storage { get => (this._storage = this._storage ?? new Commvault.Powershell.Models.IdName()); set => this._storage = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? StorageId { get => ((Commvault.Powershell.Models.IIdNameInternal)Storage).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Storage).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string StorageName { get => ((Commvault.Powershell.Models.IIdNameInternal)Storage).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Storage).Name = value ?? null; }

        /// <summary>username to access the network path</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UserAccountName { get => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).UserAccountName; set => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).UserAccountName = value ?? null; }

        /// <summary>password to access the network path</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UserAccountPassword { get => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).UserAccountPassword; set => ((Commvault.Powershell.Models.IMeditechPropRespInternal)Meditech).UserAccountPassword = value ?? null; }

        /// <summary>Creates an new <see cref="CreatevmGroupReq" /> instance.</summary>
        public CreatevmGroupReq()
        {

        }
    }
    /// CreatevmGroupReq
    public partial interface ICreatevmGroupReq :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>
        /// True if content in vmgroup has to be overwritten, by default it will append the content
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"True if content in vmgroup has to be overwritten, by default it will append the content",
        SerializedName = @"overwrite",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ContentOverwrite { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"ruleGroups",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IRuleGroupContent) })]
        Commvault.Powershell.Models.IRuleGroupContent[] ContentRuleGroups { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"virtualMachines",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IVirtualMachinecontent) })]
        Commvault.Powershell.Models.IVirtualMachinecontent[] ContentVirtualMachines { get; set; }
        /// <summary>True if Intellisnap has to be enabled</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"True if Intellisnap has to be  enabled",
        SerializedName = @"enableIntellisnap",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableIntellisnap { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? HypervisorId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string HypervisorName { get; set; }
        /// <summary>Meditech Listener IP of FQDN name</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Meditech Listener IP of FQDN name",
        SerializedName = @"listenerIP",
        PossibleTypes = new [] { typeof(string) })]
        string MeditechListenerIP { get; set; }
        /// <summary>Meditech Listener Port</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Meditech Listener Port",
        SerializedName = @"listenerPort",
        PossibleTypes = new [] { typeof(long) })]
        long? MeditechListenerPort { get; set; }
        /// <summary>MBF timeout (in seconds)</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"MBF timeout (in seconds)",
        SerializedName = @"MBFtimeout",
        PossibleTypes = new [] { typeof(long) })]
        long? MeditechMbFtimeout { get; set; }
        /// <summary>Meditech system name</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Meditech system name",
        SerializedName = @"systemName",
        PossibleTypes = new [] { typeof(string) })]
        string MeditechSystemName { get; set; }
        /// <summary>subclient name</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"subclient name ",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? PlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string PlanName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? StorageId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string StorageName { get; set; }
        /// <summary>username to access the network path</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"username to access the network path",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string UserAccountName { get; set; }
        /// <summary>password to access the network path</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"password to access the network path",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string UserAccountPassword { get; set; }

    }
    /// CreatevmGroupReq
    internal partial interface ICreatevmGroupReqInternal

    {
        /// <summary>RuleContent</summary>
        Commvault.Powershell.Models.IVMContent Content { get; set; }
        /// <summary>
        /// True if content in vmgroup has to be overwritten, by default it will append the content
        /// </summary>
        bool? ContentOverwrite { get; set; }

        Commvault.Powershell.Models.IRuleGroupContent[] ContentRuleGroups { get; set; }

        Commvault.Powershell.Models.IVirtualMachinecontent[] ContentVirtualMachines { get; set; }
        /// <summary>True if Intellisnap has to be enabled</summary>
        bool? EnableIntellisnap { get; set; }

        Commvault.Powershell.Models.IIdName Hypervisor { get; set; }

        long? HypervisorId { get; set; }

        string HypervisorName { get; set; }
        /// <summary>meditechPropResp</summary>
        Commvault.Powershell.Models.IMeditechPropResp Meditech { get; set; }
        /// <summary>Meditech Listener IP of FQDN name</summary>
        string MeditechListenerIP { get; set; }
        /// <summary>Meditech Listener Port</summary>
        long? MeditechListenerPort { get; set; }
        /// <summary>MBF timeout (in seconds)</summary>
        long? MeditechMbFtimeout { get; set; }
        /// <summary>Meditech system name</summary>
        string MeditechSystemName { get; set; }

        Commvault.Powershell.Models.IUserNamePassword MeditechUserAccount { get; set; }
        /// <summary>subclient name</summary>
        string Name { get; set; }

        Commvault.Powershell.Models.IIdName Plan { get; set; }

        long? PlanId { get; set; }

        string PlanName { get; set; }

        Commvault.Powershell.Models.IIdName Storage { get; set; }

        long? StorageId { get; set; }

        string StorageName { get; set; }
        /// <summary>username to access the network path</summary>
        string UserAccountName { get; set; }
        /// <summary>password to access the network path</summary>
        string UserAccountPassword { get; set; }

    }
}