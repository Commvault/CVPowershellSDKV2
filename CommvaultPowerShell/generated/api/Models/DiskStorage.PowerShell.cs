// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    [System.ComponentModel.TypeConverter(typeof(DiskStorageTypeConverter))]
    public partial class DiskStorage
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.DiskStorage"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IDiskStorage" />.</returns>
        public static Commvault.Powershell.Models.IDiskStorage DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new DiskStorage(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.DiskStorage"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IDiskStorage" />.</returns>
        public static Commvault.Powershell.Models.IDiskStorage DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new DiskStorage(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.DiskStorage"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal DiskStorage(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).General = (Commvault.Powershell.Models.IDiskStorageGeneralInfo) content.GetValueForProperty("General",((Commvault.Powershell.Models.IDiskStorageInternal)this).General, Commvault.Powershell.Models.DiskStorageGeneralInfoTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).Encryption = (Commvault.Powershell.Models.IEncryption) content.GetValueForProperty("Encryption",((Commvault.Powershell.Models.IDiskStorageInternal)this).Encryption, Commvault.Powershell.Models.EncryptionTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).Security = (Commvault.Powershell.Models.ISecurityAssoc) content.GetValueForProperty("Security",((Commvault.Powershell.Models.IDiskStorageInternal)this).Security, Commvault.Powershell.Models.SecurityAssocTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).Id = (long?) content.GetValueForProperty("Id",((Commvault.Powershell.Models.IDiskStorageInternal)this).Id, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).Name = (string) content.GetValueForProperty("Name",((Commvault.Powershell.Models.IDiskStorageInternal)this).Name, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).BackupLocations = (Commvault.Powershell.Models.IIdNameStatus[]) content.GetValueForProperty("BackupLocations",((Commvault.Powershell.Models.IDiskStorageInternal)this).BackupLocations, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdNameStatus>(__y, Commvault.Powershell.Models.IdNameStatusTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).AssociatedPlanList = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("AssociatedPlanList",((Commvault.Powershell.Models.IDiskStorageInternal)this).AssociatedPlanList, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionKeyLength = (long?) content.GetValueForProperty("EncryptionKeyLength",((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionKeyLength, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralCapacity = (long?) content.GetValueForProperty("GeneralCapacity",((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralCapacity, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralFreeSpace = (long?) content.GetValueForProperty("GeneralFreeSpace",((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralFreeSpace, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralSizeOnDisk = (long?) content.GetValueForProperty("GeneralSizeOnDisk",((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralSizeOnDisk, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralDedupeSavingsPercent = (long?) content.GetValueForProperty("GeneralDedupeSavingsPercent",((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralDedupeSavingsPercent, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionKeyProvider = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("EncryptionKeyProvider",((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionKeyProvider, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionEncrypt = (bool?) content.GetValueForProperty("EncryptionEncrypt",((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionEncrypt, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionCipher = (string) content.GetValueForProperty("EncryptionCipher",((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionCipher, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityUser = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SecurityUser",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityUser, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityUserGroup = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SecurityUserGroup",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityUserGroup, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityExternalUserGroup = (Commvault.Powershell.Models.IExternalUserGroup) content.GetValueForProperty("SecurityExternalUserGroup",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityExternalUserGroup, Commvault.Powershell.Models.ExternalUserGroupTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityRole = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SecurityRole",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityRole, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityIsCreatorAssociation = (bool?) content.GetValueForProperty("SecurityIsCreatorAssociation",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityIsCreatorAssociation, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityPermissionList = (Commvault.Powershell.Models.IPermissionResp[]) content.GetValueForProperty("SecurityPermissionList",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityPermissionList, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IPermissionResp>(__y, Commvault.Powershell.Models.PermissionRespTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupId = (long?) content.GetValueForProperty("ExternalUserGroupId",((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupName = (string) content.GetValueForProperty("ExternalUserGroupName",((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupProviderId = (long?) content.GetValueForProperty("ExternalUserGroupProviderId",((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupProviderId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupProviderName = (string) content.GetValueForProperty("ExternalUserGroupProviderName",((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupProviderName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).KeyProviderId = (long?) content.GetValueForProperty("KeyProviderId",((Commvault.Powershell.Models.IDiskStorageInternal)this).KeyProviderId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).KeyProviderName = (string) content.GetValueForProperty("KeyProviderName",((Commvault.Powershell.Models.IDiskStorageInternal)this).KeyProviderName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).UserId = (long?) content.GetValueForProperty("UserId",((Commvault.Powershell.Models.IDiskStorageInternal)this).UserId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).UserName = (string) content.GetValueForProperty("UserName",((Commvault.Powershell.Models.IDiskStorageInternal)this).UserName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).UserGroupId = (long?) content.GetValueForProperty("UserGroupId",((Commvault.Powershell.Models.IDiskStorageInternal)this).UserGroupId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).UserGroupName = (string) content.GetValueForProperty("UserGroupName",((Commvault.Powershell.Models.IDiskStorageInternal)this).UserGroupName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).RoleId = (long?) content.GetValueForProperty("RoleId",((Commvault.Powershell.Models.IDiskStorageInternal)this).RoleId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).RoleName = (string) content.GetValueForProperty("RoleName",((Commvault.Powershell.Models.IDiskStorageInternal)this).RoleName, global::System.Convert.ToString);
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.DiskStorage"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal DiskStorage(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).General = (Commvault.Powershell.Models.IDiskStorageGeneralInfo) content.GetValueForProperty("General",((Commvault.Powershell.Models.IDiskStorageInternal)this).General, Commvault.Powershell.Models.DiskStorageGeneralInfoTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).Encryption = (Commvault.Powershell.Models.IEncryption) content.GetValueForProperty("Encryption",((Commvault.Powershell.Models.IDiskStorageInternal)this).Encryption, Commvault.Powershell.Models.EncryptionTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).Security = (Commvault.Powershell.Models.ISecurityAssoc) content.GetValueForProperty("Security",((Commvault.Powershell.Models.IDiskStorageInternal)this).Security, Commvault.Powershell.Models.SecurityAssocTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).Id = (long?) content.GetValueForProperty("Id",((Commvault.Powershell.Models.IDiskStorageInternal)this).Id, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).Name = (string) content.GetValueForProperty("Name",((Commvault.Powershell.Models.IDiskStorageInternal)this).Name, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).BackupLocations = (Commvault.Powershell.Models.IIdNameStatus[]) content.GetValueForProperty("BackupLocations",((Commvault.Powershell.Models.IDiskStorageInternal)this).BackupLocations, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdNameStatus>(__y, Commvault.Powershell.Models.IdNameStatusTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).AssociatedPlanList = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("AssociatedPlanList",((Commvault.Powershell.Models.IDiskStorageInternal)this).AssociatedPlanList, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionKeyLength = (long?) content.GetValueForProperty("EncryptionKeyLength",((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionKeyLength, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralCapacity = (long?) content.GetValueForProperty("GeneralCapacity",((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralCapacity, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralFreeSpace = (long?) content.GetValueForProperty("GeneralFreeSpace",((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralFreeSpace, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralSizeOnDisk = (long?) content.GetValueForProperty("GeneralSizeOnDisk",((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralSizeOnDisk, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralDedupeSavingsPercent = (long?) content.GetValueForProperty("GeneralDedupeSavingsPercent",((Commvault.Powershell.Models.IDiskStorageInternal)this).GeneralDedupeSavingsPercent, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionKeyProvider = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("EncryptionKeyProvider",((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionKeyProvider, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionEncrypt = (bool?) content.GetValueForProperty("EncryptionEncrypt",((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionEncrypt, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionCipher = (string) content.GetValueForProperty("EncryptionCipher",((Commvault.Powershell.Models.IDiskStorageInternal)this).EncryptionCipher, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityUser = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SecurityUser",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityUser, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityUserGroup = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SecurityUserGroup",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityUserGroup, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityExternalUserGroup = (Commvault.Powershell.Models.IExternalUserGroup) content.GetValueForProperty("SecurityExternalUserGroup",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityExternalUserGroup, Commvault.Powershell.Models.ExternalUserGroupTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityRole = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SecurityRole",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityRole, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityIsCreatorAssociation = (bool?) content.GetValueForProperty("SecurityIsCreatorAssociation",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityIsCreatorAssociation, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityPermissionList = (Commvault.Powershell.Models.IPermissionResp[]) content.GetValueForProperty("SecurityPermissionList",((Commvault.Powershell.Models.IDiskStorageInternal)this).SecurityPermissionList, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IPermissionResp>(__y, Commvault.Powershell.Models.PermissionRespTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupId = (long?) content.GetValueForProperty("ExternalUserGroupId",((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupName = (string) content.GetValueForProperty("ExternalUserGroupName",((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupProviderId = (long?) content.GetValueForProperty("ExternalUserGroupProviderId",((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupProviderId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupProviderName = (string) content.GetValueForProperty("ExternalUserGroupProviderName",((Commvault.Powershell.Models.IDiskStorageInternal)this).ExternalUserGroupProviderName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).KeyProviderId = (long?) content.GetValueForProperty("KeyProviderId",((Commvault.Powershell.Models.IDiskStorageInternal)this).KeyProviderId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).KeyProviderName = (string) content.GetValueForProperty("KeyProviderName",((Commvault.Powershell.Models.IDiskStorageInternal)this).KeyProviderName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).UserId = (long?) content.GetValueForProperty("UserId",((Commvault.Powershell.Models.IDiskStorageInternal)this).UserId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).UserName = (string) content.GetValueForProperty("UserName",((Commvault.Powershell.Models.IDiskStorageInternal)this).UserName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).UserGroupId = (long?) content.GetValueForProperty("UserGroupId",((Commvault.Powershell.Models.IDiskStorageInternal)this).UserGroupId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).UserGroupName = (string) content.GetValueForProperty("UserGroupName",((Commvault.Powershell.Models.IDiskStorageInternal)this).UserGroupName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).RoleId = (long?) content.GetValueForProperty("RoleId",((Commvault.Powershell.Models.IDiskStorageInternal)this).RoleId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IDiskStorageInternal)this).RoleName = (string) content.GetValueForProperty("RoleName",((Commvault.Powershell.Models.IDiskStorageInternal)this).RoleName, global::System.Convert.ToString);
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="DiskStorage" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="className" /> model class.</returns>
        public static Commvault.Powershell.Models.IDiskStorage FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    [System.ComponentModel.TypeConverter(typeof(DiskStorageTypeConverter))]
    public partial interface IDiskStorage

    {

    }
}