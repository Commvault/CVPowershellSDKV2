// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// Source Client - The server where the database was backed up from. Source instance - The backed up database instance. Mounted
    /// host - The server where the DB snapshot has been mounted to bring up the clone. Target instance - The DB instance name
    /// which was clone target.
    /// </summary>
    public partial class InstantClonesSummary :
        Commvault.Powershell.Models.IInstantClonesSummary,
        Commvault.Powershell.Models.IInstantClonesSummaryInternal
    {

        /// <summary>Backing field for <see cref="CloneJobId" /> property.</summary>
        private long? _cloneJobId;

        /// <summary>Job id for clone operation</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? CloneJobId { get => this._cloneJobId; set => this._cloneJobId = value; }

        /// <summary>Backing field for <see cref="Commcell" /> property.</summary>
        private Commvault.Powershell.Models.ICommcellInfo _commcell;

        /// <summary>CommcellInfo</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ICommcellInfo Commcell { get => (this._commcell = this._commcell ?? new Commvault.Powershell.Models.CommcellInfo()); set => this._commcell = value; }

        /// <summary>Name of the commcell the entity belongs to.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string CommcellName { get => ((Commvault.Powershell.Models.ICommcellInfoInternal)Commcell).Name; set => ((Commvault.Powershell.Models.ICommcellInfoInternal)Commcell).Name = value ?? null; }

        /// <summary>Internal Acessors for Commcell</summary>
        Commvault.Powershell.Models.ICommcellInfo Commvault.Powershell.Models.IInstantClonesSummaryInternal.Commcell { get => (this._commcell = this._commcell ?? new Commvault.Powershell.Models.CommcellInfo()); set { {_commcell = value;} } }

        /// <summary>Internal Acessors for MountedHost</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IInstantClonesSummaryInternal.MountedHost { get => (this._mountedHost = this._mountedHost ?? new Commvault.Powershell.Models.IdName()); set { {_mountedHost = value;} } }

        /// <summary>Internal Acessors for SourceClient</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IInstantClonesSummaryInternal.SourceClient { get => (this._sourceClient = this._sourceClient ?? new Commvault.Powershell.Models.IdName()); set { {_sourceClient = value;} } }

        /// <summary>Internal Acessors for SourceInstance</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IInstantClonesSummaryInternal.SourceInstance { get => (this._sourceInstance = this._sourceInstance ?? new Commvault.Powershell.Models.IdName()); set { {_sourceInstance = value;} } }

        /// <summary>Internal Acessors for TargetInstance</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IInstantClonesSummaryInternal.TargetInstance { get => (this._targetInstance = this._targetInstance ?? new Commvault.Powershell.Models.IdName()); set { {_targetInstance = value;} } }

        /// <summary>Backing field for <see cref="CreationTime" /> property.</summary>
        private long? _creationTime;

        /// <summary>
        /// The time when the database clone was created. The time is provided in unix time format.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? CreationTime { get => this._creationTime; set => this._creationTime = value; }

        /// <summary>Backing field for <see cref="DatabaseAsOfTime" /> property.</summary>
        private long? _databaseAsOfTime;

        /// <summary>
        /// The Point in time up to which the database has been recovered using the backups. The time is provided in unix time format.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? DatabaseAsOfTime { get => this._databaseAsOfTime; set => this._databaseAsOfTime = value; }

        /// <summary>Backing field for <see cref="ExpirationDate" /> property.</summary>
        private long? _expirationDate;

        /// <summary>
        /// The time till which the clone is kept active and will get cleaned up automatically after that. The time is provided in
        /// unix time format.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? ExpirationDate { get => this._expirationDate; set => this._expirationDate = value; }

        /// <summary>Backing field for <see cref="MountedHost" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _mountedHost;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName MountedHost { get => (this._mountedHost = this._mountedHost ?? new Commvault.Powershell.Models.IdName()); set => this._mountedHost = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? MountedHostId { get => ((Commvault.Powershell.Models.IIdNameInternal)MountedHost).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)MountedHost).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string MountedHostName { get => ((Commvault.Powershell.Models.IIdNameInternal)MountedHost).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)MountedHost).Name = value ?? null; }

        /// <summary>Backing field for <see cref="SourceClient" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _sourceClient;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName SourceClient { get => (this._sourceClient = this._sourceClient ?? new Commvault.Powershell.Models.IdName()); set => this._sourceClient = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SourceClientId { get => ((Commvault.Powershell.Models.IIdNameInternal)SourceClient).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)SourceClient).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SourceClientName { get => ((Commvault.Powershell.Models.IIdNameInternal)SourceClient).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)SourceClient).Name = value ?? null; }

        /// <summary>Backing field for <see cref="SourceInstance" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _sourceInstance;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName SourceInstance { get => (this._sourceInstance = this._sourceInstance ?? new Commvault.Powershell.Models.IdName()); set => this._sourceInstance = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SourceInstanceId { get => ((Commvault.Powershell.Models.IIdNameInternal)SourceInstance).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)SourceInstance).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SourceInstanceName { get => ((Commvault.Powershell.Models.IIdNameInternal)SourceInstance).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)SourceInstance).Name = value ?? null; }

        /// <summary>Backing field for <see cref="SqlRecoveryId" /> property.</summary>
        private long? _sqlRecoveryId;

        /// <summary>Id of sql recovery point for SQL Agent</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? SqlRecoveryId { get => this._sqlRecoveryId; set => this._sqlRecoveryId = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>Status of instant clone</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="TargetInstance" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _targetInstance;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName TargetInstance { get => (this._targetInstance = this._targetInstance ?? new Commvault.Powershell.Models.IdName()); set => this._targetInstance = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? TargetInstanceId { get => ((Commvault.Powershell.Models.IIdNameInternal)TargetInstance).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)TargetInstance).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string TargetInstanceName { get => ((Commvault.Powershell.Models.IIdNameInternal)TargetInstance).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)TargetInstance).Name = value ?? null; }

        /// <summary>Creates an new <see cref="InstantClonesSummary" /> instance.</summary>
        public InstantClonesSummary()
        {

        }
    }
    /// Source Client - The server where the database was backed up from. Source instance - The backed up database instance. Mounted
    /// host - The server where the DB snapshot has been mounted to bring up the clone. Target instance - The DB instance name
    /// which was clone target.
    public partial interface IInstantClonesSummary :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Job id for clone operation</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Job id for clone operation",
        SerializedName = @"cloneJobId",
        PossibleTypes = new [] { typeof(long) })]
        long? CloneJobId { get; set; }
        /// <summary>Name of the commcell the entity belongs to.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the commcell the entity belongs to.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CommcellName { get; set; }
        /// <summary>
        /// The time when the database clone was created. The time is provided in unix time format.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time when the database clone was created. The time is provided in unix time format.",
        SerializedName = @"creationTime",
        PossibleTypes = new [] { typeof(long) })]
        long? CreationTime { get; set; }
        /// <summary>
        /// The Point in time up to which the database has been recovered using the backups. The time is provided in unix time format.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Point in time up to which the database has been recovered using the backups. The time is provided in unix time format.",
        SerializedName = @"databaseAsOfTime",
        PossibleTypes = new [] { typeof(long) })]
        long? DatabaseAsOfTime { get; set; }
        /// <summary>
        /// The time till which the clone is kept active and will get cleaned up automatically after that. The time is provided in
        /// unix time format.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time till which the clone is kept active and will get cleaned up automatically after that. The time is provided in unix time format.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(long) })]
        long? ExpirationDate { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? MountedHostId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string MountedHostName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? SourceClientId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SourceClientName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? SourceInstanceId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SourceInstanceName { get; set; }
        /// <summary>Id of sql recovery point for SQL Agent</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Id of sql recovery point for SQL Agent",
        SerializedName = @"sqlRecoveryId",
        PossibleTypes = new [] { typeof(long) })]
        long? SqlRecoveryId { get; set; }
        /// <summary>Status of instant clone</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Status of instant clone",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string Status { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? TargetInstanceId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string TargetInstanceName { get; set; }

    }
    /// Source Client - The server where the database was backed up from. Source instance - The backed up database instance. Mounted
    /// host - The server where the DB snapshot has been mounted to bring up the clone. Target instance - The DB instance name
    /// which was clone target.
    internal partial interface IInstantClonesSummaryInternal

    {
        /// <summary>Job id for clone operation</summary>
        long? CloneJobId { get; set; }
        /// <summary>CommcellInfo</summary>
        Commvault.Powershell.Models.ICommcellInfo Commcell { get; set; }
        /// <summary>Name of the commcell the entity belongs to.</summary>
        string CommcellName { get; set; }
        /// <summary>
        /// The time when the database clone was created. The time is provided in unix time format.
        /// </summary>
        long? CreationTime { get; set; }
        /// <summary>
        /// The Point in time up to which the database has been recovered using the backups. The time is provided in unix time format.
        /// </summary>
        long? DatabaseAsOfTime { get; set; }
        /// <summary>
        /// The time till which the clone is kept active and will get cleaned up automatically after that. The time is provided in
        /// unix time format.
        /// </summary>
        long? ExpirationDate { get; set; }

        Commvault.Powershell.Models.IIdName MountedHost { get; set; }

        long? MountedHostId { get; set; }

        string MountedHostName { get; set; }

        Commvault.Powershell.Models.IIdName SourceClient { get; set; }

        long? SourceClientId { get; set; }

        string SourceClientName { get; set; }

        Commvault.Powershell.Models.IIdName SourceInstance { get; set; }

        long? SourceInstanceId { get; set; }

        string SourceInstanceName { get; set; }
        /// <summary>Id of sql recovery point for SQL Agent</summary>
        long? SqlRecoveryId { get; set; }
        /// <summary>Status of instant clone</summary>
        string Status { get; set; }

        Commvault.Powershell.Models.IIdName TargetInstance { get; set; }

        long? TargetInstanceId { get; set; }

        string TargetInstanceName { get; set; }

    }
}