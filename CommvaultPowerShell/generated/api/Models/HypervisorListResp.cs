// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class HypervisorListResp :
        Commvault.Powershell.Models.IHypervisorListResp,
        Commvault.Powershell.Models.IHypervisorListRespInternal
    {

        /// <summary>Backing field for <see cref="ClientActivityControl" /> property.</summary>
        private Commvault.Powershell.Models.IActivityControlOptionsProp _clientActivityControl;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IActivityControlOptionsProp ClientActivityControl { get => (this._clientActivityControl = this._clientActivityControl ?? new Commvault.Powershell.Models.ActivityControlOptionsProp()); set => this._clientActivityControl = value; }

        /// <summary>denotes the activity type being considered</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ClientActivityControlActivityType { get => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).ActivityType; set => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).ActivityType = value ?? null; }

        /// <summary>True if the activity type is enabled</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ClientActivityControlEnableActivityType { get => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).EnableActivityType; set => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).EnableActivityType = value ?? default(bool); }

        /// <summary>True if the activity will be enabled after a delay time interval</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? ClientActivityControlEnableAfterADelay { get => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).EnableAfterADelay; set => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).EnableAfterADelay = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Commcell" /> property.</summary>
        private Commvault.Powershell.Models.ICommcellInfo _commcell;

        /// <summary>CommcellInfo</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ICommcellInfo Commcell { get => (this._commcell = this._commcell ?? new Commvault.Powershell.Models.CommcellInfo()); set => this._commcell = value; }

        /// <summary>Name of the commcell the entity belongs to.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string CommcellName { get => ((Commvault.Powershell.Models.ICommcellInfoInternal)Commcell).Name; set => ((Commvault.Powershell.Models.ICommcellInfoInternal)Commcell).Name = value ?? null; }

        /// <summary>Internal Acessors for ClientActivityControl</summary>
        Commvault.Powershell.Models.IActivityControlOptionsProp Commvault.Powershell.Models.IHypervisorListRespInternal.ClientActivityControl { get => (this._clientActivityControl = this._clientActivityControl ?? new Commvault.Powershell.Models.ActivityControlOptionsProp()); set { {_clientActivityControl = value;} } }

        /// <summary>Internal Acessors for ClientActivityControlDelayTime</summary>
        Commvault.Powershell.Models.IActivityControlTileDelayTime Commvault.Powershell.Models.IHypervisorListRespInternal.ClientActivityControlDelayTime { get => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).DelayTime; set => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).DelayTime = value; }

        /// <summary>Internal Acessors for Commcell</summary>
        Commvault.Powershell.Models.ICommcellInfo Commvault.Powershell.Models.IHypervisorListRespInternal.Commcell { get => (this._commcell = this._commcell ?? new Commvault.Powershell.Models.CommcellInfo()); set { {_commcell = value;} } }

        /// <summary>Internal Acessors for DelayTimeZone</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IHypervisorListRespInternal.DelayTimeZone { get => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).DelayTimeZone; set => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).DelayTimeZone = value; }

        /// <summary>Internal Acessors for Instance</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IHypervisorListRespInternal.Instance { get => (this._instance = this._instance ?? new Commvault.Powershell.Models.IdName()); set { {_instance = value;} } }

        /// <summary>Internal Acessors for ManageSnapshot</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IHypervisorListRespInternal.ManageSnapshot { get => (this._manageSnapshot = this._manageSnapshot ?? new Commvault.Powershell.Models.IdName()); set { {_manageSnapshot = value;} } }

        /// <summary>delay time in unix timestamp</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? DelayTime { get => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).DelayTimeTime; set => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).DelayTimeTime = value ?? default(long); }

        /// <summary>actual delay time value in string format according to the timezone</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string DelayTimeValue { get => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).DelayTimeValue; set => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).DelayTimeValue = value ?? null; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>This gives the name of the Hypervisor as it shown on the admin console or GUI.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="HostName" /> property.</summary>
        private string _hostName;

        /// <summary>This give the host name of the Hypervisor.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string HostName { get => this._hostName; set => this._hostName = value; }

        /// <summary>Backing field for <see cref="HypervisorType" /> property.</summary>
        private string _hypervisorType;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string HypervisorType { get => this._hypervisorType; set => this._hypervisorType = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private long? _id;

        /// <summary>This gives the id of the Hypervisor.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Instance" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _instance;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Instance { get => (this._instance = this._instance ?? new Commvault.Powershell.Models.IdName()); set => this._instance = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? InstanceId { get => ((Commvault.Powershell.Models.IIdNameInternal)Instance).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Instance).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string InstanceName { get => ((Commvault.Powershell.Models.IIdNameInternal)Instance).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Instance).Name = value ?? null; }

        /// <summary>Backing field for <see cref="IsManagedIdentity" /> property.</summary>
        private bool? _isManagedIdentity;

        /// <summary>True if hypervisor is configured using Azure Managed Service Identity.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? IsManagedIdentity { get => this._isManagedIdentity; set => this._isManagedIdentity = value; }

        /// <summary>Backing field for <see cref="ManageSnapshot" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _manageSnapshot;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName ManageSnapshot { get => (this._manageSnapshot = this._manageSnapshot ?? new Commvault.Powershell.Models.IdName()); set => this._manageSnapshot = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? ManageSnapshotId { get => ((Commvault.Powershell.Models.IIdNameInternal)ManageSnapshot).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)ManageSnapshot).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ManageSnapshotName { get => ((Commvault.Powershell.Models.IIdNameInternal)ManageSnapshot).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)ManageSnapshot).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>This give the name of the Hypervisor.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>RetireClientPhase</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="Tags" /> property.</summary>
        private System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameValue> _tags;

        /// <summary>Array of all the tags associated with hypervisor.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameValue> Tags { get => this._tags; set => this._tags = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? TimeZoneId { get => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).TimeZoneId; set => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).TimeZoneId = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string TimeZoneName { get => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).TimeZoneName; set => ((Commvault.Powershell.Models.IActivityControlOptionsPropInternal)ClientActivityControl).TimeZoneName = value ?? null; }

        /// <summary>Backing field for <see cref="UseHostedInfrastructure" /> property.</summary>
        private bool? _useHostedInfrastructure;

        /// <summary>Use Metallic hosted infrastructure</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? UseHostedInfrastructure { get => this._useHostedInfrastructure; set => this._useHostedInfrastructure = value; }

        /// <summary>Backing field for <see cref="Version" /> property.</summary>
        private string _version;

        /// <summary>VMware Vcenter Version</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Version { get => this._version; set => this._version = value; }

        /// <summary>Creates an new <see cref="HypervisorListResp" /> instance.</summary>
        public HypervisorListResp()
        {

        }
    }
    public partial interface IHypervisorListResp :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>denotes the activity type being considered</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"denotes the activity type being considered",
        SerializedName = @"activityType",
        PossibleTypes = new [] { typeof(string) })]
        string ClientActivityControlActivityType { get; set; }
        /// <summary>True if the activity type is enabled</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"True if the activity type is enabled",
        SerializedName = @"enableActivityType",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ClientActivityControlEnableActivityType { get; set; }
        /// <summary>True if the activity will be enabled after a delay time interval</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"True if the activity will be enabled after a delay time interval",
        SerializedName = @"enableAfterADelay",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ClientActivityControlEnableAfterADelay { get; set; }
        /// <summary>Name of the commcell the entity belongs to.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the commcell the entity belongs to.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CommcellName { get; set; }
        /// <summary>delay time in unix timestamp</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"delay time in unix timestamp",
        SerializedName = @"time",
        PossibleTypes = new [] { typeof(long) })]
        long? DelayTime { get; set; }
        /// <summary>actual delay time value in string format according to the timezone</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"actual delay time value in string format according to the timezone",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(string) })]
        string DelayTimeValue { get; set; }
        /// <summary>This gives the name of the Hypervisor as it shown on the admin console or GUI.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This gives the name of the Hypervisor as it shown on the admin console or GUI.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>This give the host name of the Hypervisor.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This give the host name of the Hypervisor.",
        SerializedName = @"hostName",
        PossibleTypes = new [] { typeof(string) })]
        string HostName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"HypervisorType",
        PossibleTypes = new [] { typeof(string) })]
        string HypervisorType { get; set; }
        /// <summary>This gives the id of the Hypervisor.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This gives the id of the Hypervisor.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? Id { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? InstanceId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string InstanceName { get; set; }
        /// <summary>True if hypervisor is configured using Azure Managed Service Identity.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"True if hypervisor is configured using Azure Managed Service Identity.",
        SerializedName = @"isManagedIdentity",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsManagedIdentity { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? ManageSnapshotId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ManageSnapshotName { get; set; }
        /// <summary>This give the name of the Hypervisor.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This give the name of the Hypervisor.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>RetireClientPhase</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"RetireClientPhase",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string Status { get; set; }
        /// <summary>Array of all the tags associated with hypervisor.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Array of all the tags associated with hypervisor.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdNameValue) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameValue> Tags { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? TimeZoneId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string TimeZoneName { get; set; }
        /// <summary>Use Metallic hosted infrastructure</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Use Metallic hosted infrastructure",
        SerializedName = @"useHostedInfrastructure",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseHostedInfrastructure { get; set; }
        /// <summary>VMware Vcenter Version</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"VMware Vcenter Version",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get; set; }

    }
    internal partial interface IHypervisorListRespInternal

    {
        Commvault.Powershell.Models.IActivityControlOptionsProp ClientActivityControl { get; set; }
        /// <summary>denotes the activity type being considered</summary>
        string ClientActivityControlActivityType { get; set; }
        /// <summary>ActivityControlTileDelayTime</summary>
        Commvault.Powershell.Models.IActivityControlTileDelayTime ClientActivityControlDelayTime { get; set; }
        /// <summary>True if the activity type is enabled</summary>
        bool? ClientActivityControlEnableActivityType { get; set; }
        /// <summary>True if the activity will be enabled after a delay time interval</summary>
        bool? ClientActivityControlEnableAfterADelay { get; set; }
        /// <summary>CommcellInfo</summary>
        Commvault.Powershell.Models.ICommcellInfo Commcell { get; set; }
        /// <summary>Name of the commcell the entity belongs to.</summary>
        string CommcellName { get; set; }
        /// <summary>delay time in unix timestamp</summary>
        long? DelayTime { get; set; }
        /// <summary>actual delay time value in string format according to the timezone</summary>
        string DelayTimeValue { get; set; }

        Commvault.Powershell.Models.IIdName DelayTimeZone { get; set; }
        /// <summary>This gives the name of the Hypervisor as it shown on the admin console or GUI.</summary>
        string DisplayName { get; set; }
        /// <summary>This give the host name of the Hypervisor.</summary>
        string HostName { get; set; }

        string HypervisorType { get; set; }
        /// <summary>This gives the id of the Hypervisor.</summary>
        long? Id { get; set; }

        Commvault.Powershell.Models.IIdName Instance { get; set; }

        long? InstanceId { get; set; }

        string InstanceName { get; set; }
        /// <summary>True if hypervisor is configured using Azure Managed Service Identity.</summary>
        bool? IsManagedIdentity { get; set; }

        Commvault.Powershell.Models.IIdName ManageSnapshot { get; set; }

        long? ManageSnapshotId { get; set; }

        string ManageSnapshotName { get; set; }
        /// <summary>This give the name of the Hypervisor.</summary>
        string Name { get; set; }
        /// <summary>RetireClientPhase</summary>
        string Status { get; set; }
        /// <summary>Array of all the tags associated with hypervisor.</summary>
        System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameValue> Tags { get; set; }

        long? TimeZoneId { get; set; }

        string TimeZoneName { get; set; }
        /// <summary>Use Metallic hosted infrastructure</summary>
        bool? UseHostedInfrastructure { get; set; }
        /// <summary>VMware Vcenter Version</summary>
        string Version { get; set; }

    }
}