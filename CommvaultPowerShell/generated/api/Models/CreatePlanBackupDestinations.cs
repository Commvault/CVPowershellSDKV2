// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class CreatePlanBackupDestinations :
        Commvault.Powershell.Models.ICreatePlanBackupDestinations,
        Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal
    {

        /// <summary>Which type of action should be followed if backup copy falls behind</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyOptionAction { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionAction; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionAction = value ?? null; }

        /// <summary>Alert to throw when backup copy falls behind in hours</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyOptionAlertInHours { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionAlertInHours; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionAlertInHours = value ?? default(long); }

        /// <summary>
        /// Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default
        /// is LAST while adding new backup destination.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyOptionBackupFullToCopy { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionBackupFullToCopy; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionBackupFullToCopy = value ?? null; }

        /// <summary>Backup type to copy for backup copy operation</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyOptionBackupTypeToCopy { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionBackupTypeToCopy; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionBackupTypeToCopy = value ?? null; }

        /// <summary>Flag to enable backup copy fallen behind alert</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupCopyOptionEnableAlert { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionEnableAlert; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionEnableAlert = value ?? default(bool); }

        /// <summary>The allowable delay in days before a backup copy job is considered overdue</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyOptionSkipAfterThresholdDays { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionSkipAfterThresholdDays; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionSkipAfterThresholdDays = value ?? default(long); }

        /// <summary>
        /// Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap
        /// copy.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyOptionStartTime { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionStartTime; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptionStartTime = value ?? default(long); }

        /// <summary>Internal Acessors for Region</summary>
        Commvault.Powershell.Models.IIdNameGuid Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal.Region { get => (this._region = this._region ?? new Commvault.Powershell.Models.IdNameGuid()); set { {_region = value;} } }

        /// <summary>Internal Acessors for SnapshotOptionBackupCopyOptions</summary>
        Commvault.Powershell.Models.IBackupCopyOptions Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal.SnapshotOptionBackupCopyOptions { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptions; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyOptions = value; }

        /// <summary>Internal Acessors for SnapshotOptions</summary>
        Commvault.Powershell.Models.ICreatePlanSnapshotOptions Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal.SnapshotOptions { get => (this._snapshotOptions = this._snapshotOptions ?? new Commvault.Powershell.Models.CreatePlanSnapshotOptions()); set { {_snapshotOptions = value;} } }

        /// <summary>Backing field for <see cref="Destinations" /> property.</summary>
        private System.Collections.Generic.List<Commvault.Powershell.Models.ICreatePlanBackupDestination> _destinations;

        /// <summary>List of backup destinations to create</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.ICreatePlanBackupDestination> Destinations { get => this._destinations; set => this._destinations = value; }

        /// <summary>Backing field for <see cref="Region" /> property.</summary>
        private Commvault.Powershell.Models.IIdNameGuid _region;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdNameGuid Region { get => (this._region = this._region ?? new Commvault.Powershell.Models.IdNameGuid()); set => this._region = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string RegionGuid { get => ((Commvault.Powershell.Models.IIdNameGuidInternal)Region).Guid; set => ((Commvault.Powershell.Models.IIdNameGuidInternal)Region).Guid = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? RegionId { get => ((Commvault.Powershell.Models.IIdNameGuidInternal)Region).Id; set => ((Commvault.Powershell.Models.IIdNameGuidInternal)Region).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string RegionName { get => ((Commvault.Powershell.Models.IIdNameGuidInternal)Region).Name; set => ((Commvault.Powershell.Models.IIdNameGuidInternal)Region).Name = value ?? null; }

        /// <summary>Backup copy RPO in minutes</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SnapshotOptionBackupCopyRpoMins { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyRpoMins; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).BackupCopyRpoMins = value ?? default(long); }

        /// <summary>Flag to enable backup copy</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SnapshotOptionEnableBackupCopy { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).EnableBackupCopy; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).EnableBackupCopy = value ?? default(bool); }

        /// <summary>Flag to enable deferred snapshot cataloging</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? SnapshotOptionEnableSnapCatalog { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).EnableSnapCatalog; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).EnableSnapCatalog = value ?? default(bool); }

        /// <summary>
        /// Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not specified,
        /// this takes precedence.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SnapshotOptionRetentionPeriodDays { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).RetentionPeriodDays; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).RetentionPeriodDays = value ?? default(long); }

        /// <summary>
        /// Number of snap recovery points for default snap copy for retention. Can be specified instead of retention period in Days
        /// for default snap copy.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? SnapshotOptionSnapRecoveryPoints { get => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).SnapRecoveryPoints; set => ((Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal)SnapshotOptions).SnapRecoveryPoints = value ?? default(long); }

        /// <summary>Backing field for <see cref="SnapshotOptions" /> property.</summary>
        private Commvault.Powershell.Models.ICreatePlanSnapshotOptions _snapshotOptions;

        /// <summary>This feature applies only to File System Agents</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ICreatePlanSnapshotOptions SnapshotOptions { get => (this._snapshotOptions = this._snapshotOptions ?? new Commvault.Powershell.Models.CreatePlanSnapshotOptions()); set => this._snapshotOptions = value; }

        /// <summary>Creates an new <see cref="CreatePlanBackupDestinations" /> instance.</summary>
        public CreatePlanBackupDestinations()
        {

        }
    }
    public partial interface ICreatePlanBackupDestinations :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Which type of action should be followed if backup copy falls behind</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Which type of action should be followed if backup copy falls behind",
        SerializedName = @"action",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyOptionAction { get; set; }
        /// <summary>Alert to throw when backup copy falls behind in hours</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Alert to throw when backup copy falls behind in hours",
        SerializedName = @"alertInHours",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyOptionAlertInHours { get; set; }
        /// <summary>
        /// Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default
        /// is LAST while adding new backup destination.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default is LAST while adding new backup destination.",
        SerializedName = @"backupFullToCopy",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyOptionBackupFullToCopy { get; set; }
        /// <summary>Backup type to copy for backup copy operation</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Backup type to copy for backup copy operation",
        SerializedName = @"backupTypeToCopy",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyOptionBackupTypeToCopy { get; set; }
        /// <summary>Flag to enable backup copy fallen behind alert</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to enable backup copy fallen behind alert",
        SerializedName = @"enableAlert",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupCopyOptionEnableAlert { get; set; }
        /// <summary>The allowable delay in days before a backup copy job is considered overdue</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The allowable delay in days before a backup copy job is considered overdue",
        SerializedName = @"skipAfterThresholdDays",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyOptionSkipAfterThresholdDays { get; set; }
        /// <summary>
        /// Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap
        /// copy.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap copy.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyOptionStartTime { get; set; }
        /// <summary>List of backup destinations to create</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of backup destinations to create",
        SerializedName = @"destinations",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.ICreatePlanBackupDestination) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.ICreatePlanBackupDestination> Destinations { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"GUID",
        PossibleTypes = new [] { typeof(string) })]
        string RegionGuid { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? RegionId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string RegionName { get; set; }
        /// <summary>Backup copy RPO in minutes</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Backup copy RPO in minutes",
        SerializedName = @"backupCopyRPOMins",
        PossibleTypes = new [] { typeof(long) })]
        long? SnapshotOptionBackupCopyRpoMins { get; set; }
        /// <summary>Flag to enable backup copy</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to enable backup copy",
        SerializedName = @"enableBackupCopy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SnapshotOptionEnableBackupCopy { get; set; }
        /// <summary>Flag to enable deferred snapshot cataloging</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to enable deferred snapshot cataloging",
        SerializedName = @"enableSnapCatalog",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SnapshotOptionEnableSnapCatalog { get; set; }
        /// <summary>
        /// Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not specified,
        /// this takes precedence.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not specified, this takes precedence.",
        SerializedName = @"retentionPeriodDays",
        PossibleTypes = new [] { typeof(long) })]
        long? SnapshotOptionRetentionPeriodDays { get; set; }
        /// <summary>
        /// Number of snap recovery points for default snap copy for retention. Can be specified instead of retention period in Days
        /// for default snap copy.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of snap recovery points for default snap copy for retention. Can be specified instead of retention period in Days for default snap copy.",
        SerializedName = @"snapRecoveryPoints",
        PossibleTypes = new [] { typeof(long) })]
        long? SnapshotOptionSnapRecoveryPoints { get; set; }

    }
    internal partial interface ICreatePlanBackupDestinationsInternal

    {
        /// <summary>Which type of action should be followed if backup copy falls behind</summary>
        string BackupCopyOptionAction { get; set; }
        /// <summary>Alert to throw when backup copy falls behind in hours</summary>
        long? BackupCopyOptionAlertInHours { get; set; }
        /// <summary>
        /// Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default
        /// is LAST while adding new backup destination.
        /// </summary>
        string BackupCopyOptionBackupFullToCopy { get; set; }
        /// <summary>Backup type to copy for backup copy operation</summary>
        string BackupCopyOptionBackupTypeToCopy { get; set; }
        /// <summary>Flag to enable backup copy fallen behind alert</summary>
        bool? BackupCopyOptionEnableAlert { get; set; }
        /// <summary>The allowable delay in days before a backup copy job is considered overdue</summary>
        long? BackupCopyOptionSkipAfterThresholdDays { get; set; }
        /// <summary>
        /// Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap
        /// copy.
        /// </summary>
        long? BackupCopyOptionStartTime { get; set; }
        /// <summary>List of backup destinations to create</summary>
        System.Collections.Generic.List<Commvault.Powershell.Models.ICreatePlanBackupDestination> Destinations { get; set; }

        Commvault.Powershell.Models.IIdNameGuid Region { get; set; }

        string RegionGuid { get; set; }

        long? RegionId { get; set; }

        string RegionName { get; set; }
        /// <summary>Options for snap management with backup copy</summary>
        Commvault.Powershell.Models.IBackupCopyOptions SnapshotOptionBackupCopyOptions { get; set; }
        /// <summary>Backup copy RPO in minutes</summary>
        long? SnapshotOptionBackupCopyRpoMins { get; set; }
        /// <summary>Flag to enable backup copy</summary>
        bool? SnapshotOptionEnableBackupCopy { get; set; }
        /// <summary>Flag to enable deferred snapshot cataloging</summary>
        bool? SnapshotOptionEnableSnapCatalog { get; set; }
        /// <summary>
        /// Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not specified,
        /// this takes precedence.
        /// </summary>
        long? SnapshotOptionRetentionPeriodDays { get; set; }
        /// <summary>
        /// Number of snap recovery points for default snap copy for retention. Can be specified instead of retention period in Days
        /// for default snap copy.
        /// </summary>
        long? SnapshotOptionSnapRecoveryPoints { get; set; }
        /// <summary>This feature applies only to File System Agents</summary>
        Commvault.Powershell.Models.ICreatePlanSnapshotOptions SnapshotOptions { get; set; }

    }
}