// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// Source Client - The server where the database was backed up from. Source instance - The backed up database instance. Mounted
    /// host - The server where the DB snapshot has been mounted to bring up the clone. Target instance - The DB instance name
    /// which was clone target.
    /// </summary>
    public partial class InstantClonesSummary
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Commvault.Powershell.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json erialization has finished, allowing customization of the <see cref="Commvault.Powershell.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Commvault.Powershell.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Commvault.Powershell.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Commvault.Powershell.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Commvault.Powershell.Runtime.Json.JsonNode"/> into an instance of Commvault.Powershell.Models.IInstantClonesSummary.
        /// </summary>
        /// <param name="node">a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of Commvault.Powershell.Models.IInstantClonesSummary.</returns>
        public static Commvault.Powershell.Models.IInstantClonesSummary FromJson(Commvault.Powershell.Runtime.Json.JsonNode node)
        {
            return node is Commvault.Powershell.Runtime.Json.JsonObject json ? new InstantClonesSummary(json) : null;
        }

        /// <summary>
        /// Deserializes a Commvault.Powershell.Runtime.Json.JsonObject into a new instance of <see cref="InstantClonesSummary" />.
        /// </summary>
        /// <param name="json">A Commvault.Powershell.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal InstantClonesSummary(Commvault.Powershell.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_sourceClient = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonObject>("sourceClient"), out var __jsonSourceClient) ? Commvault.Powershell.Models.IdName.FromJson(__jsonSourceClient) : SourceClient;}
            {_sourceInstance = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonObject>("sourceInstance"), out var __jsonSourceInstance) ? Commvault.Powershell.Models.IdName.FromJson(__jsonSourceInstance) : SourceInstance;}
            {_mountedHost = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonObject>("mountedHost"), out var __jsonMountedHost) ? Commvault.Powershell.Models.IdName.FromJson(__jsonMountedHost) : MountedHost;}
            {_targetInstance = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonObject>("targetInstance"), out var __jsonTargetInstance) ? Commvault.Powershell.Models.IdName.FromJson(__jsonTargetInstance) : TargetInstance;}
            {_commcell = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonObject>("commcell"), out var __jsonCommcell) ? Commvault.Powershell.Models.CommcellInfo.FromJson(__jsonCommcell) : Commcell;}
            {_cloneJobId = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonNumber>("cloneJobId"), out var __jsonCloneJobId) ? (long?)__jsonCloneJobId : CloneJobId;}
            {_sqlRecoveryId = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonNumber>("sqlRecoveryId"), out var __jsonSqlRecoveryId) ? (long?)__jsonSqlRecoveryId : SqlRecoveryId;}
            {_databaseAsOfTime = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonNumber>("databaseAsOfTime"), out var __jsonDatabaseAsOfTime) ? (long?)__jsonDatabaseAsOfTime : DatabaseAsOfTime;}
            {_creationTime = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonNumber>("creationTime"), out var __jsonCreationTime) ? (long?)__jsonCreationTime : CreationTime;}
            {_expirationDate = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonNumber>("expirationDate"), out var __jsonExpirationDate) ? (long?)__jsonExpirationDate : ExpirationDate;}
            {_status = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonString>("status"), out var __jsonStatus) ? (string)__jsonStatus : (string)Status;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="InstantClonesSummary" /> into a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Commvault.Powershell.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Commvault.Powershell.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="InstantClonesSummary" /> as a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" />.
        /// </returns>
        public Commvault.Powershell.Runtime.Json.JsonNode ToJson(Commvault.Powershell.Runtime.Json.JsonObject container, Commvault.Powershell.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Commvault.Powershell.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._sourceClient ? (Commvault.Powershell.Runtime.Json.JsonNode) this._sourceClient.ToJson(null,serializationMode) : null, "sourceClient" ,container.Add );
            AddIf( null != this._sourceInstance ? (Commvault.Powershell.Runtime.Json.JsonNode) this._sourceInstance.ToJson(null,serializationMode) : null, "sourceInstance" ,container.Add );
            AddIf( null != this._mountedHost ? (Commvault.Powershell.Runtime.Json.JsonNode) this._mountedHost.ToJson(null,serializationMode) : null, "mountedHost" ,container.Add );
            AddIf( null != this._targetInstance ? (Commvault.Powershell.Runtime.Json.JsonNode) this._targetInstance.ToJson(null,serializationMode) : null, "targetInstance" ,container.Add );
            AddIf( null != this._commcell ? (Commvault.Powershell.Runtime.Json.JsonNode) this._commcell.ToJson(null,serializationMode) : null, "commcell" ,container.Add );
            AddIf( null != this._cloneJobId ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonNumber((long)this._cloneJobId) : null, "cloneJobId" ,container.Add );
            AddIf( null != this._sqlRecoveryId ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonNumber((long)this._sqlRecoveryId) : null, "sqlRecoveryId" ,container.Add );
            AddIf( null != this._databaseAsOfTime ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonNumber((long)this._databaseAsOfTime) : null, "databaseAsOfTime" ,container.Add );
            AddIf( null != this._creationTime ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonNumber((long)this._creationTime) : null, "creationTime" ,container.Add );
            AddIf( null != this._expirationDate ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonNumber((long)this._expirationDate) : null, "expirationDate" ,container.Add );
            AddIf( null != (((object)this._status)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(this._status.ToString()) : null, "status" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}