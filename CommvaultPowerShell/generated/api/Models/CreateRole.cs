// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Create a new role.</summary>
    public partial class CreateRole :
        Commvault.Powershell.Models.ICreateRole,
        Commvault.Powershell.Models.ICreateRoleInternal
    {

        /// <summary>Internal Acessors for GlobalConfigInfo</summary>
        Commvault.Powershell.Models.ICreateGlobalConfigInfo Commvault.Powershell.Models.ICreateRoleInternal.GlobalConfigInfo { get => (this._globalConfigInfo = this._globalConfigInfo ?? new Commvault.Powershell.Models.CreateGlobalConfigInfo()); set { {_globalConfigInfo = value;} } }

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private bool? _enabled;

        /// <summary>
        /// Used to determine if the role is enabled or disabled. If not provided, role will be enabled by default.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>Backing field for <see cref="GlobalConfigInfo" /> property.</summary>
        private Commvault.Powershell.Models.ICreateGlobalConfigInfo _globalConfigInfo;

        /// <summary>Only applicable to Global CommCells</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ICreateGlobalConfigInfo GlobalConfigInfo { get => (this._globalConfigInfo = this._globalConfigInfo ?? new Commvault.Powershell.Models.CreateGlobalConfigInfo()); set => this._globalConfigInfo = value; }

        /// <summary>
        /// Action that will be taken on the local entity that has the same name as the global entity that needs to be created
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoActionOnLocalEntity { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ActionOnLocalEntity; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ActionOnLocalEntity = value ?? null; }

        /// <summary>
        /// Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? GlobalConfigInfoApplyOnAllCommCells { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ApplyOnAllCommCells; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ApplyOnAllCommCells = value ?? default(bool); }

        /// <summary>List of Service CommCells where the global configuration should be applied</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IGlobalConfigCommcellInfo[] GlobalConfigInfoCommcells { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Commcells; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Commcells = value ?? null /* arrayOf */; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoName { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Name; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Name = value ?? null; }

        /// <summary>The entity level at which the config has to be applied.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoScope { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Scope; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Scope = value ?? null; }

        /// <summary>CommCellEntityCache filter query string using for filtering the scope</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoScopeFilterQuery { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ScopeFilterQuery; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ScopeFilterQuery = value ?? null; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the new role</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="PermissionList" /> property.</summary>
        private Commvault.Powershell.Models.IPermissions[] _permissionList;

        /// <summary>Used to provide the list of permissions associated with the role.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IPermissions[] PermissionList { get => this._permissionList; set => this._permissionList = value; }

        /// <summary>Backing field for <see cref="VisibleToAll" /> property.</summary>
        private bool? _visibleToAll;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? VisibleToAll { get => this._visibleToAll; set => this._visibleToAll = value; }

        /// <summary>Creates an new <see cref="CreateRole" /> instance.</summary>
        public CreateRole()
        {

        }
    }
    /// Create a new role.
    public partial interface ICreateRole :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Used to determine if the role is enabled or disabled. If not provided, role will be enabled by default.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Used to determine if the role is enabled or disabled. If not provided, role will be enabled by default.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }
        /// <summary>
        /// Action that will be taken on the local entity that has the same name as the global entity that needs to be created
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Action that will be taken on the local entity that has the same name as the global entity that needs to be created",
        SerializedName = @"actionOnLocalEntity",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoActionOnLocalEntity { get; set; }
        /// <summary>
        /// Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones",
        SerializedName = @"applyOnAllCommCells",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GlobalConfigInfoApplyOnAllCommCells { get; set; }
        /// <summary>List of Service CommCells where the global configuration should be applied</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of Service CommCells where the global configuration should be applied",
        SerializedName = @"commcells",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IGlobalConfigCommcellInfo) })]
        Commvault.Powershell.Models.IGlobalConfigCommcellInfo[] GlobalConfigInfoCommcells { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoName { get; set; }
        /// <summary>The entity level at which the config has to be applied.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The entity level at which the config has to be applied.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoScope { get; set; }
        /// <summary>CommCellEntityCache filter query string using for filtering the scope</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"CommCellEntityCache filter query string using for filtering the scope",
        SerializedName = @"scopeFilterQuery",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoScopeFilterQuery { get; set; }
        /// <summary>Name of the new role</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the new role",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Used to provide the list of permissions associated with the role.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Used to provide the list of permissions associated with the role.",
        SerializedName = @"permissionList",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IPermissions) })]
        Commvault.Powershell.Models.IPermissions[] PermissionList { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"visibleToAll",
        PossibleTypes = new [] { typeof(bool) })]
        bool? VisibleToAll { get; set; }

    }
    /// Create a new role.
    internal partial interface ICreateRoleInternal

    {
        /// <summary>
        /// Used to determine if the role is enabled or disabled. If not provided, role will be enabled by default.
        /// </summary>
        bool? Enabled { get; set; }
        /// <summary>Only applicable to Global CommCells</summary>
        Commvault.Powershell.Models.ICreateGlobalConfigInfo GlobalConfigInfo { get; set; }
        /// <summary>
        /// Action that will be taken on the local entity that has the same name as the global entity that needs to be created
        /// </summary>
        string GlobalConfigInfoActionOnLocalEntity { get; set; }
        /// <summary>
        /// Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones
        /// </summary>
        bool? GlobalConfigInfoApplyOnAllCommCells { get; set; }
        /// <summary>List of Service CommCells where the global configuration should be applied</summary>
        Commvault.Powershell.Models.IGlobalConfigCommcellInfo[] GlobalConfigInfoCommcells { get; set; }

        string GlobalConfigInfoName { get; set; }
        /// <summary>The entity level at which the config has to be applied.</summary>
        string GlobalConfigInfoScope { get; set; }
        /// <summary>CommCellEntityCache filter query string using for filtering the scope</summary>
        string GlobalConfigInfoScopeFilterQuery { get; set; }
        /// <summary>Name of the new role</summary>
        string Name { get; set; }
        /// <summary>Used to provide the list of permissions associated with the role.</summary>
        Commvault.Powershell.Models.IPermissions[] PermissionList { get; set; }

        bool? VisibleToAll { get; set; }

    }
}