// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class CreateUserGroup :
        Commvault.Powershell.Models.ICreateUserGroup,
        Commvault.Powershell.Models.ICreateUserGroupInternal
    {

        /// <summary>Internal Acessors for GlobalConfigInfo</summary>
        Commvault.Powershell.Models.ICreateGlobalConfigInfo Commvault.Powershell.Models.ICreateUserGroupInternal.GlobalConfigInfo { get => (this._globalConfigInfo = this._globalConfigInfo ?? new Commvault.Powershell.Models.CreateGlobalConfigInfo()); set { {_globalConfigInfo = value;} } }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Backing field for <see cref="EnforceFsQuota" /> property.</summary>
        private bool? _enforceFsQuota;

        /// <summary>
        /// Used to determine if a backup data limit will be set for the user group being created
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? EnforceFsQuota { get => this._enforceFsQuota; set => this._enforceFsQuota = value; }

        /// <summary>Backing field for <see cref="GlobalConfigInfo" /> property.</summary>
        private Commvault.Powershell.Models.ICreateGlobalConfigInfo _globalConfigInfo;

        /// <summary>Only applicable to Global CommCells</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ICreateGlobalConfigInfo GlobalConfigInfo { get => (this._globalConfigInfo = this._globalConfigInfo ?? new Commvault.Powershell.Models.CreateGlobalConfigInfo()); set => this._globalConfigInfo = value; }

        /// <summary>
        /// Action that will be taken on the local entity that has the same name as the global entity that needs to be created
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoActionOnLocalEntity { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ActionOnLocalEntity; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ActionOnLocalEntity = value ?? null; }

        /// <summary>
        /// Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? GlobalConfigInfoApplyOnAllCommCells { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ApplyOnAllCommCells; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ApplyOnAllCommCells = value ?? default(bool); }

        /// <summary>List of Service CommCells where the global configuration should be applied</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public Commvault.Powershell.Models.IGlobalConfigCommcellInfo[] GlobalConfigInfoCommcells { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Commcells; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Commcells = value ?? null /* arrayOf */; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoName { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Name; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Name = value ?? null; }

        /// <summary>The entity level at which the config has to be applied.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoScope { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Scope; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).Scope = value ?? null; }

        /// <summary>CommCellEntityCache filter query string using for filtering the scope</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string GlobalConfigInfoScopeFilterQuery { get => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ScopeFilterQuery; set => ((Commvault.Powershell.Models.ICreateGlobalConfigInfoInternal)GlobalConfigInfo).ScopeFilterQuery = value ?? null; }

        /// <summary>Backing field for <see cref="LocalUserGroups" /> property.</summary>
        private Commvault.Powershell.Models.IIdName[] _localUserGroups;

        /// <summary>
        /// This option is for AD user groups being created. Local user groups can be added to the active directory user groups.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdName[] LocalUserGroups { get => this._localUserGroups; set => this._localUserGroups = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>
        /// To create an active directory usergroup, the domain name should be mentioned along with the usergroup name (domainName\\usergroupName)
        /// and localUserGroup value must be given.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="QuotaLimitInGb" /> property.</summary>
        private long? _quotaLimitInGb;

        /// <summary>if enforceFSQuota is set to true, the quota limit can be set in GBs</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? QuotaLimitInGb { get => this._quotaLimitInGb; set => this._quotaLimitInGb = value; }

        /// <summary>Creates an new <see cref="CreateUserGroup" /> instance.</summary>
        public CreateUserGroup()
        {

        }
    }
    public partial interface ICreateUserGroup :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// Used to determine if a backup data limit will be set for the user group being created
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Used to determine if a backup data limit will be set for the user group being created",
        SerializedName = @"enforceFSQuota",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnforceFsQuota { get; set; }
        /// <summary>
        /// Action that will be taken on the local entity that has the same name as the global entity that needs to be created
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Action that will be taken on the local entity that has the same name as the global entity that needs to be created",
        SerializedName = @"actionOnLocalEntity",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoActionOnLocalEntity { get; set; }
        /// <summary>
        /// Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones",
        SerializedName = @"applyOnAllCommCells",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GlobalConfigInfoApplyOnAllCommCells { get; set; }
        /// <summary>List of Service CommCells where the global configuration should be applied</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of Service CommCells where the global configuration should be applied",
        SerializedName = @"commcells",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IGlobalConfigCommcellInfo) })]
        Commvault.Powershell.Models.IGlobalConfigCommcellInfo[] GlobalConfigInfoCommcells { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoName { get; set; }
        /// <summary>The entity level at which the config has to be applied.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The entity level at which the config has to be applied.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoScope { get; set; }
        /// <summary>CommCellEntityCache filter query string using for filtering the scope</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"CommCellEntityCache filter query string using for filtering the scope",
        SerializedName = @"scopeFilterQuery",
        PossibleTypes = new [] { typeof(string) })]
        string GlobalConfigInfoScopeFilterQuery { get; set; }
        /// <summary>
        /// This option is for AD user groups being created. Local user groups can be added to the active directory user groups.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This option is for AD user groups being created. Local user groups can be added to the active directory user groups.",
        SerializedName = @"localUserGroups",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] LocalUserGroups { get; set; }
        /// <summary>
        /// To create an active directory usergroup, the domain name should be mentioned along with the usergroup name (domainName\\usergroupName)
        /// and localUserGroup value must be given.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"To create an active directory usergroup, the domain name should be mentioned along with the usergroup name (domainName\\usergroupName) and localUserGroup value must be given.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>if enforceFSQuota is set to true, the quota limit can be set in GBs</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"if enforceFSQuota is set to true, the quota limit can be set in GBs",
        SerializedName = @"quotaLimitInGB",
        PossibleTypes = new [] { typeof(long) })]
        long? QuotaLimitInGb { get; set; }

    }
    internal partial interface ICreateUserGroupInternal

    {
        string Description { get; set; }
        /// <summary>
        /// Used to determine if a backup data limit will be set for the user group being created
        /// </summary>
        bool? EnforceFsQuota { get; set; }
        /// <summary>Only applicable to Global CommCells</summary>
        Commvault.Powershell.Models.ICreateGlobalConfigInfo GlobalConfigInfo { get; set; }
        /// <summary>
        /// Action that will be taken on the local entity that has the same name as the global entity that needs to be created
        /// </summary>
        string GlobalConfigInfoActionOnLocalEntity { get; set; }
        /// <summary>
        /// Decides whether the global configuration should be applied to all the Service commcells, including the newly created ones
        /// </summary>
        bool? GlobalConfigInfoApplyOnAllCommCells { get; set; }
        /// <summary>List of Service CommCells where the global configuration should be applied</summary>
        Commvault.Powershell.Models.IGlobalConfigCommcellInfo[] GlobalConfigInfoCommcells { get; set; }

        string GlobalConfigInfoName { get; set; }
        /// <summary>The entity level at which the config has to be applied.</summary>
        string GlobalConfigInfoScope { get; set; }
        /// <summary>CommCellEntityCache filter query string using for filtering the scope</summary>
        string GlobalConfigInfoScopeFilterQuery { get; set; }
        /// <summary>
        /// This option is for AD user groups being created. Local user groups can be added to the active directory user groups.
        /// </summary>
        Commvault.Powershell.Models.IIdName[] LocalUserGroups { get; set; }
        /// <summary>
        /// To create an active directory usergroup, the domain name should be mentioned along with the usergroup name (domainName\\usergroupName)
        /// and localUserGroup value must be given.
        /// </summary>
        string Name { get; set; }
        /// <summary>if enforceFSQuota is set to true, the quota limit can be set in GBs</summary>
        long? QuotaLimitInGb { get; set; }

    }
}