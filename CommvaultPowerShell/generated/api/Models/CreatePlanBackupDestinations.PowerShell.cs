// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    [System.ComponentModel.TypeConverter(typeof(CreatePlanBackupDestinationsTypeConverter))]
    public partial class CreatePlanBackupDestinations
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.CreatePlanBackupDestinations"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal CreatePlanBackupDestinations(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("SnapshotOptions"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptions = (Commvault.Powershell.Models.ICreatePlanSnapshotOptions) content.GetValueForProperty("SnapshotOptions",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptions, Commvault.Powershell.Models.CreatePlanSnapshotOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Region"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).Region = (Commvault.Powershell.Models.IIdNameGuid) content.GetValueForProperty("Region",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).Region, Commvault.Powershell.Models.IdNameGuidTypeConverter.ConvertFrom);
            }
            if (content.Contains("Destinations"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).Destinations = (System.Collections.Generic.List<Commvault.Powershell.Models.ICreatePlanBackupDestination>) content.GetValueForProperty("Destinations",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).Destinations, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.ICreatePlanBackupDestination>(__y, Commvault.Powershell.Models.CreatePlanBackupDestinationTypeConverter.ConvertFrom));
            }
            if (content.Contains("SnapshotOptionBackupCopyOptions"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionBackupCopyOptions = (Commvault.Powershell.Models.IBackupCopyOptions) content.GetValueForProperty("SnapshotOptionBackupCopyOptions",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionBackupCopyOptions, Commvault.Powershell.Models.BackupCopyOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotOptionSnapRecoveryPoints"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionSnapRecoveryPoints = (long?) content.GetValueForProperty("SnapshotOptionSnapRecoveryPoints",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionSnapRecoveryPoints, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapshotOptionRetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionRetentionPeriodDays = (long?) content.GetValueForProperty("SnapshotOptionRetentionPeriodDays",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionRetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapshotOptionEnableBackupCopy"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionEnableBackupCopy = (bool?) content.GetValueForProperty("SnapshotOptionEnableBackupCopy",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionEnableBackupCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotOptionBackupCopyRpoMins"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionBackupCopyRpoMins = (long?) content.GetValueForProperty("SnapshotOptionBackupCopyRpoMins",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionBackupCopyRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapshotOptionEnableSnapCatalog"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionEnableSnapCatalog = (bool?) content.GetValueForProperty("SnapshotOptionEnableSnapCatalog",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionEnableSnapCatalog, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionStartTime"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionStartTime = (long?) content.GetValueForProperty("BackupCopyOptionStartTime",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionAction"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionAction = (string) content.GetValueForProperty("BackupCopyOptionAction",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionAction, global::System.Convert.ToString);
            }
            if (content.Contains("RegionId"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionId = (long?) content.GetValueForProperty("RegionId",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RegionGuid"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionGuid = (string) content.GetValueForProperty("RegionGuid",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionGuid, global::System.Convert.ToString);
            }
            if (content.Contains("RegionName"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionName = (string) content.GetValueForProperty("RegionName",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionName, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionBackupTypeToCopy"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionBackupTypeToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupTypeToCopy",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionBackupTypeToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionBackupFullToCopy"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionBackupFullToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupFullToCopy",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionBackupFullToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionEnableAlert"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionEnableAlert = (bool?) content.GetValueForProperty("BackupCopyOptionEnableAlert",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionEnableAlert, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionAlertInHours"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionAlertInHours = (long?) content.GetValueForProperty("BackupCopyOptionAlertInHours",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionAlertInHours, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionSkipAfterThresholdDays"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionSkipAfterThresholdDays = (long?) content.GetValueForProperty("BackupCopyOptionSkipAfterThresholdDays",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionSkipAfterThresholdDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.CreatePlanBackupDestinations"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal CreatePlanBackupDestinations(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("SnapshotOptions"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptions = (Commvault.Powershell.Models.ICreatePlanSnapshotOptions) content.GetValueForProperty("SnapshotOptions",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptions, Commvault.Powershell.Models.CreatePlanSnapshotOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Region"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).Region = (Commvault.Powershell.Models.IIdNameGuid) content.GetValueForProperty("Region",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).Region, Commvault.Powershell.Models.IdNameGuidTypeConverter.ConvertFrom);
            }
            if (content.Contains("Destinations"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).Destinations = (System.Collections.Generic.List<Commvault.Powershell.Models.ICreatePlanBackupDestination>) content.GetValueForProperty("Destinations",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).Destinations, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.ICreatePlanBackupDestination>(__y, Commvault.Powershell.Models.CreatePlanBackupDestinationTypeConverter.ConvertFrom));
            }
            if (content.Contains("SnapshotOptionBackupCopyOptions"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionBackupCopyOptions = (Commvault.Powershell.Models.IBackupCopyOptions) content.GetValueForProperty("SnapshotOptionBackupCopyOptions",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionBackupCopyOptions, Commvault.Powershell.Models.BackupCopyOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotOptionSnapRecoveryPoints"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionSnapRecoveryPoints = (long?) content.GetValueForProperty("SnapshotOptionSnapRecoveryPoints",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionSnapRecoveryPoints, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapshotOptionRetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionRetentionPeriodDays = (long?) content.GetValueForProperty("SnapshotOptionRetentionPeriodDays",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionRetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapshotOptionEnableBackupCopy"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionEnableBackupCopy = (bool?) content.GetValueForProperty("SnapshotOptionEnableBackupCopy",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionEnableBackupCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotOptionBackupCopyRpoMins"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionBackupCopyRpoMins = (long?) content.GetValueForProperty("SnapshotOptionBackupCopyRpoMins",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionBackupCopyRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapshotOptionEnableSnapCatalog"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionEnableSnapCatalog = (bool?) content.GetValueForProperty("SnapshotOptionEnableSnapCatalog",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).SnapshotOptionEnableSnapCatalog, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionStartTime"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionStartTime = (long?) content.GetValueForProperty("BackupCopyOptionStartTime",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionAction"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionAction = (string) content.GetValueForProperty("BackupCopyOptionAction",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionAction, global::System.Convert.ToString);
            }
            if (content.Contains("RegionId"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionId = (long?) content.GetValueForProperty("RegionId",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RegionGuid"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionGuid = (string) content.GetValueForProperty("RegionGuid",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionGuid, global::System.Convert.ToString);
            }
            if (content.Contains("RegionName"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionName = (string) content.GetValueForProperty("RegionName",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).RegionName, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionBackupTypeToCopy"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionBackupTypeToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupTypeToCopy",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionBackupTypeToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionBackupFullToCopy"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionBackupFullToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupFullToCopy",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionBackupFullToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionEnableAlert"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionEnableAlert = (bool?) content.GetValueForProperty("BackupCopyOptionEnableAlert",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionEnableAlert, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionAlertInHours"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionAlertInHours = (long?) content.GetValueForProperty("BackupCopyOptionAlertInHours",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionAlertInHours, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionSkipAfterThresholdDays"))
            {
                ((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionSkipAfterThresholdDays = (long?) content.GetValueForProperty("BackupCopyOptionSkipAfterThresholdDays",((Commvault.Powershell.Models.ICreatePlanBackupDestinationsInternal)this).BackupCopyOptionSkipAfterThresholdDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.CreatePlanBackupDestinations"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Commvault.Powershell.Models.ICreatePlanBackupDestinations" />.
        /// </returns>
        public static Commvault.Powershell.Models.ICreatePlanBackupDestinations DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new CreatePlanBackupDestinations(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.CreatePlanBackupDestinations"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Commvault.Powershell.Models.ICreatePlanBackupDestinations" />.
        /// </returns>
        public static Commvault.Powershell.Models.ICreatePlanBackupDestinations DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new CreatePlanBackupDestinations(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="CreatePlanBackupDestinations" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="CreatePlanBackupDestinations" /> model class.</returns>
        public static Commvault.Powershell.Models.ICreatePlanBackupDestinations FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    [System.ComponentModel.TypeConverter(typeof(CreatePlanBackupDestinationsTypeConverter))]
    public partial interface ICreatePlanBackupDestinations

    {

    }
}