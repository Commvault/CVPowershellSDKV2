// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Summary of individual server in servers list response</summary>
    public partial class ServerSummary :
        Commvault.Powershell.Models.IServerSummary,
        Commvault.Powershell.Models.IServerSummaryInternal
    {

        /// <summary>Backing field for <see cref="Agents" /> property.</summary>
        private Commvault.Powershell.Models.IIdName[] _agents;

        /// <summary>List of agents the server has installed</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdName[] Agents { get => this._agents; set => this._agents = value; }

        /// <summary>Backing field for <see cref="Commcell" /> property.</summary>
        private Commvault.Powershell.Models.ICommcellInfo _commcell;

        /// <summary>CommcellInfo</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ICommcellInfo Commcell { get => (this._commcell = this._commcell ?? new Commvault.Powershell.Models.CommcellInfo()); set => this._commcell = value; }

        /// <summary>Name of the commcell the entity belongs to.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string CommcellName { get => ((Commvault.Powershell.Models.ICommcellInfoInternal)Commcell).Name; set => ((Commvault.Powershell.Models.ICommcellInfoInternal)Commcell).Name = value ?? null; }

        /// <summary>Internal Acessors for Commcell</summary>
        Commvault.Powershell.Models.ICommcellInfo Commvault.Powershell.Models.IServerSummaryInternal.Commcell { get => (this._commcell = this._commcell ?? new Commvault.Powershell.Models.CommcellInfo()); set { {_commcell = value;} } }

        /// <summary>Internal Acessors for Company</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IServerSummaryInternal.Company { get => (this._company = this._company ?? new Commvault.Powershell.Models.IdName()); set { {_company = value;} } }

        /// <summary>Backing field for <see cref="Company" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _company;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Company { get => (this._company = this._company ?? new Commvault.Powershell.Models.IdName()); set => this._company = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? CompanyId { get => ((Commvault.Powershell.Models.IIdNameInternal)Company).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Company).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string CompanyName { get => ((Commvault.Powershell.Models.IIdNameInternal)Company).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Company).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Configured" /> property.</summary>
        private bool? _configured;

        /// <summary>Property to show whether client is in configured state or not</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? Configured { get => this._configured; set => this._configured = value; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>Name to be displayed in UI</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="HostName" /> property.</summary>
        private string _hostName;

        /// <summary>Hostname of the client</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string HostName { get => this._hostName; set => this._hostName = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private long? _id;

        /// <summary>Id of server</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="IsInfrastructure" /> property.</summary>
        private bool? _isInfrastructure;

        /// <summary>
        /// By default, a server is classified as infrastructure if has one of the following packages installed: CommServe, Index
        /// Store, Web Server, Content Extractor, Virtual Server Agent (VSA), Web Console, Content Analyzer, Exchange, Cloud Apps
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? IsInfrastructure { get => this._isInfrastructure; set => this._isInfrastructure = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the client</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="NetworkReadiness" /> property.</summary>
        private string _networkReadiness;

        /// <summary>Gives the status of the file server.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string NetworkReadiness { get => this._networkReadiness; set => this._networkReadiness = value; }

        /// <summary>Backing field for <see cref="OS" /> property.</summary>
        private string _oS;

        /// <summary>The operating system, for example, Windows Server 2008 R2 Enterprise.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string OS { get => this._oS; set => this._oS = value; }

        /// <summary>Backing field for <see cref="Tags" /> property.</summary>
        private Commvault.Powershell.Models.IIdNameValue[] _tags;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdNameValue[] Tags { get => this._tags; set => this._tags = value; }

        /// <summary>Backing field for <see cref="UpdateStatus" /> property.</summary>
        private string _updateStatus;

        /// <summary>Enum which specifies the status of update on a server</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string UpdateStatus { get => this._updateStatus; set => this._updateStatus = value; }

        /// <summary>Backing field for <see cref="Version" /> property.</summary>
        private string _version;

        /// <summary>
        /// Version of Commvault software server is running. Version is in the format: Release.SPversion.Hotfixpack. eg: 11.22.5
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Version { get => this._version; set => this._version = value; }

        /// <summary>Creates an new <see cref="ServerSummary" /> instance.</summary>
        public ServerSummary()
        {

        }
    }
    /// Summary of individual server in servers list response
    public partial interface IServerSummary :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>List of agents the server has installed</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of agents the server has installed",
        SerializedName = @"agents",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] Agents { get; set; }
        /// <summary>Name of the commcell the entity belongs to.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the commcell the entity belongs to.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CommcellName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? CompanyId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CompanyName { get; set; }
        /// <summary>Property to show whether client is in configured state or not</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property to show whether client is in configured state or not",
        SerializedName = @"configured",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Configured { get; set; }
        /// <summary>Name to be displayed in UI</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name to be displayed in UI",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>Hostname of the client</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Hostname of the client",
        SerializedName = @"hostName",
        PossibleTypes = new [] { typeof(string) })]
        string HostName { get; set; }
        /// <summary>Id of server</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Id of server",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? Id { get; set; }
        /// <summary>
        /// By default, a server is classified as infrastructure if has one of the following packages installed: CommServe, Index
        /// Store, Web Server, Content Extractor, Virtual Server Agent (VSA), Web Console, Content Analyzer, Exchange, Cloud Apps
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"By default, a server is classified as infrastructure if has one of the following packages installed: CommServe, Index Store, Web Server, Content Extractor, Virtual Server Agent (VSA), Web Console, Content Analyzer, Exchange, Cloud Apps",
        SerializedName = @"isInfrastructure",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsInfrastructure { get; set; }
        /// <summary>Name of the client</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the client",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Gives the status of the file server.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gives the status of the file server.",
        SerializedName = @"networkReadiness",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkReadiness { get; set; }
        /// <summary>The operating system, for example, Windows Server 2008 R2 Enterprise.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The operating system, for example, Windows Server 2008 R2 Enterprise.",
        SerializedName = @"OS",
        PossibleTypes = new [] { typeof(string) })]
        string OS { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdNameValue) })]
        Commvault.Powershell.Models.IIdNameValue[] Tags { get; set; }
        /// <summary>Enum which specifies the status of update on a server</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enum which specifies the status of update on a server",
        SerializedName = @"updateStatus",
        PossibleTypes = new [] { typeof(string) })]
        string UpdateStatus { get; set; }
        /// <summary>
        /// Version of Commvault software server is running. Version is in the format: Release.SPversion.Hotfixpack. eg: 11.22.5
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version of Commvault software server is running. Version is in the format: Release.SPversion.Hotfixpack. eg: 11.22.5",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get; set; }

    }
    /// Summary of individual server in servers list response
    internal partial interface IServerSummaryInternal

    {
        /// <summary>List of agents the server has installed</summary>
        Commvault.Powershell.Models.IIdName[] Agents { get; set; }
        /// <summary>CommcellInfo</summary>
        Commvault.Powershell.Models.ICommcellInfo Commcell { get; set; }
        /// <summary>Name of the commcell the entity belongs to.</summary>
        string CommcellName { get; set; }

        Commvault.Powershell.Models.IIdName Company { get; set; }

        long? CompanyId { get; set; }

        string CompanyName { get; set; }
        /// <summary>Property to show whether client is in configured state or not</summary>
        bool? Configured { get; set; }
        /// <summary>Name to be displayed in UI</summary>
        string DisplayName { get; set; }
        /// <summary>Hostname of the client</summary>
        string HostName { get; set; }
        /// <summary>Id of server</summary>
        long? Id { get; set; }
        /// <summary>
        /// By default, a server is classified as infrastructure if has one of the following packages installed: CommServe, Index
        /// Store, Web Server, Content Extractor, Virtual Server Agent (VSA), Web Console, Content Analyzer, Exchange, Cloud Apps
        /// </summary>
        bool? IsInfrastructure { get; set; }
        /// <summary>Name of the client</summary>
        string Name { get; set; }
        /// <summary>Gives the status of the file server.</summary>
        string NetworkReadiness { get; set; }
        /// <summary>The operating system, for example, Windows Server 2008 R2 Enterprise.</summary>
        string OS { get; set; }

        Commvault.Powershell.Models.IIdNameValue[] Tags { get; set; }
        /// <summary>Enum which specifies the status of update on a server</summary>
        string UpdateStatus { get; set; }
        /// <summary>
        /// Version of Commvault software server is running. Version is in the format: Release.SPversion.Hotfixpack. eg: 11.22.5
        /// </summary>
        string Version { get; set; }

    }
}