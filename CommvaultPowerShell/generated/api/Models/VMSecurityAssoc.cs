// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// A list of users or user groups each having a specific set of roles that determine the kind of operations they can perform
    /// on the entity.
    /// </summary>
    public partial class VMSecurityAssoc :
        Commvault.Powershell.Models.IVMSecurityAssoc,
        Commvault.Powershell.Models.IVMSecurityAssocInternal
    {

        /// <summary>Internal Acessors for Role</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IVMSecurityAssocInternal.Role { get => (this._role = this._role ?? new Commvault.Powershell.Models.IdName()); set { {_role = value;} } }

        /// <summary>Internal Acessors for UseGroup</summary>
        Commvault.Powershell.Models.IIdNameCompany Commvault.Powershell.Models.IVMSecurityAssocInternal.UseGroup { get => (this._useGroup = this._useGroup ?? new Commvault.Powershell.Models.IdNameCompany()); set { {_useGroup = value;} } }

        /// <summary>Internal Acessors for UseGroupCompany</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IVMSecurityAssocInternal.UseGroupCompany { get => ((Commvault.Powershell.Models.IIdNameCompanyInternal)UseGroup).Company; set => ((Commvault.Powershell.Models.IIdNameCompanyInternal)UseGroup).Company = value; }

        /// <summary>Internal Acessors for User</summary>
        Commvault.Powershell.Models.IIdNameCompany Commvault.Powershell.Models.IVMSecurityAssocInternal.User { get => (this._user = this._user ?? new Commvault.Powershell.Models.IdNameCompany()); set { {_user = value;} } }

        /// <summary>Internal Acessors for UserCompany</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IVMSecurityAssocInternal.UserCompany { get => ((Commvault.Powershell.Models.IIdNameCompanyInternal)User).Company; set => ((Commvault.Powershell.Models.IIdNameCompanyInternal)User).Company = value; }

        /// <summary>Backing field for <see cref="Role" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _role;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Role { get => (this._role = this._role ?? new Commvault.Powershell.Models.IdName()); set => this._role = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? RoleId { get => ((Commvault.Powershell.Models.IIdNameInternal)Role).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Role).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string RoleName { get => ((Commvault.Powershell.Models.IIdNameInternal)Role).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Role).Name = value ?? null; }

        /// <summary>Backing field for <see cref="UseGroup" /> property.</summary>
        private Commvault.Powershell.Models.IIdNameCompany _useGroup;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdNameCompany UseGroup { get => (this._useGroup = this._useGroup ?? new Commvault.Powershell.Models.IdNameCompany()); set => this._useGroup = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? UseGroupCompanyId { get => ((Commvault.Powershell.Models.IIdNameCompanyInternal)UseGroup).CompanyId; set => ((Commvault.Powershell.Models.IIdNameCompanyInternal)UseGroup).CompanyId = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UseGroupCompanyName { get => ((Commvault.Powershell.Models.IIdNameCompanyInternal)UseGroup).CompanyName; set => ((Commvault.Powershell.Models.IIdNameCompanyInternal)UseGroup).CompanyName = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? UseGroupId { get => ((Commvault.Powershell.Models.IIdNameCompanyInternal)UseGroup).Id; set => ((Commvault.Powershell.Models.IIdNameCompanyInternal)UseGroup).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UseGroupName { get => ((Commvault.Powershell.Models.IIdNameCompanyInternal)UseGroup).Name; set => ((Commvault.Powershell.Models.IIdNameCompanyInternal)UseGroup).Name = value ?? null; }

        /// <summary>Backing field for <see cref="User" /> property.</summary>
        private Commvault.Powershell.Models.IIdNameCompany _user;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdNameCompany User { get => (this._user = this._user ?? new Commvault.Powershell.Models.IdNameCompany()); set => this._user = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? UserCompanyId { get => ((Commvault.Powershell.Models.IIdNameCompanyInternal)User).CompanyId; set => ((Commvault.Powershell.Models.IIdNameCompanyInternal)User).CompanyId = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UserCompanyName { get => ((Commvault.Powershell.Models.IIdNameCompanyInternal)User).CompanyName; set => ((Commvault.Powershell.Models.IIdNameCompanyInternal)User).CompanyName = value ?? null; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? UserId { get => ((Commvault.Powershell.Models.IIdNameCompanyInternal)User).Id; set => ((Commvault.Powershell.Models.IIdNameCompanyInternal)User).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string UserName { get => ((Commvault.Powershell.Models.IIdNameCompanyInternal)User).Name; set => ((Commvault.Powershell.Models.IIdNameCompanyInternal)User).Name = value ?? null; }

        /// <summary>Creates an new <see cref="VMSecurityAssoc" /> instance.</summary>
        public VMSecurityAssoc()
        {

        }
    }
    /// A list of users or user groups each having a specific set of roles that determine the kind of operations they can perform
    /// on the entity.
    public partial interface IVMSecurityAssoc :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? RoleId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string RoleName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? UseGroupCompanyId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string UseGroupCompanyName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? UseGroupId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string UseGroupName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? UserCompanyId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string UserCompanyName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? UserId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string UserName { get; set; }

    }
    /// A list of users or user groups each having a specific set of roles that determine the kind of operations they can perform
    /// on the entity.
    internal partial interface IVMSecurityAssocInternal

    {
        Commvault.Powershell.Models.IIdName Role { get; set; }

        long? RoleId { get; set; }

        string RoleName { get; set; }

        Commvault.Powershell.Models.IIdNameCompany UseGroup { get; set; }

        Commvault.Powershell.Models.IIdName UseGroupCompany { get; set; }

        long? UseGroupCompanyId { get; set; }

        string UseGroupCompanyName { get; set; }

        long? UseGroupId { get; set; }

        string UseGroupName { get; set; }

        Commvault.Powershell.Models.IIdNameCompany User { get; set; }

        Commvault.Powershell.Models.IIdName UserCompany { get; set; }

        long? UserCompanyId { get; set; }

        string UserCompanyName { get; set; }

        long? UserId { get; set; }

        string UserName { get; set; }

    }
}