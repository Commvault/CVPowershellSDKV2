// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.2, generator: @autorest/powershell@3.0.494)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class IndexCache :
        Commvault.Powershell.Models.IIndexCache,
        Commvault.Powershell.Models.IIndexCacheInternal
    {

        /// <summary>Internal Acessors for LogsCache</summary>
        Commvault.Powershell.Models.IMediaAgentLogsCache Commvault.Powershell.Models.IIndexCacheInternal.LogsCache { get => (this._logsCache = this._logsCache ?? new Commvault.Powershell.Models.MediaAgentLogsCache()); set { {_logsCache = value;} } }

        /// <summary>This tag determines if the logs cache has been enabled or not.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? LogCacheEnabled { get => ((Commvault.Powershell.Models.IMediaAgentLogsCacheInternal)LogsCache).Enabled; set => ((Commvault.Powershell.Models.IMediaAgentLogsCacheInternal)LogsCache).Enabled = value ?? default(bool); }

        /// <summary>If the logs cache is enabled, this tag gives the path to store the logs cache.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string LogCachePath { get => ((Commvault.Powershell.Models.IMediaAgentLogsCacheInternal)LogsCache).Path; set => ((Commvault.Powershell.Models.IMediaAgentLogsCacheInternal)LogsCache).Path = value ?? null; }

        /// <summary>Backing field for <see cref="LogsCache" /> property.</summary>
        private Commvault.Powershell.Models.IMediaAgentLogsCache _logsCache;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IMediaAgentLogsCache LogsCache { get => (this._logsCache = this._logsCache ?? new Commvault.Powershell.Models.MediaAgentLogsCache()); set => this._logsCache = value; }

        /// <summary>Backing field for <see cref="Path" /> property.</summary>
        private string _path;

        /// <summary>Path where the index cache is maintained.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Path { get => this._path; set => this._path = value; }

        /// <summary>Creates an new <see cref="IndexCache" /> instance.</summary>
        public IndexCache()
        {

        }
    }
    public partial interface IIndexCache :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>This tag determines if the logs cache has been enabled or not.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This tag determines if the logs cache has been enabled or not. ",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LogCacheEnabled { get; set; }
        /// <summary>If the logs cache is enabled, this tag gives the path to store the logs cache.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If the logs cache is enabled, this tag gives the path to store the logs cache.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string LogCachePath { get; set; }
        /// <summary>Path where the index cache is maintained.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Path where the index cache is maintained.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string Path { get; set; }

    }
    internal partial interface IIndexCacheInternal

    {
        /// <summary>This tag determines if the logs cache has been enabled or not.</summary>
        bool? LogCacheEnabled { get; set; }
        /// <summary>If the logs cache is enabled, this tag gives the path to store the logs cache.</summary>
        string LogCachePath { get; set; }

        Commvault.Powershell.Models.IMediaAgentLogsCache LogsCache { get; set; }
        /// <summary>Path where the index cache is maintained.</summary>
        string Path { get; set; }

    }
}