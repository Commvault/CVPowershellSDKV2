// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    [System.ComponentModel.TypeConverter(typeof(PlanBackupDestinationTypeConverter))]
    public partial class PlanBackupDestination
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.PlanBackupDestination"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Commvault.Powershell.Models.IPlanBackupDestination" />.
        /// </returns>
        public static Commvault.Powershell.Models.IPlanBackupDestination DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new PlanBackupDestination(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.PlanBackupDestination"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Commvault.Powershell.Models.IPlanBackupDestination" />.
        /// </returns>
        public static Commvault.Powershell.Models.IPlanBackupDestination DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new PlanBackupDestination(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="PlanBackupDestination" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="PlanBackupDestination" /> model class.</returns>
        public static Commvault.Powershell.Models.IPlanBackupDestination FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.PlanBackupDestination"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal PlanBackupDestination(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("PlanBackupDestinationPlanBackupDestination"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationPlanBackupDestination = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("PlanBackupDestinationPlanBackupDestination",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationPlanBackupDestination, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("StoragePool"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePool = (Commvault.Powershell.Models.IStoragePool) content.GetValueForProperty("StoragePool",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePool, Commvault.Powershell.Models.StoragePoolTypeConverter.ConvertFrom);
            }
            if (content.Contains("SourceCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopy = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SourceCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopy, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("Region"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Region = (Commvault.Powershell.Models.IIdNameDisplayName) content.GetValueForProperty("Region",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Region, Commvault.Powershell.Models.IdNameDisplayNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExtendedRetentionRules"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRules = (Commvault.Powershell.Models.IExtendedRetentionRules) content.GetValueForProperty("ExtendedRetentionRules",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRules, Commvault.Powershell.Models.ExtendedRetentionRulesTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetAppCloudTarget"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).NetAppCloudTarget = (bool?) content.GetValueForProperty("NetAppCloudTarget",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).NetAppCloudTarget, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsImmutableSnapCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsImmutableSnapCopy = (bool?) content.GetValueForProperty("IsImmutableSnapCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsImmutableSnapCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsDefault"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsDefault = (bool?) content.GetValueForProperty("IsDefault",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsDefault, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsCopyInMaintenanceMode"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsCopyInMaintenanceMode = (bool?) content.GetValueForProperty("IsCopyInMaintenanceMode",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsCopyInMaintenanceMode, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsCopyPromotionRequestSubmitted"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsCopyPromotionRequestSubmitted = (bool?) content.GetValueForProperty("IsCopyPromotionRequestSubmitted",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsCopyPromotionRequestSubmitted, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsConfiguredForReplication"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsConfiguredForReplication = (bool?) content.GetValueForProperty("IsConfiguredForReplication",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsConfiguredForReplication, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsSnapCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsSnapCopy = (bool?) content.GetValueForProperty("IsSnapCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsSnapCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsMirrorCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsMirrorCopy = (bool?) content.GetValueForProperty("IsMirrorCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsMirrorCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsAirgapCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsAirgapCopy = (bool?) content.GetValueForProperty("IsAirgapCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsAirgapCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsSourceBackupCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsSourceBackupCopy = (bool?) content.GetValueForProperty("IsSourceBackupCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsSourceBackupCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("CopyType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyType = (string) content.GetValueForProperty("CopyType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyType, global::System.Convert.ToString);
            }
            if (content.Contains("CopyTypeName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyTypeName = (string) content.GetValueForProperty("CopyTypeName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyTypeName, global::System.Convert.ToString);
            }
            if (content.Contains("CopyPrecedence"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyPrecedence = (long?) content.GetValueForProperty("CopyPrecedence",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyPrecedence, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StorageType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StorageType = (string) content.GetValueForProperty("StorageType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StorageType, global::System.Convert.ToString);
            }
            if (content.Contains("BackupsToCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).BackupsToCopy = (string) content.GetValueForProperty("BackupsToCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).BackupsToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("FullBackupTypesToCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FullBackupTypesToCopy = (string) content.GetValueForProperty("FullBackupTypesToCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FullBackupTypesToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupStartTime"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).BackupStartTime = (long?) content.GetValueForProperty("BackupStartTime",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).BackupStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("EnableDataAging"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).EnableDataAging = (bool?) content.GetValueForProperty("EnableDataAging",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).EnableDataAging, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("OverrideRetentionSettings"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).OverrideRetentionSettings = (bool?) content.GetValueForProperty("OverrideRetentionSettings",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).OverrideRetentionSettings, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RetentionRuleType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).RetentionRuleType = (string) content.GetValueForProperty("RetentionRuleType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).RetentionRuleType, global::System.Convert.ToString);
            }
            if (content.Contains("RetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).RetentionPeriodDays = (long?) content.GetValueForProperty("RetentionPeriodDays",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).RetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapRecoveryPoints"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SnapRecoveryPoints = (long?) content.GetValueForProperty("SnapRecoveryPoints",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SnapRecoveryPoints, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("UseExtendedRetentionRules"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).UseExtendedRetentionRules = (bool?) content.GetValueForProperty("UseExtendedRetentionRules",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).UseExtendedRetentionRules, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Mappings"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Mappings = (System.Collections.Generic.List<Commvault.Powershell.Models.ISnapshotCopyMapping>) content.GetValueForProperty("Mappings",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Mappings, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.ISnapshotCopyMapping>(__y, Commvault.Powershell.Models.SnapshotCopyMappingTypeConverter.ConvertFrom));
            }
            if (content.Contains("StorageTemplateTags"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StorageTemplateTags = (System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameValue>) content.GetValueForProperty("StorageTemplateTags",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StorageTemplateTags, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IIdNameValue>(__y, Commvault.Powershell.Models.IdNameValueTypeConverter.ConvertFrom));
            }
            if (content.Contains("StoragePoolDeviceType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolDeviceType = (Commvault.Powershell.Models.IDeviceType) content.GetValueForProperty("StoragePoolDeviceType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolDeviceType, Commvault.Powershell.Models.DeviceTypeTypeConverter.ConvertFrom);
            }
            if (content.Contains("StoragePoolId"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolId = (long?) content.GetValueForProperty("StoragePoolId",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StoragePoolName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolName = (string) content.GetValueForProperty("StoragePoolName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolName, global::System.Convert.ToString);
            }
            if (content.Contains("StoragePoolType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolType = (string) content.GetValueForProperty("StoragePoolType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolType, global::System.Convert.ToString);
            }
            if (content.Contains("StoragePoolStorageClass"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolStorageClass = (string) content.GetValueForProperty("StoragePoolStorageClass",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolStorageClass, global::System.Convert.ToString);
            }
            if (content.Contains("PlanBackupDestinationId"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationId = (long?) content.GetValueForProperty("PlanBackupDestinationId",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("PlanBackupDestinationName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationName = (string) content.GetValueForProperty("PlanBackupDestinationName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationName, global::System.Convert.ToString);
            }
            if (content.Contains("StoragePoolRegion"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegion = (Commvault.Powershell.Models.IIdNameDisplayName) content.GetValueForProperty("StoragePoolRegion",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegion, Commvault.Powershell.Models.IdNameDisplayNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("StoragePoolRetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRetentionPeriodDays = (long?) content.GetValueForProperty("StoragePoolRetentionPeriodDays",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StoragePoolWormStoragePoolFlag"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolWormStoragePoolFlag = (long?) content.GetValueForProperty("StoragePoolWormStoragePoolFlag",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolWormStoragePoolFlag, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StoragePoolIsArchiveStorage"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolIsArchiveStorage = (bool?) content.GetValueForProperty("StoragePoolIsArchiveStorage",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolIsArchiveStorage, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("DeviceTypeId"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DeviceTypeId = (long?) content.GetValueForProperty("DeviceTypeId",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DeviceTypeId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SourceCopyId"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopyId = (long?) content.GetValueForProperty("SourceCopyId",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopyId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SourceCopyName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopyName = (string) content.GetValueForProperty("SourceCopyName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopyName, global::System.Convert.ToString);
            }
            if (content.Contains("Id"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Id = (long?) content.GetValueForProperty("Id",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Id, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("Name"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Name = (string) content.GetValueForProperty("Name",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("DisplayName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DisplayName = (string) content.GetValueForProperty("DisplayName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("ExtendedRetentionRuleFirstExtendedRetentionRule"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleFirstExtendedRetentionRule = (Commvault.Powershell.Models.IPlanRetentionRule) content.GetValueForProperty("ExtendedRetentionRuleFirstExtendedRetentionRule",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleFirstExtendedRetentionRule, Commvault.Powershell.Models.PlanRetentionRuleTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExtendedRetentionRuleSecondExtendedRetentionRule"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleSecondExtendedRetentionRule = (Commvault.Powershell.Models.IPlanRetentionRule) content.GetValueForProperty("ExtendedRetentionRuleSecondExtendedRetentionRule",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleSecondExtendedRetentionRule, Commvault.Powershell.Models.PlanRetentionRuleTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExtendedRetentionRuleThirdExtendedRetentionRule"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleThirdExtendedRetentionRule = (Commvault.Powershell.Models.IPlanRetentionRule) content.GetValueForProperty("ExtendedRetentionRuleThirdExtendedRetentionRule",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleThirdExtendedRetentionRule, Commvault.Powershell.Models.PlanRetentionRuleTypeConverter.ConvertFrom);
            }
            if (content.Contains("DeviceTypeName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DeviceTypeName = (string) content.GetValueForProperty("DeviceTypeName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DeviceTypeName, global::System.Convert.ToString);
            }
            if (content.Contains("StoragePoolRegionId"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionId = (long?) content.GetValueForProperty("StoragePoolRegionId",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StoragePoolRegionName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionName = (string) content.GetValueForProperty("StoragePoolRegionName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionName, global::System.Convert.ToString);
            }
            if (content.Contains("StoragePoolRegionDisplayName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionDisplayName = (string) content.GetValueForProperty("StoragePoolRegionDisplayName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionDisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("FirstExtendedRetentionRuleIsInfiniteRetention"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleIsInfiniteRetention = (bool?) content.GetValueForProperty("FirstExtendedRetentionRuleIsInfiniteRetention",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleIsInfiniteRetention, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("FirstExtendedRetentionRuleRetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleRetentionPeriodDays = (long?) content.GetValueForProperty("FirstExtendedRetentionRuleRetentionPeriodDays",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleRetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("FirstExtendedRetentionRuleType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleType = (string) content.GetValueForProperty("FirstExtendedRetentionRuleType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleType, global::System.Convert.ToString);
            }
            if (content.Contains("SecondExtendedRetentionRuleIsInfiniteRetention"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleIsInfiniteRetention = (bool?) content.GetValueForProperty("SecondExtendedRetentionRuleIsInfiniteRetention",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleIsInfiniteRetention, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SecondExtendedRetentionRuleRetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleRetentionPeriodDays = (long?) content.GetValueForProperty("SecondExtendedRetentionRuleRetentionPeriodDays",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleRetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SecondExtendedRetentionRuleType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleType = (string) content.GetValueForProperty("SecondExtendedRetentionRuleType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleType, global::System.Convert.ToString);
            }
            if (content.Contains("ThirdExtendedRetentionRuleIsInfiniteRetention"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleIsInfiniteRetention = (bool?) content.GetValueForProperty("ThirdExtendedRetentionRuleIsInfiniteRetention",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleIsInfiniteRetention, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ThirdExtendedRetentionRuleRetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleRetentionPeriodDays = (long?) content.GetValueForProperty("ThirdExtendedRetentionRuleRetentionPeriodDays",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleRetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ThirdExtendedRetentionRuleType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleType = (string) content.GetValueForProperty("ThirdExtendedRetentionRuleType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleType, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.PlanBackupDestination"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal PlanBackupDestination(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("PlanBackupDestinationPlanBackupDestination"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationPlanBackupDestination = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("PlanBackupDestinationPlanBackupDestination",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationPlanBackupDestination, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("StoragePool"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePool = (Commvault.Powershell.Models.IStoragePool) content.GetValueForProperty("StoragePool",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePool, Commvault.Powershell.Models.StoragePoolTypeConverter.ConvertFrom);
            }
            if (content.Contains("SourceCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopy = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SourceCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopy, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("Region"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Region = (Commvault.Powershell.Models.IIdNameDisplayName) content.GetValueForProperty("Region",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Region, Commvault.Powershell.Models.IdNameDisplayNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExtendedRetentionRules"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRules = (Commvault.Powershell.Models.IExtendedRetentionRules) content.GetValueForProperty("ExtendedRetentionRules",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRules, Commvault.Powershell.Models.ExtendedRetentionRulesTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetAppCloudTarget"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).NetAppCloudTarget = (bool?) content.GetValueForProperty("NetAppCloudTarget",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).NetAppCloudTarget, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsImmutableSnapCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsImmutableSnapCopy = (bool?) content.GetValueForProperty("IsImmutableSnapCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsImmutableSnapCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsDefault"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsDefault = (bool?) content.GetValueForProperty("IsDefault",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsDefault, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsCopyInMaintenanceMode"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsCopyInMaintenanceMode = (bool?) content.GetValueForProperty("IsCopyInMaintenanceMode",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsCopyInMaintenanceMode, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsCopyPromotionRequestSubmitted"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsCopyPromotionRequestSubmitted = (bool?) content.GetValueForProperty("IsCopyPromotionRequestSubmitted",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsCopyPromotionRequestSubmitted, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsConfiguredForReplication"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsConfiguredForReplication = (bool?) content.GetValueForProperty("IsConfiguredForReplication",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsConfiguredForReplication, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsSnapCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsSnapCopy = (bool?) content.GetValueForProperty("IsSnapCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsSnapCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsMirrorCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsMirrorCopy = (bool?) content.GetValueForProperty("IsMirrorCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsMirrorCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsAirgapCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsAirgapCopy = (bool?) content.GetValueForProperty("IsAirgapCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsAirgapCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("IsSourceBackupCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsSourceBackupCopy = (bool?) content.GetValueForProperty("IsSourceBackupCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).IsSourceBackupCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("CopyType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyType = (string) content.GetValueForProperty("CopyType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyType, global::System.Convert.ToString);
            }
            if (content.Contains("CopyTypeName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyTypeName = (string) content.GetValueForProperty("CopyTypeName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyTypeName, global::System.Convert.ToString);
            }
            if (content.Contains("CopyPrecedence"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyPrecedence = (long?) content.GetValueForProperty("CopyPrecedence",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).CopyPrecedence, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StorageType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StorageType = (string) content.GetValueForProperty("StorageType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StorageType, global::System.Convert.ToString);
            }
            if (content.Contains("BackupsToCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).BackupsToCopy = (string) content.GetValueForProperty("BackupsToCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).BackupsToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("FullBackupTypesToCopy"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FullBackupTypesToCopy = (string) content.GetValueForProperty("FullBackupTypesToCopy",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FullBackupTypesToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupStartTime"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).BackupStartTime = (long?) content.GetValueForProperty("BackupStartTime",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).BackupStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("EnableDataAging"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).EnableDataAging = (bool?) content.GetValueForProperty("EnableDataAging",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).EnableDataAging, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("OverrideRetentionSettings"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).OverrideRetentionSettings = (bool?) content.GetValueForProperty("OverrideRetentionSettings",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).OverrideRetentionSettings, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RetentionRuleType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).RetentionRuleType = (string) content.GetValueForProperty("RetentionRuleType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).RetentionRuleType, global::System.Convert.ToString);
            }
            if (content.Contains("RetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).RetentionPeriodDays = (long?) content.GetValueForProperty("RetentionPeriodDays",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).RetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapRecoveryPoints"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SnapRecoveryPoints = (long?) content.GetValueForProperty("SnapRecoveryPoints",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SnapRecoveryPoints, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("UseExtendedRetentionRules"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).UseExtendedRetentionRules = (bool?) content.GetValueForProperty("UseExtendedRetentionRules",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).UseExtendedRetentionRules, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Mappings"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Mappings = (System.Collections.Generic.List<Commvault.Powershell.Models.ISnapshotCopyMapping>) content.GetValueForProperty("Mappings",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Mappings, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.ISnapshotCopyMapping>(__y, Commvault.Powershell.Models.SnapshotCopyMappingTypeConverter.ConvertFrom));
            }
            if (content.Contains("StorageTemplateTags"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StorageTemplateTags = (System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameValue>) content.GetValueForProperty("StorageTemplateTags",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StorageTemplateTags, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IIdNameValue>(__y, Commvault.Powershell.Models.IdNameValueTypeConverter.ConvertFrom));
            }
            if (content.Contains("StoragePoolDeviceType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolDeviceType = (Commvault.Powershell.Models.IDeviceType) content.GetValueForProperty("StoragePoolDeviceType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolDeviceType, Commvault.Powershell.Models.DeviceTypeTypeConverter.ConvertFrom);
            }
            if (content.Contains("StoragePoolId"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolId = (long?) content.GetValueForProperty("StoragePoolId",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StoragePoolName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolName = (string) content.GetValueForProperty("StoragePoolName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolName, global::System.Convert.ToString);
            }
            if (content.Contains("StoragePoolType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolType = (string) content.GetValueForProperty("StoragePoolType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolType, global::System.Convert.ToString);
            }
            if (content.Contains("StoragePoolStorageClass"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolStorageClass = (string) content.GetValueForProperty("StoragePoolStorageClass",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolStorageClass, global::System.Convert.ToString);
            }
            if (content.Contains("PlanBackupDestinationId"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationId = (long?) content.GetValueForProperty("PlanBackupDestinationId",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("PlanBackupDestinationName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationName = (string) content.GetValueForProperty("PlanBackupDestinationName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).PlanBackupDestinationName, global::System.Convert.ToString);
            }
            if (content.Contains("StoragePoolRegion"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegion = (Commvault.Powershell.Models.IIdNameDisplayName) content.GetValueForProperty("StoragePoolRegion",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegion, Commvault.Powershell.Models.IdNameDisplayNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("StoragePoolRetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRetentionPeriodDays = (long?) content.GetValueForProperty("StoragePoolRetentionPeriodDays",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StoragePoolWormStoragePoolFlag"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolWormStoragePoolFlag = (long?) content.GetValueForProperty("StoragePoolWormStoragePoolFlag",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolWormStoragePoolFlag, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StoragePoolIsArchiveStorage"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolIsArchiveStorage = (bool?) content.GetValueForProperty("StoragePoolIsArchiveStorage",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolIsArchiveStorage, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("DeviceTypeId"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DeviceTypeId = (long?) content.GetValueForProperty("DeviceTypeId",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DeviceTypeId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SourceCopyId"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopyId = (long?) content.GetValueForProperty("SourceCopyId",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopyId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SourceCopyName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopyName = (string) content.GetValueForProperty("SourceCopyName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SourceCopyName, global::System.Convert.ToString);
            }
            if (content.Contains("Id"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Id = (long?) content.GetValueForProperty("Id",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Id, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("Name"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Name = (string) content.GetValueForProperty("Name",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("DisplayName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DisplayName = (string) content.GetValueForProperty("DisplayName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("ExtendedRetentionRuleFirstExtendedRetentionRule"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleFirstExtendedRetentionRule = (Commvault.Powershell.Models.IPlanRetentionRule) content.GetValueForProperty("ExtendedRetentionRuleFirstExtendedRetentionRule",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleFirstExtendedRetentionRule, Commvault.Powershell.Models.PlanRetentionRuleTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExtendedRetentionRuleSecondExtendedRetentionRule"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleSecondExtendedRetentionRule = (Commvault.Powershell.Models.IPlanRetentionRule) content.GetValueForProperty("ExtendedRetentionRuleSecondExtendedRetentionRule",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleSecondExtendedRetentionRule, Commvault.Powershell.Models.PlanRetentionRuleTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExtendedRetentionRuleThirdExtendedRetentionRule"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleThirdExtendedRetentionRule = (Commvault.Powershell.Models.IPlanRetentionRule) content.GetValueForProperty("ExtendedRetentionRuleThirdExtendedRetentionRule",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ExtendedRetentionRuleThirdExtendedRetentionRule, Commvault.Powershell.Models.PlanRetentionRuleTypeConverter.ConvertFrom);
            }
            if (content.Contains("DeviceTypeName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DeviceTypeName = (string) content.GetValueForProperty("DeviceTypeName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).DeviceTypeName, global::System.Convert.ToString);
            }
            if (content.Contains("StoragePoolRegionId"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionId = (long?) content.GetValueForProperty("StoragePoolRegionId",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("StoragePoolRegionName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionName = (string) content.GetValueForProperty("StoragePoolRegionName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionName, global::System.Convert.ToString);
            }
            if (content.Contains("StoragePoolRegionDisplayName"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionDisplayName = (string) content.GetValueForProperty("StoragePoolRegionDisplayName",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).StoragePoolRegionDisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("FirstExtendedRetentionRuleIsInfiniteRetention"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleIsInfiniteRetention = (bool?) content.GetValueForProperty("FirstExtendedRetentionRuleIsInfiniteRetention",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleIsInfiniteRetention, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("FirstExtendedRetentionRuleRetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleRetentionPeriodDays = (long?) content.GetValueForProperty("FirstExtendedRetentionRuleRetentionPeriodDays",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleRetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("FirstExtendedRetentionRuleType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleType = (string) content.GetValueForProperty("FirstExtendedRetentionRuleType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).FirstExtendedRetentionRuleType, global::System.Convert.ToString);
            }
            if (content.Contains("SecondExtendedRetentionRuleIsInfiniteRetention"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleIsInfiniteRetention = (bool?) content.GetValueForProperty("SecondExtendedRetentionRuleIsInfiniteRetention",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleIsInfiniteRetention, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SecondExtendedRetentionRuleRetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleRetentionPeriodDays = (long?) content.GetValueForProperty("SecondExtendedRetentionRuleRetentionPeriodDays",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleRetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SecondExtendedRetentionRuleType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleType = (string) content.GetValueForProperty("SecondExtendedRetentionRuleType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).SecondExtendedRetentionRuleType, global::System.Convert.ToString);
            }
            if (content.Contains("ThirdExtendedRetentionRuleIsInfiniteRetention"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleIsInfiniteRetention = (bool?) content.GetValueForProperty("ThirdExtendedRetentionRuleIsInfiniteRetention",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleIsInfiniteRetention, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ThirdExtendedRetentionRuleRetentionPeriodDays"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleRetentionPeriodDays = (long?) content.GetValueForProperty("ThirdExtendedRetentionRuleRetentionPeriodDays",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleRetentionPeriodDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ThirdExtendedRetentionRuleType"))
            {
                ((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleType = (string) content.GetValueForProperty("ThirdExtendedRetentionRuleType",((Commvault.Powershell.Models.IPlanBackupDestinationInternal)this).ThirdExtendedRetentionRuleType, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    [System.ComponentModel.TypeConverter(typeof(PlanBackupDestinationTypeConverter))]
    public partial interface IPlanBackupDestination

    {

    }
}