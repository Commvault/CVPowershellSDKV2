// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.2, generator: @autorest/powershell@3.0.494)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    /// <summary>Details of continuous replication group</summary>
    [System.ComponentModel.TypeConverter(typeof(ReplicationMonitorDetailTypeConverter))]
    public partial class ReplicationMonitorDetail
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.ReplicationMonitorDetail"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Commvault.Powershell.Models.IReplicationMonitorDetail" />.
        /// </returns>
        public static Commvault.Powershell.Models.IReplicationMonitorDetail DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new ReplicationMonitorDetail(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.ReplicationMonitorDetail"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Commvault.Powershell.Models.IReplicationMonitorDetail" />.
        /// </returns>
        public static Commvault.Powershell.Models.IReplicationMonitorDetail DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new ReplicationMonitorDetail(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="ReplicationMonitorDetail" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="ReplicationMonitorDetail" /> model class.</returns>
        public static Commvault.Powershell.Models.IReplicationMonitorDetail FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.ReplicationMonitorDetail"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal ReplicationMonitorDetail(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Summary"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).Summary = (Commvault.Powershell.Models.IReplicationMonitorDetailSummary) content.GetValueForProperty("Summary",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).Summary, Commvault.Powershell.Models.ReplicationMonitorDetailSummaryTypeConverter.ConvertFrom);
            }
            if (content.Contains("RecoveryOptions"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptions = (Commvault.Powershell.Models.IReplicationMonitorDetailRecoveryOptions) content.GetValueForProperty("RecoveryOptions",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptions, Commvault.Powershell.Models.ReplicationMonitorDetailRecoveryOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ReplicationCopyDetails"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).ReplicationCopyDetails = (Commvault.Powershell.Models.IReplicationMonitorDetailReplicationCopyDetails[]) content.GetValueForProperty("ReplicationCopyDetails",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).ReplicationCopyDetails, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IReplicationMonitorDetailReplicationCopyDetails>(__y, Commvault.Powershell.Models.ReplicationMonitorDetailReplicationCopyDetailsTypeConverter.ConvertFrom));
            }
            if (content.Contains("Statistics"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).Statistics = (Commvault.Powershell.Models.IReplicationMonitorDetailStats[]) content.GetValueForProperty("Statistics",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).Statistics, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IReplicationMonitorDetailStats>(__y, Commvault.Powershell.Models.ReplicationMonitorDetailStatsTypeConverter.ConvertFrom));
            }
            if (content.Contains("SummarySource"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummarySource = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SummarySource",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummarySource, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("SummaryDestination"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryDestination = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SummaryDestination",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryDestination, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("SummaryRecoveryType"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryRecoveryType = (string) content.GetValueForProperty("SummaryRecoveryType",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryRecoveryType, global::System.Convert.ToString);
            }
            if (content.Contains("SummarySynchronizationStatus"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummarySynchronizationStatus = (string) content.GetValueForProperty("SummarySynchronizationStatus",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummarySynchronizationStatus, global::System.Convert.ToString);
            }
            if (content.Contains("SummaryReplicationLag"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryReplicationLag = (long?) content.GetValueForProperty("SummaryReplicationLag",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryReplicationLag, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionRecoverypointStore"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRecoverypointStore = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("RecoveryOptionRecoverypointStore",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRecoverypointStore, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("RecoveryOptionCcrpInterval"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionCcrpInterval = (long?) content.GetValueForProperty("RecoveryOptionCcrpInterval",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionCcrpInterval, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionMergeRecoveryPointsOlderThan"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionMergeRecoveryPointsOlderThan = (long?) content.GetValueForProperty("RecoveryOptionMergeRecoveryPointsOlderThan",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionMergeRecoveryPointsOlderThan, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionRetainRecoveryPointsFor"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRetainRecoveryPointsFor = (long?) content.GetValueForProperty("RecoveryOptionRetainRecoveryPointsFor",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRetainRecoveryPointsFor, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionRpIntervalAfterRetention"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRpIntervalAfterRetention = (long?) content.GetValueForProperty("RecoveryOptionRpIntervalAfterRetention",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRpIntervalAfterRetention, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionPruneAndMergeOffPeakOnly"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionPruneAndMergeOffPeakOnly = (bool?) content.GetValueForProperty("RecoveryOptionPruneAndMergeOffPeakOnly",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionPruneAndMergeOffPeakOnly, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RecoveryOptionAcrpInterval"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionAcrpInterval = (long?) content.GetValueForProperty("RecoveryOptionAcrpInterval",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionAcrpInterval, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionSwitchToLatestIfStoreOfflineFor"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionSwitchToLatestIfStoreOfflineFor = (long?) content.GetValueForProperty("RecoveryOptionSwitchToLatestIfStoreOfflineFor",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionSwitchToLatestIfStoreOfflineFor, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SourceId"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SourceId = (long?) content.GetValueForProperty("SourceId",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SourceId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SourceName"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SourceName = (string) content.GetValueForProperty("SourceName",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SourceName, global::System.Convert.ToString);
            }
            if (content.Contains("DestinationId"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).DestinationId = (long?) content.GetValueForProperty("DestinationId",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).DestinationId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("DestinationName"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).DestinationName = (string) content.GetValueForProperty("DestinationName",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).DestinationName, global::System.Convert.ToString);
            }
            if (content.Contains("RecoverypointStoreId"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoverypointStoreId = (long?) content.GetValueForProperty("RecoverypointStoreId",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoverypointStoreId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoverypointStoreName"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoverypointStoreName = (string) content.GetValueForProperty("RecoverypointStoreName",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoverypointStoreName, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.ReplicationMonitorDetail"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal ReplicationMonitorDetail(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Summary"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).Summary = (Commvault.Powershell.Models.IReplicationMonitorDetailSummary) content.GetValueForProperty("Summary",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).Summary, Commvault.Powershell.Models.ReplicationMonitorDetailSummaryTypeConverter.ConvertFrom);
            }
            if (content.Contains("RecoveryOptions"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptions = (Commvault.Powershell.Models.IReplicationMonitorDetailRecoveryOptions) content.GetValueForProperty("RecoveryOptions",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptions, Commvault.Powershell.Models.ReplicationMonitorDetailRecoveryOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ReplicationCopyDetails"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).ReplicationCopyDetails = (Commvault.Powershell.Models.IReplicationMonitorDetailReplicationCopyDetails[]) content.GetValueForProperty("ReplicationCopyDetails",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).ReplicationCopyDetails, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IReplicationMonitorDetailReplicationCopyDetails>(__y, Commvault.Powershell.Models.ReplicationMonitorDetailReplicationCopyDetailsTypeConverter.ConvertFrom));
            }
            if (content.Contains("Statistics"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).Statistics = (Commvault.Powershell.Models.IReplicationMonitorDetailStats[]) content.GetValueForProperty("Statistics",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).Statistics, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IReplicationMonitorDetailStats>(__y, Commvault.Powershell.Models.ReplicationMonitorDetailStatsTypeConverter.ConvertFrom));
            }
            if (content.Contains("SummarySource"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummarySource = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SummarySource",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummarySource, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("SummaryDestination"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryDestination = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("SummaryDestination",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryDestination, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("SummaryRecoveryType"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryRecoveryType = (string) content.GetValueForProperty("SummaryRecoveryType",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryRecoveryType, global::System.Convert.ToString);
            }
            if (content.Contains("SummarySynchronizationStatus"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummarySynchronizationStatus = (string) content.GetValueForProperty("SummarySynchronizationStatus",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummarySynchronizationStatus, global::System.Convert.ToString);
            }
            if (content.Contains("SummaryReplicationLag"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryReplicationLag = (long?) content.GetValueForProperty("SummaryReplicationLag",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SummaryReplicationLag, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionRecoverypointStore"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRecoverypointStore = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("RecoveryOptionRecoverypointStore",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRecoverypointStore, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("RecoveryOptionCcrpInterval"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionCcrpInterval = (long?) content.GetValueForProperty("RecoveryOptionCcrpInterval",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionCcrpInterval, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionMergeRecoveryPointsOlderThan"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionMergeRecoveryPointsOlderThan = (long?) content.GetValueForProperty("RecoveryOptionMergeRecoveryPointsOlderThan",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionMergeRecoveryPointsOlderThan, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionRetainRecoveryPointsFor"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRetainRecoveryPointsFor = (long?) content.GetValueForProperty("RecoveryOptionRetainRecoveryPointsFor",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRetainRecoveryPointsFor, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionRpIntervalAfterRetention"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRpIntervalAfterRetention = (long?) content.GetValueForProperty("RecoveryOptionRpIntervalAfterRetention",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionRpIntervalAfterRetention, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionPruneAndMergeOffPeakOnly"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionPruneAndMergeOffPeakOnly = (bool?) content.GetValueForProperty("RecoveryOptionPruneAndMergeOffPeakOnly",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionPruneAndMergeOffPeakOnly, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RecoveryOptionAcrpInterval"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionAcrpInterval = (long?) content.GetValueForProperty("RecoveryOptionAcrpInterval",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionAcrpInterval, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoveryOptionSwitchToLatestIfStoreOfflineFor"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionSwitchToLatestIfStoreOfflineFor = (long?) content.GetValueForProperty("RecoveryOptionSwitchToLatestIfStoreOfflineFor",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoveryOptionSwitchToLatestIfStoreOfflineFor, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SourceId"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SourceId = (long?) content.GetValueForProperty("SourceId",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SourceId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SourceName"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SourceName = (string) content.GetValueForProperty("SourceName",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).SourceName, global::System.Convert.ToString);
            }
            if (content.Contains("DestinationId"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).DestinationId = (long?) content.GetValueForProperty("DestinationId",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).DestinationId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("DestinationName"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).DestinationName = (string) content.GetValueForProperty("DestinationName",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).DestinationName, global::System.Convert.ToString);
            }
            if (content.Contains("RecoverypointStoreId"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoverypointStoreId = (long?) content.GetValueForProperty("RecoverypointStoreId",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoverypointStoreId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RecoverypointStoreName"))
            {
                ((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoverypointStoreName = (string) content.GetValueForProperty("RecoverypointStoreName",((Commvault.Powershell.Models.IReplicationMonitorDetailInternal)this).RecoverypointStoreName, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Details of continuous replication group
    [System.ComponentModel.TypeConverter(typeof(ReplicationMonitorDetailTypeConverter))]
    public partial interface IReplicationMonitorDetail

    {

    }
}