// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.2, generator: @autorest/powershell@3.0.494)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// Message object to hold information of entities against which plan rule need to be analyzed
    /// </summary>
    public partial class ExecutePlanRules :
        Commvault.Powershell.Models.IExecutePlanRules,
        Commvault.Powershell.Models.IExecutePlanRulesInternal
    {

        /// <summary>Backing field for <see cref="Backupsets" /> property.</summary>
        private Commvault.Powershell.Models.IIdName[] _backupsets;

        /// <summary>List of backupsets against which plan rules need to be executed and evaluated.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdName[] Backupsets { get => this._backupsets; set => this._backupsets = value; }

        /// <summary>Backing field for <see cref="Clients" /> property.</summary>
        private Commvault.Powershell.Models.IIdName[] _clients;

        /// <summary>List of clients against which plan rules need to be executed and evaluated.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdName[] Clients { get => this._clients; set => this._clients = value; }

        /// <summary>Backing field for <see cref="IgnorePreviousPlanAssociation" /> property.</summary>
        private bool? _ignorePreviousPlanAssociation;

        /// <summary>
        /// Boolean to indicate if we want to evaluate rule for entities associated to plan. Default is false. Only entities with
        /// no plan associated will be evaluated.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? IgnorePreviousPlanAssociation { get => this._ignorePreviousPlanAssociation; set => this._ignorePreviousPlanAssociation = value; }

        /// <summary>Backing field for <see cref="Instances" /> property.</summary>
        private Commvault.Powershell.Models.IIdName[] _instances;

        /// <summary>List of instances against which plan rules need to be executed and evaluated.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdName[] Instances { get => this._instances; set => this._instances = value; }

        /// <summary>Backing field for <see cref="IsPreviewOnly" /> property.</summary>
        private bool? _isPreviewOnly;

        /// <summary>
        /// Boolean to indicate if request is to preview list of subclients that will be associated via plan rules
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? IsPreviewOnly { get => this._isPreviewOnly; set => this._isPreviewOnly = value; }

        /// <summary>Backing field for <see cref="Subclients" /> property.</summary>
        private Commvault.Powershell.Models.IIdName[] _subclients;

        /// <summary>List of subclients against which plan rules need to be executed and evaluated.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdName[] Subclients { get => this._subclients; set => this._subclients = value; }

        /// <summary>Creates an new <see cref="ExecutePlanRules" /> instance.</summary>
        public ExecutePlanRules()
        {

        }
    }
    /// Message object to hold information of entities against which plan rule need to be analyzed
    public partial interface IExecutePlanRules :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>List of backupsets against which plan rules need to be executed and evaluated.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of backupsets against which plan rules need to be  executed and evaluated.",
        SerializedName = @"backupsets",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] Backupsets { get; set; }
        /// <summary>List of clients against which plan rules need to be executed and evaluated.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of clients against which plan rules need to be  executed and evaluated.",
        SerializedName = @"clients",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] Clients { get; set; }
        /// <summary>
        /// Boolean to indicate if we want to evaluate rule for entities associated to plan. Default is false. Only entities with
        /// no plan associated will be evaluated.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Boolean to indicate if we want to evaluate rule for entities associated to plan. Default is false. Only entities with no plan associated will be evaluated.",
        SerializedName = @"ignorePreviousPlanAssociation",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IgnorePreviousPlanAssociation { get; set; }
        /// <summary>List of instances against which plan rules need to be executed and evaluated.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of instances against which plan rules need to be  executed and evaluated.",
        SerializedName = @"instances",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] Instances { get; set; }
        /// <summary>
        /// Boolean to indicate if request is to preview list of subclients that will be associated via plan rules
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Boolean to indicate if request is to preview list of subclients that will be associated via plan rules",
        SerializedName = @"isPreviewOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsPreviewOnly { get; set; }
        /// <summary>List of subclients against which plan rules need to be executed and evaluated.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of subclients against which plan rules need to be  executed and evaluated.",
        SerializedName = @"subclients",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] Subclients { get; set; }

    }
    /// Message object to hold information of entities against which plan rule need to be analyzed
    internal partial interface IExecutePlanRulesInternal

    {
        /// <summary>List of backupsets against which plan rules need to be executed and evaluated.</summary>
        Commvault.Powershell.Models.IIdName[] Backupsets { get; set; }
        /// <summary>List of clients against which plan rules need to be executed and evaluated.</summary>
        Commvault.Powershell.Models.IIdName[] Clients { get; set; }
        /// <summary>
        /// Boolean to indicate if we want to evaluate rule for entities associated to plan. Default is false. Only entities with
        /// no plan associated will be evaluated.
        /// </summary>
        bool? IgnorePreviousPlanAssociation { get; set; }
        /// <summary>List of instances against which plan rules need to be executed and evaluated.</summary>
        Commvault.Powershell.Models.IIdName[] Instances { get; set; }
        /// <summary>
        /// Boolean to indicate if request is to preview list of subclients that will be associated via plan rules
        /// </summary>
        bool? IsPreviewOnly { get; set; }
        /// <summary>List of subclients against which plan rules need to be executed and evaluated.</summary>
        Commvault.Powershell.Models.IIdName[] Subclients { get; set; }

    }
}