// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    [System.ComponentModel.TypeConverter(typeof(ServerPlanTypeConverter))]
    public partial class ServerPlan
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.ServerPlan"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IServerPlan" />.</returns>
        public static Commvault.Powershell.Models.IServerPlan DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new ServerPlan(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.ServerPlan"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IServerPlan" />.</returns>
        public static Commvault.Powershell.Models.IServerPlan DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new ServerPlan(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="ServerPlan" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="ServerPlan" /> model class.</returns>
        public static Commvault.Powershell.Models.IServerPlan FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.ServerPlan"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal ServerPlan(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Plan"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).Plan = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("Plan",((Commvault.Powershell.Models.IServerPlanInternal)this).Plan, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupContent"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContent = (Commvault.Powershell.Models.IPlanContent) content.GetValueForProperty("BackupContent",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContent, Commvault.Powershell.Models.PlanContentTypeConverter.ConvertFrom);
            }
            if (content.Contains("Rpo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).Rpo = (Commvault.Powershell.Models.IServerPlanRpo) content.GetValueForProperty("Rpo",((Commvault.Powershell.Models.IServerPlanInternal)this).Rpo, Commvault.Powershell.Models.ServerPlanRpoTypeConverter.ConvertFrom);
            }
            if (content.Contains("DatabaseOptions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptions = (Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo) content.GetValueForProperty("DatabaseOptions",((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptions, Commvault.Powershell.Models.ServerPlanDatabaseOptionsInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotOptions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptions = (Commvault.Powershell.Models.IPlanSnapshotOptions) content.GetValueForProperty("SnapshotOptions",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptions, Commvault.Powershell.Models.PlanSnapshotOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Settings"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).Settings = (Commvault.Powershell.Models.IServerPlanSettings) content.GetValueForProperty("Settings",((Commvault.Powershell.Models.IServerPlanInternal)this).Settings, Commvault.Powershell.Models.ServerPlanSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("OverrideRestrictions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictions = (Commvault.Powershell.Models.IPlanOverrideSettings) content.GetValueForProperty("OverrideRestrictions",((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictions, Commvault.Powershell.Models.PlanOverrideSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("InheritSettings"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettings = (Commvault.Powershell.Models.IServerPlanInheritSettings) content.GetValueForProperty("InheritSettings",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettings, Commvault.Powershell.Models.ServerPlanInheritSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ParentInheritSettings"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettings = (Commvault.Powershell.Models.IServerPlanInheritSettings) content.GetValueForProperty("ParentInheritSettings",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettings, Commvault.Powershell.Models.ServerPlanInheritSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("AdditionalProperties"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalProperties = (Commvault.Powershell.Models.IPlanAdditionalProperties) content.GetValueForProperty("AdditionalProperties",((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalProperties, Commvault.Powershell.Models.PlanAdditionalPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("Workload"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).Workload = (Commvault.Powershell.Models.IPlanWorkloads) content.GetValueForProperty("Workload",((Commvault.Powershell.Models.IServerPlanInternal)this).Workload, Commvault.Powershell.Models.PlanWorkloadsTypeConverter.ConvertFrom);
            }
            if (content.Contains("GlobalConfigInfo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfo = (Commvault.Powershell.Models.IGlobalConfigInfo) content.GetValueForProperty("GlobalConfigInfo",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfo, Commvault.Powershell.Models.GlobalConfigInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegionsConfigured"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).RegionsConfigured = (bool?) content.GetValueForProperty("RegionsConfigured",((Commvault.Powershell.Models.IServerPlanInternal)this).RegionsConfigured, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupDestinations"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupDestinations = (System.Collections.Generic.List<Commvault.Powershell.Models.IPlanBackupDestination>) content.GetValueForProperty("BackupDestinations",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupDestinations, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IPlanBackupDestination>(__y, Commvault.Powershell.Models.PlanBackupDestinationTypeConverter.ConvertFrom));
            }
            if (content.Contains("BackupDestinationIds"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupDestinationIds = (System.Collections.Generic.List<long>) content.GetValueForProperty("BackupDestinationIds",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupDestinationIds, __y => TypeConverterExtensions.SelectToList<long>(__y, (__w)=> (long) global::System.Convert.ChangeType(__w, typeof(long))));
            }
            if (content.Contains("AssociatedEntities"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AssociatedEntities = (System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameCount>) content.GetValueForProperty("AssociatedEntities",((Commvault.Powershell.Models.IServerPlanInternal)this).AssociatedEntities, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IIdNameCount>(__y, Commvault.Powershell.Models.IdNameCountTypeConverter.ConvertFrom));
            }
            if (content.Contains("AllowPlanOverride"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AllowPlanOverride = (bool?) content.GetValueForProperty("AllowPlanOverride",((Commvault.Powershell.Models.IServerPlanInternal)this).AllowPlanOverride, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Permissions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).Permissions = (System.Collections.Generic.List<Commvault.Powershell.Models.IIdName>) content.GetValueForProperty("Permissions",((Commvault.Powershell.Models.IServerPlanInternal)this).Permissions, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            }
            if (content.Contains("GlobalConfigInfoId"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoId = (string) content.GetValueForProperty("GlobalConfigInfoId",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoId, global::System.Convert.ToString);
            }
            if (content.Contains("GlobalConfigInfoName"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoName = (string) content.GetValueForProperty("GlobalConfigInfoName",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoName, global::System.Convert.ToString);
            }
            if (content.Contains("GlobalConfigInfoCommcells"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoCommcells = (System.Collections.Generic.List<Commvault.Powershell.Models.IGlobalConfigCommcellInfo>) content.GetValueForProperty("GlobalConfigInfoCommcells",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoCommcells, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IGlobalConfigCommcellInfo>(__y, Commvault.Powershell.Models.GlobalConfigCommcellInfoTypeConverter.ConvertFrom));
            }
            if (content.Contains("GlobalConfigInfoScope"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoScope = (string) content.GetValueForProperty("GlobalConfigInfoScope",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoScope, global::System.Convert.ToString);
            }
            if (content.Contains("GlobalConfigInfoStatus"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoStatus = (string) content.GetValueForProperty("GlobalConfigInfoStatus",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoStatus, global::System.Convert.ToString);
            }
            if (content.Contains("PlanId"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).PlanId = (long?) content.GetValueForProperty("PlanId",((Commvault.Powershell.Models.IServerPlanInternal)this).PlanId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("PlanName"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).PlanName = (string) content.GetValueForProperty("PlanName",((Commvault.Powershell.Models.IServerPlanInternal)this).PlanName, global::System.Convert.ToString);
            }
            if (content.Contains("BackupContentWindowsNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentWindowsNumberOfDataReaders",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupContentUnixNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentUnixNumberOfDataReaders",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupContentMacNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentMacNumberOfDataReaders",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupContentWindowsIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentWindowsIncludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentWindowsExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentWindowsExcludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentWindowsFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentWindowsFilterToExcludePaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentBackupSystemState"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentBackupSystemState = (bool?) content.GetValueForProperty("BackupContentBackupSystemState",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentBackupSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupContentBackupSystemStateOnlyWithFullBackup"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentBackupSystemStateOnlyWithFullBackup = (bool?) content.GetValueForProperty("BackupContentBackupSystemStateOnlyWithFullBackup",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentBackupSystemStateOnlyWithFullBackup, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupContentUseVssForSystemState"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUseVssForSystemState = (bool?) content.GetValueForProperty("BackupContentUseVssForSystemState",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUseVssForSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupContentMacIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentMacIncludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentMacExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentMacExcludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentMacFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentMacFilterToExcludePaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentUnixIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentUnixIncludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentUnixExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentUnixExcludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentUnixFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentUnixFilterToExcludePaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentForceUpdateProperties"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentForceUpdateProperties = (bool?) content.GetValueForProperty("BackupContentForceUpdateProperties",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentForceUpdateProperties, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RpoBackupFrequency"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).RpoBackupFrequency = (Commvault.Powershell.Models.IPlanSchedules) content.GetValueForProperty("RpoBackupFrequency",((Commvault.Powershell.Models.IServerPlanInternal)this).RpoBackupFrequency, Commvault.Powershell.Models.PlanSchedulesTypeConverter.ConvertFrom);
            }
            if (content.Contains("RpoSla"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).RpoSla = (Commvault.Powershell.Models.ISlaOptions) content.GetValueForProperty("RpoSla",((Commvault.Powershell.Models.IServerPlanInternal)this).RpoSla, Commvault.Powershell.Models.SlaOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("RpoBackupWindow"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).RpoBackupWindow = (System.Collections.Generic.List<Commvault.Powershell.Models.IDayAndTime>) content.GetValueForProperty("RpoBackupWindow",((Commvault.Powershell.Models.IServerPlanInternal)this).RpoBackupWindow, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IDayAndTime>(__y, Commvault.Powershell.Models.DayAndTimeTypeConverter.ConvertFrom));
            }
            if (content.Contains("RpoFullBackupWindow"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).RpoFullBackupWindow = (System.Collections.Generic.List<Commvault.Powershell.Models.IDayAndTime>) content.GetValueForProperty("RpoFullBackupWindow",((Commvault.Powershell.Models.IServerPlanInternal)this).RpoFullBackupWindow, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IDayAndTime>(__y, Commvault.Powershell.Models.DayAndTimeTypeConverter.ConvertFrom));
            }
            if (content.Contains("DatabaseOptionLogBackupRpoMins"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionLogBackupRpoMins = (long?) content.GetValueForProperty("DatabaseOptionLogBackupRpoMins",((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionLogBackupRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("DatabaseOptionRunFullBackupEvery"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionRunFullBackupEvery = (long?) content.GetValueForProperty("DatabaseOptionRunFullBackupEvery",((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionRunFullBackupEvery, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("DatabaseOptionUseDiskCacheForLogBackups"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionUseDiskCacheForLogBackups = (bool?) content.GetValueForProperty("DatabaseOptionUseDiskCacheForLogBackups",((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionUseDiskCacheForLogBackups, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("DatabaseOptionCommitFrequencyInHours"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionCommitFrequencyInHours = (long?) content.GetValueForProperty("DatabaseOptionCommitFrequencyInHours",((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionCommitFrequencyInHours, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapshotOptionBackupCopyFrequency"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyFrequency = (Commvault.Powershell.Models.IBackupFrequencyPattern) content.GetValueForProperty("SnapshotOptionBackupCopyFrequency",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyFrequency, Commvault.Powershell.Models.BackupFrequencyPatternTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotOptionBackupCopyOptions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyOptions = (Commvault.Powershell.Models.IBackupCopyOptions) content.GetValueForProperty("SnapshotOptionBackupCopyOptions",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyOptions, Commvault.Powershell.Models.BackupCopyOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotOptionEnableBackupCopy"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionEnableBackupCopy = (bool?) content.GetValueForProperty("SnapshotOptionEnableBackupCopy",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionEnableBackupCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotOptionBackupCopyRpoMins"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyRpoMins = (long?) content.GetValueForProperty("SnapshotOptionBackupCopyRpoMins",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapshotOptionEnableSnapCatalog"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionEnableSnapCatalog = (bool?) content.GetValueForProperty("SnapshotOptionEnableSnapCatalog",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionEnableSnapCatalog, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionStartTime"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionStartTime = (long?) content.GetValueForProperty("BackupCopyOptionStartTime",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionAction"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionAction = (string) content.GetValueForProperty("BackupCopyOptionAction",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionAction, global::System.Convert.ToString);
            }
            if (content.Contains("SettingFileSearch"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SettingFileSearch = (Commvault.Powershell.Models.IPlanFileSearch) content.GetValueForProperty("SettingFileSearch",((Commvault.Powershell.Models.IServerPlanInternal)this).SettingFileSearch, Commvault.Powershell.Models.PlanFileSearchTypeConverter.ConvertFrom);
            }
            if (content.Contains("SettingEnableAdvancedView"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SettingEnableAdvancedView = (bool?) content.GetValueForProperty("SettingEnableAdvancedView",((Commvault.Powershell.Models.IServerPlanInternal)this).SettingEnableAdvancedView, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SettingDeviceStreams"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SettingDeviceStreams = (long?) content.GetValueForProperty("SettingDeviceStreams",((Commvault.Powershell.Models.IServerPlanInternal)this).SettingDeviceStreams, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("OverrideRestrictionBackupContent"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionBackupContent = (string) content.GetValueForProperty("OverrideRestrictionBackupContent",((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionBackupContent, global::System.Convert.ToString);
            }
            if (content.Contains("OverrideRestrictionStoragePool"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionStoragePool = (string) content.GetValueForProperty("OverrideRestrictionStoragePool",((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionStoragePool, global::System.Convert.ToString);
            }
            if (content.Contains("OverrideRestrictionRpo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionRpo = (string) content.GetValueForProperty("OverrideRestrictionRpo",((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionRpo, global::System.Convert.ToString);
            }
            if (content.Contains("InheritSettingBasePlan"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingBasePlan = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("InheritSettingBasePlan",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingBasePlan, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("InheritSettingStoragePool"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingStoragePool = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("InheritSettingStoragePool",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingStoragePool, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("InheritSettingRpo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingRpo = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("InheritSettingRpo",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingRpo, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("InheritSettingBackupContent"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingBackupContent = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("InheritSettingBackupContent",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingBackupContent, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ParentInheritSettingBasePlan"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingBasePlan = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("ParentInheritSettingBasePlan",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingBasePlan, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("ParentInheritSettingStoragePool"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingStoragePool = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("ParentInheritSettingStoragePool",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingStoragePool, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ParentInheritSettingRpo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingRpo = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("ParentInheritSettingRpo",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingRpo, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ParentInheritSettingBackupContent"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingBackupContent = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("ParentInheritSettingBackupContent",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingBackupContent, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("AdditionalPropertyAddons"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyAddons = (Commvault.Powershell.Models.IPlanAddons) content.GetValueForProperty("AdditionalPropertyAddons",((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyAddons, Commvault.Powershell.Models.PlanAddonsTypeConverter.ConvertFrom);
            }
            if (content.Contains("AdditionalPropertyRpo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyRpo = (long?) content.GetValueForProperty("AdditionalPropertyRpo",((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyRpo, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("AdditionalPropertyStatus"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyStatus = (string) content.GetValueForProperty("AdditionalPropertyStatus",((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyStatus, global::System.Convert.ToString);
            }
            if (content.Contains("WorkloadTypes"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadTypes = (System.Collections.Generic.List<Commvault.Powershell.Models.IIdName>) content.GetValueForProperty("WorkloadTypes",((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadTypes, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            }
            if (content.Contains("WorkloadGroupTypes"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadGroupTypes = (System.Collections.Generic.List<string>) content.GetValueForProperty("WorkloadGroupTypes",((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadGroupTypes, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("WorkloadSolutions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadSolutions = (System.Collections.Generic.List<Commvault.Powershell.Models.IIdName>) content.GetValueForProperty("WorkloadSolutions",((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadSolutions, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            }
            if (content.Contains("GlobalConfigInfoScopeFilterQuery"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoScopeFilterQuery = (string) content.GetValueForProperty("GlobalConfigInfoScopeFilterQuery",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoScopeFilterQuery, global::System.Convert.ToString);
            }
            if (content.Contains("GlobalConfigInfoApplyOnAllCommCells"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoApplyOnAllCommCells = (bool?) content.GetValueForProperty("GlobalConfigInfoApplyOnAllCommCells",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoApplyOnAllCommCells, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("GlobalConfigInfoIsMarkedForDeletion"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoIsMarkedForDeletion = (bool?) content.GetValueForProperty("GlobalConfigInfoIsMarkedForDeletion",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoIsMarkedForDeletion, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("WindowNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).WindowNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("WindowNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IServerPlanInternal)this).WindowNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("WindowNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).WindowNumberOfDataReaderCount = (long?) content.GetValueForProperty("WindowNumberOfDataReaderCount",((Commvault.Powershell.Models.IServerPlanInternal)this).WindowNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("UnixNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).UnixNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("UnixNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IServerPlanInternal)this).UnixNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UnixNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).UnixNumberOfDataReaderCount = (long?) content.GetValueForProperty("UnixNumberOfDataReaderCount",((Commvault.Powershell.Models.IServerPlanInternal)this).UnixNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("MacNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).MacNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("MacNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IServerPlanInternal)this).MacNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("MacNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).MacNumberOfDataReaderCount = (long?) content.GetValueForProperty("MacNumberOfDataReaderCount",((Commvault.Powershell.Models.IServerPlanInternal)this).MacNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupFrequencySchedules"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupFrequencySchedules = (System.Collections.Generic.List<Commvault.Powershell.Models.IPlanSchedule>) content.GetValueForProperty("BackupFrequencySchedules",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupFrequencySchedules, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IPlanSchedule>(__y, Commvault.Powershell.Models.PlanScheduleTypeConverter.ConvertFrom));
            }
            if (content.Contains("BackupFrequencyOperationType"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupFrequencyOperationType = (string) content.GetValueForProperty("BackupFrequencyOperationType",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupFrequencyOperationType, global::System.Convert.ToString);
            }
            if (content.Contains("SlaUseSystemDefaultSla"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaUseSystemDefaultSla = (bool?) content.GetValueForProperty("SlaUseSystemDefaultSla",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaUseSystemDefaultSla, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SlaInheritedSlaPeriod"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaInheritedSlaPeriod = (long?) content.GetValueForProperty("SlaInheritedSlaPeriod",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaInheritedSlaPeriod, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SlaInheritedFrom"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaInheritedFrom = (string) content.GetValueForProperty("SlaInheritedFrom",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaInheritedFrom, global::System.Convert.ToString);
            }
            if (content.Contains("SlaPeriod"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaPeriod = (long?) content.GetValueForProperty("SlaPeriod",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaPeriod, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SlaExcludeFromSla"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaExcludeFromSla = (bool?) content.GetValueForProperty("SlaExcludeFromSla",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaExcludeFromSla, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SlaEnableAfterDelay"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaEnableAfterDelay = (long?) content.GetValueForProperty("SlaEnableAfterDelay",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaEnableAfterDelay, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SlaExclusionReason"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaExclusionReason = (string) content.GetValueForProperty("SlaExclusionReason",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaExclusionReason, global::System.Convert.ToString);
            }
            if (content.Contains("SlaLogSlaMinutes"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaLogSlaMinutes = (long?) content.GetValueForProperty("SlaLogSlaMinutes",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaLogSlaMinutes, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyFrequencyScheduleFrequencyType"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyScheduleFrequencyType = (string) content.GetValueForProperty("BackupCopyFrequencyScheduleFrequencyType",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyScheduleFrequencyType, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequency"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequency = (long?) content.GetValueForProperty("BackupCopyFrequency",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequency, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyFrequencyWeeklyDays"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyWeeklyDays = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupCopyFrequencyWeeklyDays",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyWeeklyDays, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupCopyFrequencyDayOfMonth"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyDayOfMonth = (long?) content.GetValueForProperty("BackupCopyFrequencyDayOfMonth",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyDayOfMonth, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyFrequencyWeekOfMonth"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyWeekOfMonth = (string) content.GetValueForProperty("BackupCopyFrequencyWeekOfMonth",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyWeekOfMonth, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyDayOfWeek"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyDayOfWeek = (string) content.GetValueForProperty("BackupCopyFrequencyDayOfWeek",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyDayOfWeek, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyMonthOfYear"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyMonthOfYear = (string) content.GetValueForProperty("BackupCopyFrequencyMonthOfYear",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyMonthOfYear, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyStartTime"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyStartTime = (long?) content.GetValueForProperty("BackupCopyFrequencyStartTime",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionBackupTypeToCopy"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionBackupTypeToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupTypeToCopy",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionBackupTypeToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionBackupFullToCopy"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionBackupFullToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupFullToCopy",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionBackupFullToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionEnableAlert"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionEnableAlert = (bool?) content.GetValueForProperty("BackupCopyOptionEnableAlert",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionEnableAlert, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionAlertInHours"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionAlertInHours = (long?) content.GetValueForProperty("BackupCopyOptionAlertInHours",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionAlertInHours, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionSkipAfterThresholdDays"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionSkipAfterThresholdDays = (long?) content.GetValueForProperty("BackupCopyOptionSkipAfterThresholdDays",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionSkipAfterThresholdDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("FileSearchEnabled"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchEnabled = (bool?) content.GetValueForProperty("FileSearchEnabled",((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("FileSearchStatus"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchStatus = (string) content.GetValueForProperty("FileSearchStatus",((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchStatus, global::System.Convert.ToString);
            }
            if (content.Contains("FileSearchStatusMessage"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchStatusMessage = (string) content.GetValueForProperty("FileSearchStatusMessage",((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchStatusMessage, global::System.Convert.ToString);
            }
            if (content.Contains("FileSearchErrors"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchErrors = (System.Collections.Generic.List<Commvault.Powershell.Models.IPlanFileSearchSetupError>) content.GetValueForProperty("FileSearchErrors",((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchErrors, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IPlanFileSearchSetupError>(__y, Commvault.Powershell.Models.PlanFileSearchSetupErrorTypeConverter.ConvertFrom));
            }
            if (content.Contains("InheritSettingsBasePlanId"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBasePlanId = (long?) content.GetValueForProperty("InheritSettingsBasePlanId",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBasePlanId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("InheritSettingsBasePlanName"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBasePlanName = (string) content.GetValueForProperty("InheritSettingsBasePlanName",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBasePlanName, global::System.Convert.ToString);
            }
            if (content.Contains("InheritSettingsStoragePoolOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsStoragePoolOverrideBase = (string) content.GetValueForProperty("InheritSettingsStoragePoolOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsStoragePoolOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("InheritSettingsStoragePoolOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsStoragePoolOverridden = (bool?) content.GetValueForProperty("InheritSettingsStoragePoolOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsStoragePoolOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("InheritSettingsRPOOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsRPOOverrideBase = (string) content.GetValueForProperty("InheritSettingsRPOOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsRPOOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("InheritSettingsRPOOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsRPOOverridden = (bool?) content.GetValueForProperty("InheritSettingsRPOOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsRPOOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("InheritSettingsBackupContentOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBackupContentOverrideBase = (string) content.GetValueForProperty("InheritSettingsBackupContentOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBackupContentOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("InheritSettingsBackupContentOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBackupContentOverridden = (bool?) content.GetValueForProperty("InheritSettingsBackupContentOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBackupContentOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ParentInheritSettingsBasePlanId"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBasePlanId = (long?) content.GetValueForProperty("ParentInheritSettingsBasePlanId",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBasePlanId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ParentInheritSettingsBasePlanName"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBasePlanName = (string) content.GetValueForProperty("ParentInheritSettingsBasePlanName",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBasePlanName, global::System.Convert.ToString);
            }
            if (content.Contains("ParentInheritSettingsStoragePoolOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsStoragePoolOverrideBase = (string) content.GetValueForProperty("ParentInheritSettingsStoragePoolOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsStoragePoolOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("ParentInheritSettingsStoragePoolOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsStoragePoolOverridden = (bool?) content.GetValueForProperty("ParentInheritSettingsStoragePoolOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsStoragePoolOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ParentInheritSettingsRPOOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsRPOOverrideBase = (string) content.GetValueForProperty("ParentInheritSettingsRPOOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsRPOOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("ParentInheritSettingsRPOOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsRPOOverridden = (bool?) content.GetValueForProperty("ParentInheritSettingsRPOOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsRPOOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ParentInheritSettingsBackupContentOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBackupContentOverrideBase = (string) content.GetValueForProperty("ParentInheritSettingsBackupContentOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBackupContentOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("ParentInheritSettingsBackupContentOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBackupContentOverridden = (bool?) content.GetValueForProperty("ParentInheritSettingsBackupContentOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBackupContentOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AddonDatabase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AddonDatabase = (bool?) content.GetValueForProperty("AddonDatabase",((Commvault.Powershell.Models.IServerPlanInternal)this).AddonDatabase, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AddonFileSystem"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AddonFileSystem = (bool?) content.GetValueForProperty("AddonFileSystem",((Commvault.Powershell.Models.IServerPlanInternal)this).AddonFileSystem, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AddonSnap"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AddonSnap = (bool?) content.GetValueForProperty("AddonSnap",((Commvault.Powershell.Models.IServerPlanInternal)this).AddonSnap, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AddonSnapStatus"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AddonSnapStatus = (string) content.GetValueForProperty("AddonSnapStatus",((Commvault.Powershell.Models.IServerPlanInternal)this).AddonSnapStatus, global::System.Convert.ToString);
            }
            if (content.Contains("AddonIndexCopy"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AddonIndexCopy = (bool?) content.GetValueForProperty("AddonIndexCopy",((Commvault.Powershell.Models.IServerPlanInternal)this).AddonIndexCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.ServerPlan"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal ServerPlan(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Plan"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).Plan = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("Plan",((Commvault.Powershell.Models.IServerPlanInternal)this).Plan, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupContent"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContent = (Commvault.Powershell.Models.IPlanContent) content.GetValueForProperty("BackupContent",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContent, Commvault.Powershell.Models.PlanContentTypeConverter.ConvertFrom);
            }
            if (content.Contains("Rpo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).Rpo = (Commvault.Powershell.Models.IServerPlanRpo) content.GetValueForProperty("Rpo",((Commvault.Powershell.Models.IServerPlanInternal)this).Rpo, Commvault.Powershell.Models.ServerPlanRpoTypeConverter.ConvertFrom);
            }
            if (content.Contains("DatabaseOptions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptions = (Commvault.Powershell.Models.IServerPlanDatabaseOptionsInfo) content.GetValueForProperty("DatabaseOptions",((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptions, Commvault.Powershell.Models.ServerPlanDatabaseOptionsInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotOptions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptions = (Commvault.Powershell.Models.IPlanSnapshotOptions) content.GetValueForProperty("SnapshotOptions",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptions, Commvault.Powershell.Models.PlanSnapshotOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Settings"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).Settings = (Commvault.Powershell.Models.IServerPlanSettings) content.GetValueForProperty("Settings",((Commvault.Powershell.Models.IServerPlanInternal)this).Settings, Commvault.Powershell.Models.ServerPlanSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("OverrideRestrictions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictions = (Commvault.Powershell.Models.IPlanOverrideSettings) content.GetValueForProperty("OverrideRestrictions",((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictions, Commvault.Powershell.Models.PlanOverrideSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("InheritSettings"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettings = (Commvault.Powershell.Models.IServerPlanInheritSettings) content.GetValueForProperty("InheritSettings",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettings, Commvault.Powershell.Models.ServerPlanInheritSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ParentInheritSettings"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettings = (Commvault.Powershell.Models.IServerPlanInheritSettings) content.GetValueForProperty("ParentInheritSettings",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettings, Commvault.Powershell.Models.ServerPlanInheritSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("AdditionalProperties"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalProperties = (Commvault.Powershell.Models.IPlanAdditionalProperties) content.GetValueForProperty("AdditionalProperties",((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalProperties, Commvault.Powershell.Models.PlanAdditionalPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("Workload"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).Workload = (Commvault.Powershell.Models.IPlanWorkloads) content.GetValueForProperty("Workload",((Commvault.Powershell.Models.IServerPlanInternal)this).Workload, Commvault.Powershell.Models.PlanWorkloadsTypeConverter.ConvertFrom);
            }
            if (content.Contains("GlobalConfigInfo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfo = (Commvault.Powershell.Models.IGlobalConfigInfo) content.GetValueForProperty("GlobalConfigInfo",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfo, Commvault.Powershell.Models.GlobalConfigInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegionsConfigured"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).RegionsConfigured = (bool?) content.GetValueForProperty("RegionsConfigured",((Commvault.Powershell.Models.IServerPlanInternal)this).RegionsConfigured, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupDestinations"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupDestinations = (System.Collections.Generic.List<Commvault.Powershell.Models.IPlanBackupDestination>) content.GetValueForProperty("BackupDestinations",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupDestinations, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IPlanBackupDestination>(__y, Commvault.Powershell.Models.PlanBackupDestinationTypeConverter.ConvertFrom));
            }
            if (content.Contains("BackupDestinationIds"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupDestinationIds = (System.Collections.Generic.List<long>) content.GetValueForProperty("BackupDestinationIds",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupDestinationIds, __y => TypeConverterExtensions.SelectToList<long>(__y, (__w)=> (long) global::System.Convert.ChangeType(__w, typeof(long))));
            }
            if (content.Contains("AssociatedEntities"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AssociatedEntities = (System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameCount>) content.GetValueForProperty("AssociatedEntities",((Commvault.Powershell.Models.IServerPlanInternal)this).AssociatedEntities, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IIdNameCount>(__y, Commvault.Powershell.Models.IdNameCountTypeConverter.ConvertFrom));
            }
            if (content.Contains("AllowPlanOverride"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AllowPlanOverride = (bool?) content.GetValueForProperty("AllowPlanOverride",((Commvault.Powershell.Models.IServerPlanInternal)this).AllowPlanOverride, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Permissions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).Permissions = (System.Collections.Generic.List<Commvault.Powershell.Models.IIdName>) content.GetValueForProperty("Permissions",((Commvault.Powershell.Models.IServerPlanInternal)this).Permissions, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            }
            if (content.Contains("GlobalConfigInfoId"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoId = (string) content.GetValueForProperty("GlobalConfigInfoId",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoId, global::System.Convert.ToString);
            }
            if (content.Contains("GlobalConfigInfoName"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoName = (string) content.GetValueForProperty("GlobalConfigInfoName",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoName, global::System.Convert.ToString);
            }
            if (content.Contains("GlobalConfigInfoCommcells"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoCommcells = (System.Collections.Generic.List<Commvault.Powershell.Models.IGlobalConfigCommcellInfo>) content.GetValueForProperty("GlobalConfigInfoCommcells",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoCommcells, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IGlobalConfigCommcellInfo>(__y, Commvault.Powershell.Models.GlobalConfigCommcellInfoTypeConverter.ConvertFrom));
            }
            if (content.Contains("GlobalConfigInfoScope"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoScope = (string) content.GetValueForProperty("GlobalConfigInfoScope",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoScope, global::System.Convert.ToString);
            }
            if (content.Contains("GlobalConfigInfoStatus"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoStatus = (string) content.GetValueForProperty("GlobalConfigInfoStatus",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoStatus, global::System.Convert.ToString);
            }
            if (content.Contains("PlanId"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).PlanId = (long?) content.GetValueForProperty("PlanId",((Commvault.Powershell.Models.IServerPlanInternal)this).PlanId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("PlanName"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).PlanName = (string) content.GetValueForProperty("PlanName",((Commvault.Powershell.Models.IServerPlanInternal)this).PlanName, global::System.Convert.ToString);
            }
            if (content.Contains("BackupContentWindowsNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentWindowsNumberOfDataReaders",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupContentUnixNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentUnixNumberOfDataReaders",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupContentMacNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("BackupContentMacNumberOfDataReaders",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("BackupContentWindowsIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentWindowsIncludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentWindowsExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentWindowsExcludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentWindowsFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentWindowsFilterToExcludePaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentWindowsFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentBackupSystemState"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentBackupSystemState = (bool?) content.GetValueForProperty("BackupContentBackupSystemState",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentBackupSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupContentBackupSystemStateOnlyWithFullBackup"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentBackupSystemStateOnlyWithFullBackup = (bool?) content.GetValueForProperty("BackupContentBackupSystemStateOnlyWithFullBackup",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentBackupSystemStateOnlyWithFullBackup, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupContentUseVssForSystemState"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUseVssForSystemState = (bool?) content.GetValueForProperty("BackupContentUseVssForSystemState",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUseVssForSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupContentMacIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentMacIncludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentMacExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentMacExcludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentMacFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentMacFilterToExcludePaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentMacFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentUnixIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentUnixIncludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentUnixExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentUnixExcludedPaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentUnixFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupContentUnixFilterToExcludePaths",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentUnixFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupContentForceUpdateProperties"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentForceUpdateProperties = (bool?) content.GetValueForProperty("BackupContentForceUpdateProperties",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupContentForceUpdateProperties, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RpoBackupFrequency"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).RpoBackupFrequency = (Commvault.Powershell.Models.IPlanSchedules) content.GetValueForProperty("RpoBackupFrequency",((Commvault.Powershell.Models.IServerPlanInternal)this).RpoBackupFrequency, Commvault.Powershell.Models.PlanSchedulesTypeConverter.ConvertFrom);
            }
            if (content.Contains("RpoSla"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).RpoSla = (Commvault.Powershell.Models.ISlaOptions) content.GetValueForProperty("RpoSla",((Commvault.Powershell.Models.IServerPlanInternal)this).RpoSla, Commvault.Powershell.Models.SlaOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("RpoBackupWindow"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).RpoBackupWindow = (System.Collections.Generic.List<Commvault.Powershell.Models.IDayAndTime>) content.GetValueForProperty("RpoBackupWindow",((Commvault.Powershell.Models.IServerPlanInternal)this).RpoBackupWindow, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IDayAndTime>(__y, Commvault.Powershell.Models.DayAndTimeTypeConverter.ConvertFrom));
            }
            if (content.Contains("RpoFullBackupWindow"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).RpoFullBackupWindow = (System.Collections.Generic.List<Commvault.Powershell.Models.IDayAndTime>) content.GetValueForProperty("RpoFullBackupWindow",((Commvault.Powershell.Models.IServerPlanInternal)this).RpoFullBackupWindow, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IDayAndTime>(__y, Commvault.Powershell.Models.DayAndTimeTypeConverter.ConvertFrom));
            }
            if (content.Contains("DatabaseOptionLogBackupRpoMins"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionLogBackupRpoMins = (long?) content.GetValueForProperty("DatabaseOptionLogBackupRpoMins",((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionLogBackupRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("DatabaseOptionRunFullBackupEvery"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionRunFullBackupEvery = (long?) content.GetValueForProperty("DatabaseOptionRunFullBackupEvery",((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionRunFullBackupEvery, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("DatabaseOptionUseDiskCacheForLogBackups"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionUseDiskCacheForLogBackups = (bool?) content.GetValueForProperty("DatabaseOptionUseDiskCacheForLogBackups",((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionUseDiskCacheForLogBackups, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("DatabaseOptionCommitFrequencyInHours"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionCommitFrequencyInHours = (long?) content.GetValueForProperty("DatabaseOptionCommitFrequencyInHours",((Commvault.Powershell.Models.IServerPlanInternal)this).DatabaseOptionCommitFrequencyInHours, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapshotOptionBackupCopyFrequency"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyFrequency = (Commvault.Powershell.Models.IBackupFrequencyPattern) content.GetValueForProperty("SnapshotOptionBackupCopyFrequency",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyFrequency, Commvault.Powershell.Models.BackupFrequencyPatternTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotOptionBackupCopyOptions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyOptions = (Commvault.Powershell.Models.IBackupCopyOptions) content.GetValueForProperty("SnapshotOptionBackupCopyOptions",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyOptions, Commvault.Powershell.Models.BackupCopyOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("SnapshotOptionEnableBackupCopy"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionEnableBackupCopy = (bool?) content.GetValueForProperty("SnapshotOptionEnableBackupCopy",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionEnableBackupCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SnapshotOptionBackupCopyRpoMins"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyRpoMins = (long?) content.GetValueForProperty("SnapshotOptionBackupCopyRpoMins",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionBackupCopyRpoMins, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SnapshotOptionEnableSnapCatalog"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionEnableSnapCatalog = (bool?) content.GetValueForProperty("SnapshotOptionEnableSnapCatalog",((Commvault.Powershell.Models.IServerPlanInternal)this).SnapshotOptionEnableSnapCatalog, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionStartTime"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionStartTime = (long?) content.GetValueForProperty("BackupCopyOptionStartTime",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionAction"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionAction = (string) content.GetValueForProperty("BackupCopyOptionAction",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionAction, global::System.Convert.ToString);
            }
            if (content.Contains("SettingFileSearch"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SettingFileSearch = (Commvault.Powershell.Models.IPlanFileSearch) content.GetValueForProperty("SettingFileSearch",((Commvault.Powershell.Models.IServerPlanInternal)this).SettingFileSearch, Commvault.Powershell.Models.PlanFileSearchTypeConverter.ConvertFrom);
            }
            if (content.Contains("SettingEnableAdvancedView"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SettingEnableAdvancedView = (bool?) content.GetValueForProperty("SettingEnableAdvancedView",((Commvault.Powershell.Models.IServerPlanInternal)this).SettingEnableAdvancedView, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SettingDeviceStreams"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SettingDeviceStreams = (long?) content.GetValueForProperty("SettingDeviceStreams",((Commvault.Powershell.Models.IServerPlanInternal)this).SettingDeviceStreams, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("OverrideRestrictionBackupContent"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionBackupContent = (string) content.GetValueForProperty("OverrideRestrictionBackupContent",((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionBackupContent, global::System.Convert.ToString);
            }
            if (content.Contains("OverrideRestrictionStoragePool"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionStoragePool = (string) content.GetValueForProperty("OverrideRestrictionStoragePool",((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionStoragePool, global::System.Convert.ToString);
            }
            if (content.Contains("OverrideRestrictionRpo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionRpo = (string) content.GetValueForProperty("OverrideRestrictionRpo",((Commvault.Powershell.Models.IServerPlanInternal)this).OverrideRestrictionRpo, global::System.Convert.ToString);
            }
            if (content.Contains("InheritSettingBasePlan"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingBasePlan = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("InheritSettingBasePlan",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingBasePlan, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("InheritSettingStoragePool"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingStoragePool = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("InheritSettingStoragePool",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingStoragePool, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("InheritSettingRpo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingRpo = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("InheritSettingRpo",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingRpo, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("InheritSettingBackupContent"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingBackupContent = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("InheritSettingBackupContent",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingBackupContent, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ParentInheritSettingBasePlan"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingBasePlan = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("ParentInheritSettingBasePlan",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingBasePlan, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("ParentInheritSettingStoragePool"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingStoragePool = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("ParentInheritSettingStoragePool",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingStoragePool, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ParentInheritSettingRpo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingRpo = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("ParentInheritSettingRpo",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingRpo, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ParentInheritSettingBackupContent"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingBackupContent = (Commvault.Powershell.Models.IPlanOverridenOptions) content.GetValueForProperty("ParentInheritSettingBackupContent",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingBackupContent, Commvault.Powershell.Models.PlanOverridenOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("AdditionalPropertyAddons"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyAddons = (Commvault.Powershell.Models.IPlanAddons) content.GetValueForProperty("AdditionalPropertyAddons",((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyAddons, Commvault.Powershell.Models.PlanAddonsTypeConverter.ConvertFrom);
            }
            if (content.Contains("AdditionalPropertyRpo"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyRpo = (long?) content.GetValueForProperty("AdditionalPropertyRpo",((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyRpo, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("AdditionalPropertyStatus"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyStatus = (string) content.GetValueForProperty("AdditionalPropertyStatus",((Commvault.Powershell.Models.IServerPlanInternal)this).AdditionalPropertyStatus, global::System.Convert.ToString);
            }
            if (content.Contains("WorkloadTypes"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadTypes = (System.Collections.Generic.List<Commvault.Powershell.Models.IIdName>) content.GetValueForProperty("WorkloadTypes",((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadTypes, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            }
            if (content.Contains("WorkloadGroupTypes"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadGroupTypes = (System.Collections.Generic.List<string>) content.GetValueForProperty("WorkloadGroupTypes",((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadGroupTypes, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("WorkloadSolutions"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadSolutions = (System.Collections.Generic.List<Commvault.Powershell.Models.IIdName>) content.GetValueForProperty("WorkloadSolutions",((Commvault.Powershell.Models.IServerPlanInternal)this).WorkloadSolutions, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            }
            if (content.Contains("GlobalConfigInfoScopeFilterQuery"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoScopeFilterQuery = (string) content.GetValueForProperty("GlobalConfigInfoScopeFilterQuery",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoScopeFilterQuery, global::System.Convert.ToString);
            }
            if (content.Contains("GlobalConfigInfoApplyOnAllCommCells"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoApplyOnAllCommCells = (bool?) content.GetValueForProperty("GlobalConfigInfoApplyOnAllCommCells",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoApplyOnAllCommCells, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("GlobalConfigInfoIsMarkedForDeletion"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoIsMarkedForDeletion = (bool?) content.GetValueForProperty("GlobalConfigInfoIsMarkedForDeletion",((Commvault.Powershell.Models.IServerPlanInternal)this).GlobalConfigInfoIsMarkedForDeletion, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("WindowNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).WindowNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("WindowNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IServerPlanInternal)this).WindowNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("WindowNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).WindowNumberOfDataReaderCount = (long?) content.GetValueForProperty("WindowNumberOfDataReaderCount",((Commvault.Powershell.Models.IServerPlanInternal)this).WindowNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("UnixNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).UnixNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("UnixNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IServerPlanInternal)this).UnixNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UnixNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).UnixNumberOfDataReaderCount = (long?) content.GetValueForProperty("UnixNumberOfDataReaderCount",((Commvault.Powershell.Models.IServerPlanInternal)this).UnixNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("MacNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).MacNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("MacNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IServerPlanInternal)this).MacNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("MacNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).MacNumberOfDataReaderCount = (long?) content.GetValueForProperty("MacNumberOfDataReaderCount",((Commvault.Powershell.Models.IServerPlanInternal)this).MacNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupFrequencySchedules"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupFrequencySchedules = (System.Collections.Generic.List<Commvault.Powershell.Models.IPlanSchedule>) content.GetValueForProperty("BackupFrequencySchedules",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupFrequencySchedules, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IPlanSchedule>(__y, Commvault.Powershell.Models.PlanScheduleTypeConverter.ConvertFrom));
            }
            if (content.Contains("BackupFrequencyOperationType"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupFrequencyOperationType = (string) content.GetValueForProperty("BackupFrequencyOperationType",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupFrequencyOperationType, global::System.Convert.ToString);
            }
            if (content.Contains("SlaUseSystemDefaultSla"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaUseSystemDefaultSla = (bool?) content.GetValueForProperty("SlaUseSystemDefaultSla",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaUseSystemDefaultSla, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SlaInheritedSlaPeriod"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaInheritedSlaPeriod = (long?) content.GetValueForProperty("SlaInheritedSlaPeriod",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaInheritedSlaPeriod, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SlaInheritedFrom"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaInheritedFrom = (string) content.GetValueForProperty("SlaInheritedFrom",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaInheritedFrom, global::System.Convert.ToString);
            }
            if (content.Contains("SlaPeriod"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaPeriod = (long?) content.GetValueForProperty("SlaPeriod",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaPeriod, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SlaExcludeFromSla"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaExcludeFromSla = (bool?) content.GetValueForProperty("SlaExcludeFromSla",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaExcludeFromSla, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("SlaEnableAfterDelay"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaEnableAfterDelay = (long?) content.GetValueForProperty("SlaEnableAfterDelay",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaEnableAfterDelay, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("SlaExclusionReason"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaExclusionReason = (string) content.GetValueForProperty("SlaExclusionReason",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaExclusionReason, global::System.Convert.ToString);
            }
            if (content.Contains("SlaLogSlaMinutes"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).SlaLogSlaMinutes = (long?) content.GetValueForProperty("SlaLogSlaMinutes",((Commvault.Powershell.Models.IServerPlanInternal)this).SlaLogSlaMinutes, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyFrequencyScheduleFrequencyType"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyScheduleFrequencyType = (string) content.GetValueForProperty("BackupCopyFrequencyScheduleFrequencyType",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyScheduleFrequencyType, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequency"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequency = (long?) content.GetValueForProperty("BackupCopyFrequency",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequency, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyFrequencyWeeklyDays"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyWeeklyDays = (System.Collections.Generic.List<string>) content.GetValueForProperty("BackupCopyFrequencyWeeklyDays",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyWeeklyDays, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupCopyFrequencyDayOfMonth"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyDayOfMonth = (long?) content.GetValueForProperty("BackupCopyFrequencyDayOfMonth",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyDayOfMonth, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyFrequencyWeekOfMonth"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyWeekOfMonth = (string) content.GetValueForProperty("BackupCopyFrequencyWeekOfMonth",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyWeekOfMonth, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyDayOfWeek"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyDayOfWeek = (string) content.GetValueForProperty("BackupCopyFrequencyDayOfWeek",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyDayOfWeek, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyMonthOfYear"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyMonthOfYear = (string) content.GetValueForProperty("BackupCopyFrequencyMonthOfYear",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyMonthOfYear, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyFrequencyStartTime"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyStartTime = (long?) content.GetValueForProperty("BackupCopyFrequencyStartTime",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyFrequencyStartTime, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionBackupTypeToCopy"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionBackupTypeToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupTypeToCopy",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionBackupTypeToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionBackupFullToCopy"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionBackupFullToCopy = (string) content.GetValueForProperty("BackupCopyOptionBackupFullToCopy",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionBackupFullToCopy, global::System.Convert.ToString);
            }
            if (content.Contains("BackupCopyOptionEnableAlert"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionEnableAlert = (bool?) content.GetValueForProperty("BackupCopyOptionEnableAlert",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionEnableAlert, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupCopyOptionAlertInHours"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionAlertInHours = (long?) content.GetValueForProperty("BackupCopyOptionAlertInHours",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionAlertInHours, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("BackupCopyOptionSkipAfterThresholdDays"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionSkipAfterThresholdDays = (long?) content.GetValueForProperty("BackupCopyOptionSkipAfterThresholdDays",((Commvault.Powershell.Models.IServerPlanInternal)this).BackupCopyOptionSkipAfterThresholdDays, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("FileSearchEnabled"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchEnabled = (bool?) content.GetValueForProperty("FileSearchEnabled",((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("FileSearchStatus"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchStatus = (string) content.GetValueForProperty("FileSearchStatus",((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchStatus, global::System.Convert.ToString);
            }
            if (content.Contains("FileSearchStatusMessage"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchStatusMessage = (string) content.GetValueForProperty("FileSearchStatusMessage",((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchStatusMessage, global::System.Convert.ToString);
            }
            if (content.Contains("FileSearchErrors"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchErrors = (System.Collections.Generic.List<Commvault.Powershell.Models.IPlanFileSearchSetupError>) content.GetValueForProperty("FileSearchErrors",((Commvault.Powershell.Models.IServerPlanInternal)this).FileSearchErrors, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IPlanFileSearchSetupError>(__y, Commvault.Powershell.Models.PlanFileSearchSetupErrorTypeConverter.ConvertFrom));
            }
            if (content.Contains("InheritSettingsBasePlanId"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBasePlanId = (long?) content.GetValueForProperty("InheritSettingsBasePlanId",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBasePlanId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("InheritSettingsBasePlanName"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBasePlanName = (string) content.GetValueForProperty("InheritSettingsBasePlanName",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBasePlanName, global::System.Convert.ToString);
            }
            if (content.Contains("InheritSettingsStoragePoolOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsStoragePoolOverrideBase = (string) content.GetValueForProperty("InheritSettingsStoragePoolOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsStoragePoolOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("InheritSettingsStoragePoolOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsStoragePoolOverridden = (bool?) content.GetValueForProperty("InheritSettingsStoragePoolOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsStoragePoolOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("InheritSettingsRPOOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsRPOOverrideBase = (string) content.GetValueForProperty("InheritSettingsRPOOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsRPOOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("InheritSettingsRPOOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsRPOOverridden = (bool?) content.GetValueForProperty("InheritSettingsRPOOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsRPOOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("InheritSettingsBackupContentOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBackupContentOverrideBase = (string) content.GetValueForProperty("InheritSettingsBackupContentOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBackupContentOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("InheritSettingsBackupContentOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBackupContentOverridden = (bool?) content.GetValueForProperty("InheritSettingsBackupContentOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).InheritSettingsBackupContentOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ParentInheritSettingsBasePlanId"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBasePlanId = (long?) content.GetValueForProperty("ParentInheritSettingsBasePlanId",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBasePlanId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ParentInheritSettingsBasePlanName"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBasePlanName = (string) content.GetValueForProperty("ParentInheritSettingsBasePlanName",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBasePlanName, global::System.Convert.ToString);
            }
            if (content.Contains("ParentInheritSettingsStoragePoolOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsStoragePoolOverrideBase = (string) content.GetValueForProperty("ParentInheritSettingsStoragePoolOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsStoragePoolOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("ParentInheritSettingsStoragePoolOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsStoragePoolOverridden = (bool?) content.GetValueForProperty("ParentInheritSettingsStoragePoolOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsStoragePoolOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ParentInheritSettingsRPOOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsRPOOverrideBase = (string) content.GetValueForProperty("ParentInheritSettingsRPOOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsRPOOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("ParentInheritSettingsRPOOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsRPOOverridden = (bool?) content.GetValueForProperty("ParentInheritSettingsRPOOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsRPOOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ParentInheritSettingsBackupContentOverrideBase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBackupContentOverrideBase = (string) content.GetValueForProperty("ParentInheritSettingsBackupContentOverrideBase",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBackupContentOverrideBase, global::System.Convert.ToString);
            }
            if (content.Contains("ParentInheritSettingsBackupContentOverridden"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBackupContentOverridden = (bool?) content.GetValueForProperty("ParentInheritSettingsBackupContentOverridden",((Commvault.Powershell.Models.IServerPlanInternal)this).ParentInheritSettingsBackupContentOverridden, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AddonDatabase"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AddonDatabase = (bool?) content.GetValueForProperty("AddonDatabase",((Commvault.Powershell.Models.IServerPlanInternal)this).AddonDatabase, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AddonFileSystem"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AddonFileSystem = (bool?) content.GetValueForProperty("AddonFileSystem",((Commvault.Powershell.Models.IServerPlanInternal)this).AddonFileSystem, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AddonSnap"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AddonSnap = (bool?) content.GetValueForProperty("AddonSnap",((Commvault.Powershell.Models.IServerPlanInternal)this).AddonSnap, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AddonSnapStatus"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AddonSnapStatus = (string) content.GetValueForProperty("AddonSnapStatus",((Commvault.Powershell.Models.IServerPlanInternal)this).AddonSnapStatus, global::System.Convert.ToString);
            }
            if (content.Contains("AddonIndexCopy"))
            {
                ((Commvault.Powershell.Models.IServerPlanInternal)this).AddonIndexCopy = (bool?) content.GetValueForProperty("AddonIndexCopy",((Commvault.Powershell.Models.IServerPlanInternal)this).AddonIndexCopy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    [System.ComponentModel.TypeConverter(typeof(ServerPlanTypeConverter))]
    public partial interface IServerPlan

    {

    }
}