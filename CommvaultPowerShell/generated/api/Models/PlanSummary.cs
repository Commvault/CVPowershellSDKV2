// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class PlanSummary :
        Commvault.Powershell.Models.IPlanSummary,
        Commvault.Powershell.Models.IPlanSummaryInternal
    {

        /// <summary>Backing field for <see cref="AssociatedEntities" /> property.</summary>
        private long? _associatedEntities;

        /// <summary>Count of associated entities for the plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? AssociatedEntities { get => this._associatedEntities; set => this._associatedEntities = value; }

        /// <summary>Backing field for <see cref="Commcell" /> property.</summary>
        private string _commcell;

        /// <summary>Tells which commcell this plan belongs to.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Commcell { get => this._commcell; set => this._commcell = value; }

        /// <summary>Internal Acessors for Company</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanSummaryInternal.Company { get => (this._company = this._company ?? new Commvault.Powershell.Models.IdName()); set { {_company = value;} } }

        /// <summary>Internal Acessors for ParentPlan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanSummaryInternal.ParentPlan { get => (this._parentPlan = this._parentPlan ?? new Commvault.Powershell.Models.IdName()); set { {_parentPlan = value;} } }

        /// <summary>Internal Acessors for Plan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPlanSummaryInternal.Plan { get => (this._plan = this._plan ?? new Commvault.Powershell.Models.IdName()); set { {_plan = value;} } }

        /// <summary>Backing field for <see cref="Company" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _company;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Company { get => (this._company = this._company ?? new Commvault.Powershell.Models.IdName()); set => this._company = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? CompanyId { get => ((Commvault.Powershell.Models.IIdNameInternal)Company).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Company).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string CompanyName { get => ((Commvault.Powershell.Models.IIdNameInternal)Company).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Company).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Derivable" /> property.</summary>
        private bool? _derivable;

        /// <summary>Tells if this plan can be used to derive from and create a new child plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? Derivable { get => this._derivable; set => this._derivable = value; }

        /// <summary>Backing field for <see cref="MissingEntities" /> property.</summary>
        private Commvault.Powershell.Models.IIdName[] _missingEntities;

        /// <summary>For plans in incomplete state contains list of entities missing from the plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdName[] MissingEntities { get => this._missingEntities; set => this._missingEntities = value; }

        /// <summary>Backing field for <see cref="NumberOfCopies" /> property.</summary>
        private long? _numberOfCopies;

        /// <summary>Number of copies for the plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? NumberOfCopies { get => this._numberOfCopies; set => this._numberOfCopies = value; }

        /// <summary>Backing field for <see cref="ParentPlan" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _parentPlan;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName ParentPlan { get => (this._parentPlan = this._parentPlan ?? new Commvault.Powershell.Models.IdName()); set => this._parentPlan = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? ParentPlanId { get => ((Commvault.Powershell.Models.IIdNameInternal)ParentPlan).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)ParentPlan).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string ParentPlanName { get => ((Commvault.Powershell.Models.IIdNameInternal)ParentPlan).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)ParentPlan).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Plan" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _plan;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Plan { get => (this._plan = this._plan ?? new Commvault.Powershell.Models.IdName()); set => this._plan = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? PlanId { get => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string PlanName { get => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Name = value ?? null; }

        /// <summary>Backing field for <see cref="PlanType" /> property.</summary>
        private string _planType;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string PlanType { get => this._planType; set => this._planType = value; }

        /// <summary>Backing field for <see cref="ResourcePool" /> property.</summary>
        private Commvault.Powershell.Models.IIdName[] _resourcePool;

        /// <summary>
        /// This lists the various resource Pools of different app types associated with storage pools of plan
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdName[] ResourcePool { get => this._resourcePool; set => this._resourcePool = value; }

        /// <summary>Backing field for <see cref="Rpo" /> property.</summary>
        private long? _rpo;

        /// <summary>RPO in minutes for the plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? Rpo { get => this._rpo; set => this._rpo = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="Tags" /> property.</summary>
        private Commvault.Powershell.Models.IIdNameValue[] _tags;

        /// <summary>Tags associated with this plan</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IIdNameValue[] Tags { get => this._tags; set => this._tags = value; }

        /// <summary>Backing field for <see cref="TargetApp" /> property.</summary>
        private string[] _targetApp;

        /// <summary>This tells the content indexing target apps for data classification plans</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string[] TargetApp { get => this._targetApp; set => this._targetApp = value; }

        /// <summary>Creates an new <see cref="PlanSummary" /> instance.</summary>
        public PlanSummary()
        {

        }
    }
    public partial interface IPlanSummary :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Count of associated entities for the plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Count of associated entities for the plan",
        SerializedName = @"associatedEntities",
        PossibleTypes = new [] { typeof(long) })]
        long? AssociatedEntities { get; set; }
        /// <summary>Tells which commcell this plan belongs to.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tells which commcell this plan belongs to.",
        SerializedName = @"commcell",
        PossibleTypes = new [] { typeof(string) })]
        string Commcell { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? CompanyId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CompanyName { get; set; }
        /// <summary>Tells if this plan can be used to derive from and create a new child plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tells if this plan can be used to derive from and create a new child plan",
        SerializedName = @"derivable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Derivable { get; set; }
        /// <summary>For plans in incomplete state contains list of entities missing from the plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For plans in incomplete state contains list of entities missing from the plan",
        SerializedName = @"missingEntities",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] MissingEntities { get; set; }
        /// <summary>Number of copies for the plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of copies for the plan",
        SerializedName = @"numberOfCopies",
        PossibleTypes = new [] { typeof(long) })]
        long? NumberOfCopies { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? ParentPlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ParentPlanName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? PlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string PlanName { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"planType",
        PossibleTypes = new [] { typeof(string) })]
        string PlanType { get; set; }
        /// <summary>
        /// This lists the various resource Pools of different app types associated with storage pools of plan
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This lists the various resource Pools of different app types associated with storage pools of plan",
        SerializedName = @"resourcePool",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        Commvault.Powershell.Models.IIdName[] ResourcePool { get; set; }
        /// <summary>RPO in minutes for the plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"RPO in minutes for the plan",
        SerializedName = @"RPO",
        PossibleTypes = new [] { typeof(long) })]
        long? Rpo { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string Status { get; set; }
        /// <summary>Tags associated with this plan</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tags associated with this plan",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdNameValue) })]
        Commvault.Powershell.Models.IIdNameValue[] Tags { get; set; }
        /// <summary>This tells the content indexing target apps for data classification plans</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This tells the content indexing target apps for data classification plans",
        SerializedName = @"targetApp",
        PossibleTypes = new [] { typeof(string) })]
        string[] TargetApp { get; set; }

    }
    internal partial interface IPlanSummaryInternal

    {
        /// <summary>Count of associated entities for the plan</summary>
        long? AssociatedEntities { get; set; }
        /// <summary>Tells which commcell this plan belongs to.</summary>
        string Commcell { get; set; }

        Commvault.Powershell.Models.IIdName Company { get; set; }

        long? CompanyId { get; set; }

        string CompanyName { get; set; }
        /// <summary>Tells if this plan can be used to derive from and create a new child plan</summary>
        bool? Derivable { get; set; }
        /// <summary>For plans in incomplete state contains list of entities missing from the plan</summary>
        Commvault.Powershell.Models.IIdName[] MissingEntities { get; set; }
        /// <summary>Number of copies for the plan</summary>
        long? NumberOfCopies { get; set; }

        Commvault.Powershell.Models.IIdName ParentPlan { get; set; }

        long? ParentPlanId { get; set; }

        string ParentPlanName { get; set; }

        Commvault.Powershell.Models.IIdName Plan { get; set; }

        long? PlanId { get; set; }

        string PlanName { get; set; }

        string PlanType { get; set; }
        /// <summary>
        /// This lists the various resource Pools of different app types associated with storage pools of plan
        /// </summary>
        Commvault.Powershell.Models.IIdName[] ResourcePool { get; set; }
        /// <summary>RPO in minutes for the plan</summary>
        long? Rpo { get; set; }

        string Status { get; set; }
        /// <summary>Tags associated with this plan</summary>
        Commvault.Powershell.Models.IIdNameValue[] Tags { get; set; }
        /// <summary>This tells the content indexing target apps for data classification plans</summary>
        string[] TargetApp { get; set; }

    }
}