// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.2, generator: @autorest/powershell@3.0.494)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    /// <summary>Cloud Storage Details</summary>
    [System.ComponentModel.TypeConverter(typeof(CloudStorageDetailsTypeConverter))]
    public partial class CloudStorageDetails
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.CloudStorageDetails"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal CloudStorageDetails(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Id"))
            {
                ((Commvault.Powershell.Models.IIdNameInternal)this).Id = (long?) content.GetValueForProperty("Id",((Commvault.Powershell.Models.IIdNameInternal)this).Id, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("Name"))
            {
                ((Commvault.Powershell.Models.IIdNameInternal)this).Name = (string) content.GetValueForProperty("Name",((Commvault.Powershell.Models.IIdNameInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("EncryptionKeyLength"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionKeyLength = (long?) content.GetValueForProperty("EncryptionKeyLength",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionKeyLength, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("CacheConfigurationMetadataCache"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurationMetadataCache = (Commvault.Powershell.Models.IMetadataCache[]) content.GetValueForProperty("CacheConfigurationMetadataCache",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurationMetadataCache, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IMetadataCache>(__y, Commvault.Powershell.Models.MetadataCacheTypeConverter.ConvertFrom));
            }
            if (content.Contains("GeneralType"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralType = (string) content.GetValueForProperty("GeneralType",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralType, global::System.Convert.ToString);
            }
            if (content.Contains("GeneralVendorType"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralVendorType = (string) content.GetValueForProperty("GeneralVendorType",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralVendorType, global::System.Convert.ToString);
            }
            if (content.Contains("GeneralTotalCapacity"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralTotalCapacity = (long?) content.GetValueForProperty("GeneralTotalCapacity",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralTotalCapacity, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("GeneralFreeSpace"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralFreeSpace = (long?) content.GetValueForProperty("GeneralFreeSpace",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralFreeSpace, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("GeneralSizeOndisk"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralSizeOndisk = (long?) content.GetValueForProperty("GeneralSizeOndisk",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralSizeOndisk, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("GeneralDeduplicationSavings"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralDeduplicationSavings = (string) content.GetValueForProperty("GeneralDeduplicationSavings",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralDeduplicationSavings, global::System.Convert.ToString);
            }
            if (content.Contains("EncryptionKeyManagementServer"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionKeyManagementServer = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("EncryptionKeyManagementServer",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionKeyManagementServer, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("EncryptionEncrypt"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionEncrypt = (bool?) content.GetValueForProperty("EncryptionEncrypt",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionEncrypt, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("EncryptionCipher"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionCipher = (string) content.GetValueForProperty("EncryptionCipher",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionCipher, global::System.Convert.ToString);
            }
            if (content.Contains("CacheConfigurationEnable"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurationEnable = (bool?) content.GetValueForProperty("CacheConfigurationEnable",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurationEnable, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("KeyManagementServerId"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).KeyManagementServerId = (long?) content.GetValueForProperty("KeyManagementServerId",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).KeyManagementServerId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("KeyManagementServerName"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).KeyManagementServerName = (string) content.GetValueForProperty("KeyManagementServerName",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).KeyManagementServerName, global::System.Convert.ToString);
            }
            if (content.Contains("General"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).General = (Commvault.Powershell.Models.ICloudStorageGeneralInfo) content.GetValueForProperty("General",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).General, Commvault.Powershell.Models.CloudStorageGeneralInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("Encryption"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Encryption = (Commvault.Powershell.Models.IEncryption) content.GetValueForProperty("Encryption",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Encryption, Commvault.Powershell.Models.EncryptionTypeConverter.ConvertFrom);
            }
            if (content.Contains("CacheConfigurations"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurations = (Commvault.Powershell.Models.ICacheConfigurations) content.GetValueForProperty("CacheConfigurations",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurations, Commvault.Powershell.Models.CacheConfigurationsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Bucket"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Bucket = (Commvault.Powershell.Models.IIdNameStatus[]) content.GetValueForProperty("Bucket",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Bucket, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdNameStatus>(__y, Commvault.Powershell.Models.IdNameStatusTypeConverter.ConvertFrom));
            }
            if (content.Contains("Security"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Security = (Commvault.Powershell.Models.ISecurityAssoc[]) content.GetValueForProperty("Security",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Security, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.ISecurityAssoc>(__y, Commvault.Powershell.Models.SecurityAssocTypeConverter.ConvertFrom));
            }
            if (content.Contains("AssociatedPlans"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).AssociatedPlans = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("AssociatedPlans",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).AssociatedPlans, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.CloudStorageDetails"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal CloudStorageDetails(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Id"))
            {
                ((Commvault.Powershell.Models.IIdNameInternal)this).Id = (long?) content.GetValueForProperty("Id",((Commvault.Powershell.Models.IIdNameInternal)this).Id, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("Name"))
            {
                ((Commvault.Powershell.Models.IIdNameInternal)this).Name = (string) content.GetValueForProperty("Name",((Commvault.Powershell.Models.IIdNameInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("EncryptionKeyLength"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionKeyLength = (long?) content.GetValueForProperty("EncryptionKeyLength",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionKeyLength, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("CacheConfigurationMetadataCache"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurationMetadataCache = (Commvault.Powershell.Models.IMetadataCache[]) content.GetValueForProperty("CacheConfigurationMetadataCache",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurationMetadataCache, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IMetadataCache>(__y, Commvault.Powershell.Models.MetadataCacheTypeConverter.ConvertFrom));
            }
            if (content.Contains("GeneralType"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralType = (string) content.GetValueForProperty("GeneralType",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralType, global::System.Convert.ToString);
            }
            if (content.Contains("GeneralVendorType"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralVendorType = (string) content.GetValueForProperty("GeneralVendorType",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralVendorType, global::System.Convert.ToString);
            }
            if (content.Contains("GeneralTotalCapacity"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralTotalCapacity = (long?) content.GetValueForProperty("GeneralTotalCapacity",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralTotalCapacity, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("GeneralFreeSpace"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralFreeSpace = (long?) content.GetValueForProperty("GeneralFreeSpace",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralFreeSpace, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("GeneralSizeOndisk"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralSizeOndisk = (long?) content.GetValueForProperty("GeneralSizeOndisk",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralSizeOndisk, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("GeneralDeduplicationSavings"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralDeduplicationSavings = (string) content.GetValueForProperty("GeneralDeduplicationSavings",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).GeneralDeduplicationSavings, global::System.Convert.ToString);
            }
            if (content.Contains("EncryptionKeyManagementServer"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionKeyManagementServer = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("EncryptionKeyManagementServer",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionKeyManagementServer, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("EncryptionEncrypt"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionEncrypt = (bool?) content.GetValueForProperty("EncryptionEncrypt",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionEncrypt, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("EncryptionCipher"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionCipher = (string) content.GetValueForProperty("EncryptionCipher",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).EncryptionCipher, global::System.Convert.ToString);
            }
            if (content.Contains("CacheConfigurationEnable"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurationEnable = (bool?) content.GetValueForProperty("CacheConfigurationEnable",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurationEnable, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("KeyManagementServerId"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).KeyManagementServerId = (long?) content.GetValueForProperty("KeyManagementServerId",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).KeyManagementServerId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("KeyManagementServerName"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).KeyManagementServerName = (string) content.GetValueForProperty("KeyManagementServerName",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).KeyManagementServerName, global::System.Convert.ToString);
            }
            if (content.Contains("General"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).General = (Commvault.Powershell.Models.ICloudStorageGeneralInfo) content.GetValueForProperty("General",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).General, Commvault.Powershell.Models.CloudStorageGeneralInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("Encryption"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Encryption = (Commvault.Powershell.Models.IEncryption) content.GetValueForProperty("Encryption",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Encryption, Commvault.Powershell.Models.EncryptionTypeConverter.ConvertFrom);
            }
            if (content.Contains("CacheConfigurations"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurations = (Commvault.Powershell.Models.ICacheConfigurations) content.GetValueForProperty("CacheConfigurations",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).CacheConfigurations, Commvault.Powershell.Models.CacheConfigurationsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Bucket"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Bucket = (Commvault.Powershell.Models.IIdNameStatus[]) content.GetValueForProperty("Bucket",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Bucket, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdNameStatus>(__y, Commvault.Powershell.Models.IdNameStatusTypeConverter.ConvertFrom));
            }
            if (content.Contains("Security"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Security = (Commvault.Powershell.Models.ISecurityAssoc[]) content.GetValueForProperty("Security",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).Security, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.ISecurityAssoc>(__y, Commvault.Powershell.Models.SecurityAssocTypeConverter.ConvertFrom));
            }
            if (content.Contains("AssociatedPlans"))
            {
                ((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).AssociatedPlans = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("AssociatedPlans",((Commvault.Powershell.Models.ICloudStorageDetailsObjectInternal)this).AssociatedPlans, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.CloudStorageDetails"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.ICloudStorageDetails" />.</returns>
        public static Commvault.Powershell.Models.ICloudStorageDetails DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new CloudStorageDetails(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.CloudStorageDetails"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.ICloudStorageDetails" />.</returns>
        public static Commvault.Powershell.Models.ICloudStorageDetails DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new CloudStorageDetails(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="CloudStorageDetails" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="CloudStorageDetails" /> model class.</returns>
        public static Commvault.Powershell.Models.ICloudStorageDetails FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Cloud Storage Details
    [System.ComponentModel.TypeConverter(typeof(CloudStorageDetailsTypeConverter))]
    public partial interface ICloudStorageDetails

    {

    }
}