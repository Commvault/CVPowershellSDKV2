// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>This feature applies only to File System Agents</summary>
    public partial class CreatePlanSnapshotOptions :
        Commvault.Powershell.Models.ICreatePlanSnapshotOptions,
        Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal
    {

        /// <summary>Which type of action should be followed if backup copy falls behind</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyOptionAction { get => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).Action; set => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).Action = value ?? null; }

        /// <summary>Alert to throw when backup copy falls behind in hours</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyOptionAlertInHours { get => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).AlertInHours; set => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).AlertInHours = value ?? default(long); }

        /// <summary>
        /// Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default
        /// is LAST while adding new backup destination.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyOptionBackupFullToCopy { get => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).BackupFullToCopy; set => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).BackupFullToCopy = value ?? null; }

        /// <summary>Backup type to copy for backup copy operation</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string BackupCopyOptionBackupTypeToCopy { get => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).BackupTypeToCopy; set => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).BackupTypeToCopy = value ?? null; }

        /// <summary>Flag to enable backup copy fallen behind alert</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? BackupCopyOptionEnableAlert { get => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).EnableAlert; set => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).EnableAlert = value ?? default(bool); }

        /// <summary>The allowable delay in days before a backup copy job is considered overdue</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyOptionSkipAfterThresholdDays { get => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).SkipAfterThresholdDays; set => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).SkipAfterThresholdDays = value ?? default(long); }

        /// <summary>
        /// Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap
        /// copy.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BackupCopyOptionStartTime { get => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).StartTime; set => ((Commvault.Powershell.Models.IBackupCopyOptionsInternal)BackupCopyOptions).StartTime = value ?? default(long); }

        /// <summary>Backing field for <see cref="BackupCopyOptions" /> property.</summary>
        private Commvault.Powershell.Models.IBackupCopyOptions _backupCopyOptions;

        /// <summary>Options for snap management with backup copy</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IBackupCopyOptions BackupCopyOptions { get => (this._backupCopyOptions = this._backupCopyOptions ?? new Commvault.Powershell.Models.BackupCopyOptions()); set => this._backupCopyOptions = value; }

        /// <summary>Backing field for <see cref="BackupCopyRpoMins" /> property.</summary>
        private long? _backupCopyRpoMins;

        /// <summary>Backup copy RPO in minutes</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? BackupCopyRpoMins { get => this._backupCopyRpoMins; set => this._backupCopyRpoMins = value; }

        /// <summary>Internal Acessors for BackupCopyOptions</summary>
        Commvault.Powershell.Models.IBackupCopyOptions Commvault.Powershell.Models.ICreatePlanSnapshotOptionsInternal.BackupCopyOptions { get => (this._backupCopyOptions = this._backupCopyOptions ?? new Commvault.Powershell.Models.BackupCopyOptions()); set { {_backupCopyOptions = value;} } }

        /// <summary>Backing field for <see cref="EnableBackupCopy" /> property.</summary>
        private bool? _enableBackupCopy;

        /// <summary>Flag to enable backup copy</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? EnableBackupCopy { get => this._enableBackupCopy; set => this._enableBackupCopy = value; }

        /// <summary>Backing field for <see cref="EnableSnapCatalog" /> property.</summary>
        private bool? _enableSnapCatalog;

        /// <summary>Flag to enable deferred snapshot cataloging</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? EnableSnapCatalog { get => this._enableSnapCatalog; set => this._enableSnapCatalog = value; }

        /// <summary>Backing field for <see cref="RetentionPeriodDays" /> property.</summary>
        private long? _retentionPeriodDays;

        /// <summary>
        /// Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not specified,
        /// this takes precedence.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? RetentionPeriodDays { get => this._retentionPeriodDays; set => this._retentionPeriodDays = value; }

        /// <summary>Backing field for <see cref="SnapRecoveryPoints" /> property.</summary>
        private long? _snapRecoveryPoints;

        /// <summary>
        /// Number of snap recovery points for default snap copy for retention. Can be specified instead of retention period in Days
        /// for default snap copy.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? SnapRecoveryPoints { get => this._snapRecoveryPoints; set => this._snapRecoveryPoints = value; }

        /// <summary>Creates an new <see cref="CreatePlanSnapshotOptions" /> instance.</summary>
        public CreatePlanSnapshotOptions()
        {

        }
    }
    /// This feature applies only to File System Agents
    public partial interface ICreatePlanSnapshotOptions :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>Which type of action should be followed if backup copy falls behind</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Which type of action should be followed if backup copy falls behind",
        SerializedName = @"action",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyOptionAction { get; set; }
        /// <summary>Alert to throw when backup copy falls behind in hours</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Alert to throw when backup copy falls behind in hours",
        SerializedName = @"alertInHours",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyOptionAlertInHours { get; set; }
        /// <summary>
        /// Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default
        /// is LAST while adding new backup destination.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default is LAST while adding new backup destination.",
        SerializedName = @"backupFullToCopy",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyOptionBackupFullToCopy { get; set; }
        /// <summary>Backup type to copy for backup copy operation</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Backup type to copy for backup copy operation",
        SerializedName = @"backupTypeToCopy",
        PossibleTypes = new [] { typeof(string) })]
        string BackupCopyOptionBackupTypeToCopy { get; set; }
        /// <summary>Flag to enable backup copy fallen behind alert</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to enable backup copy fallen behind alert",
        SerializedName = @"enableAlert",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BackupCopyOptionEnableAlert { get; set; }
        /// <summary>The allowable delay in days before a backup copy job is considered overdue</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The allowable delay in days before a backup copy job is considered overdue",
        SerializedName = @"skipAfterThresholdDays",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyOptionSkipAfterThresholdDays { get; set; }
        /// <summary>
        /// Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap
        /// copy.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap copy.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyOptionStartTime { get; set; }
        /// <summary>Backup copy RPO in minutes</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Backup copy RPO in minutes",
        SerializedName = @"backupCopyRPOMins",
        PossibleTypes = new [] { typeof(long) })]
        long? BackupCopyRpoMins { get; set; }
        /// <summary>Flag to enable backup copy</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to enable backup copy",
        SerializedName = @"enableBackupCopy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableBackupCopy { get; set; }
        /// <summary>Flag to enable deferred snapshot cataloging</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag to enable deferred snapshot cataloging",
        SerializedName = @"enableSnapCatalog",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableSnapCatalog { get; set; }
        /// <summary>
        /// Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not specified,
        /// this takes precedence.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not specified, this takes precedence.",
        SerializedName = @"retentionPeriodDays",
        PossibleTypes = new [] { typeof(long) })]
        long? RetentionPeriodDays { get; set; }
        /// <summary>
        /// Number of snap recovery points for default snap copy for retention. Can be specified instead of retention period in Days
        /// for default snap copy.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of snap recovery points for default snap copy for retention. Can be specified instead of retention period in Days for default snap copy.",
        SerializedName = @"snapRecoveryPoints",
        PossibleTypes = new [] { typeof(long) })]
        long? SnapRecoveryPoints { get; set; }

    }
    /// This feature applies only to File System Agents
    internal partial interface ICreatePlanSnapshotOptionsInternal

    {
        /// <summary>Which type of action should be followed if backup copy falls behind</summary>
        string BackupCopyOptionAction { get; set; }
        /// <summary>Alert to throw when backup copy falls behind in hours</summary>
        long? BackupCopyOptionAlertInHours { get; set; }
        /// <summary>
        /// Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default
        /// is LAST while adding new backup destination.
        /// </summary>
        string BackupCopyOptionBackupFullToCopy { get; set; }
        /// <summary>Backup type to copy for backup copy operation</summary>
        string BackupCopyOptionBackupTypeToCopy { get; set; }
        /// <summary>Flag to enable backup copy fallen behind alert</summary>
        bool? BackupCopyOptionEnableAlert { get; set; }
        /// <summary>The allowable delay in days before a backup copy job is considered overdue</summary>
        long? BackupCopyOptionSkipAfterThresholdDays { get; set; }
        /// <summary>
        /// Snapshots to be copied from a particular time in unix time format. By default, 0 means since the inception of the snap
        /// copy.
        /// </summary>
        long? BackupCopyOptionStartTime { get; set; }
        /// <summary>Options for snap management with backup copy</summary>
        Commvault.Powershell.Models.IBackupCopyOptions BackupCopyOptions { get; set; }
        /// <summary>Backup copy RPO in minutes</summary>
        long? BackupCopyRpoMins { get; set; }
        /// <summary>Flag to enable backup copy</summary>
        bool? EnableBackupCopy { get; set; }
        /// <summary>Flag to enable deferred snapshot cataloging</summary>
        bool? EnableSnapCatalog { get; set; }
        /// <summary>
        /// Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not specified,
        /// this takes precedence.
        /// </summary>
        long? RetentionPeriodDays { get; set; }
        /// <summary>
        /// Number of snap recovery points for default snap copy for retention. Can be specified instead of retention period in Days
        /// for default snap copy.
        /// </summary>
        long? SnapRecoveryPoints { get; set; }

    }
}