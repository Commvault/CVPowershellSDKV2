// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    /// <summary>This feature applies only to file system agents</summary>
    [System.ComponentModel.TypeConverter(typeof(PlanContentTypeConverter))]
    public partial class PlanContent
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.PlanContent"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IPlanContent" />.</returns>
        public static Commvault.Powershell.Models.IPlanContent DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new PlanContent(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.PlanContent"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IPlanContent" />.</returns>
        public static Commvault.Powershell.Models.IPlanContent DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new PlanContent(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="PlanContent" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="PlanContent" /> model class.</returns>
        public static Commvault.Powershell.Models.IPlanContent FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.PlanContent"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal PlanContent(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("WindowsNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("WindowsNumberOfDataReaders",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("UnixNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("UnixNumberOfDataReaders",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("MacNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("MacNumberOfDataReaders",((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("WindowsIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("WindowsIncludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("WindowsExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("WindowsExcludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("WindowsFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("WindowsFilterToExcludePaths",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupSystemState"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).BackupSystemState = (bool?) content.GetValueForProperty("BackupSystemState",((Commvault.Powershell.Models.IPlanContentInternal)this).BackupSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupSystemStateOnlyWithFullBackup"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).BackupSystemStateOnlyWithFullBackup = (bool?) content.GetValueForProperty("BackupSystemStateOnlyWithFullBackup",((Commvault.Powershell.Models.IPlanContentInternal)this).BackupSystemStateOnlyWithFullBackup, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UseVssForSystemState"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UseVssForSystemState = (bool?) content.GetValueForProperty("UseVssForSystemState",((Commvault.Powershell.Models.IPlanContentInternal)this).UseVssForSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("MacIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("MacIncludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).MacIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("MacExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("MacExcludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).MacExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("MacFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("MacFilterToExcludePaths",((Commvault.Powershell.Models.IPlanContentInternal)this).MacFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("UnixIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("UnixIncludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("UnixExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("UnixExcludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("UnixFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("UnixFilterToExcludePaths",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ForceUpdateProperties"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).ForceUpdateProperties = (bool?) content.GetValueForProperty("ForceUpdateProperties",((Commvault.Powershell.Models.IPlanContentInternal)this).ForceUpdateProperties, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("WindowNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("WindowNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("WindowNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowNumberOfDataReaderCount = (long?) content.GetValueForProperty("WindowNumberOfDataReaderCount",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("UnixNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("UnixNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UnixNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaderCount = (long?) content.GetValueForProperty("UnixNumberOfDataReaderCount",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("MacNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("MacNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("MacNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaderCount = (long?) content.GetValueForProperty("MacNumberOfDataReaderCount",((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.PlanContent"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal PlanContent(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("WindowsNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("WindowsNumberOfDataReaders",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("UnixNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("UnixNumberOfDataReaders",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("MacNumberOfDataReaders"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaders = (Commvault.Powershell.Models.IPlanContentDataReaders) content.GetValueForProperty("MacNumberOfDataReaders",((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaders, Commvault.Powershell.Models.PlanContentDataReadersTypeConverter.ConvertFrom);
            }
            if (content.Contains("WindowsIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("WindowsIncludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("WindowsExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("WindowsExcludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("WindowsFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("WindowsFilterToExcludePaths",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowsFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("BackupSystemState"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).BackupSystemState = (bool?) content.GetValueForProperty("BackupSystemState",((Commvault.Powershell.Models.IPlanContentInternal)this).BackupSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BackupSystemStateOnlyWithFullBackup"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).BackupSystemStateOnlyWithFullBackup = (bool?) content.GetValueForProperty("BackupSystemStateOnlyWithFullBackup",((Commvault.Powershell.Models.IPlanContentInternal)this).BackupSystemStateOnlyWithFullBackup, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UseVssForSystemState"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UseVssForSystemState = (bool?) content.GetValueForProperty("UseVssForSystemState",((Commvault.Powershell.Models.IPlanContentInternal)this).UseVssForSystemState, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("MacIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("MacIncludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).MacIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("MacExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("MacExcludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).MacExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("MacFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("MacFilterToExcludePaths",((Commvault.Powershell.Models.IPlanContentInternal)this).MacFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("UnixIncludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixIncludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("UnixIncludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixIncludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("UnixExcludedPaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixExcludedPaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("UnixExcludedPaths",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixExcludedPaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("UnixFilterToExcludePaths"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixFilterToExcludePaths = (System.Collections.Generic.List<string>) content.GetValueForProperty("UnixFilterToExcludePaths",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixFilterToExcludePaths, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ForceUpdateProperties"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).ForceUpdateProperties = (bool?) content.GetValueForProperty("ForceUpdateProperties",((Commvault.Powershell.Models.IPlanContentInternal)this).ForceUpdateProperties, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("WindowNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("WindowNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("WindowNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).WindowNumberOfDataReaderCount = (long?) content.GetValueForProperty("WindowNumberOfDataReaderCount",((Commvault.Powershell.Models.IPlanContentInternal)this).WindowNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("UnixNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("UnixNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UnixNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaderCount = (long?) content.GetValueForProperty("UnixNumberOfDataReaderCount",((Commvault.Powershell.Models.IPlanContentInternal)this).UnixNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("MacNumberOfDataReaderUseOptimal"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaderUseOptimal = (bool?) content.GetValueForProperty("MacNumberOfDataReaderUseOptimal",((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaderUseOptimal, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("MacNumberOfDataReaderCount"))
            {
                ((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaderCount = (long?) content.GetValueForProperty("MacNumberOfDataReaderCount",((Commvault.Powershell.Models.IPlanContentInternal)this).MacNumberOfDataReaderCount, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// This feature applies only to file system agents
    [System.ComponentModel.TypeConverter(typeof(PlanContentTypeConverter))]
    public partial interface IPlanContent

    {

    }
}