// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class GeneralInfoServerGroup :
        Commvault.Powershell.Models.IGeneralInfoServerGroup,
        Commvault.Powershell.Models.IGeneralInfoServerGroupInternal
    {

        /// <summary>Backing field for <see cref="AutoDiscover" /> property.</summary>
        private bool? _autoDiscover;

        /// <summary>
        /// if enabled then after every 24 hours, according to each server's individual Commvault service schedule, the software discovers
        /// the applications on each server and installs a Commvault software package for each application that is found.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? AutoDiscover { get => this._autoDiscover; set => this._autoDiscover = value; }

        /// <summary>Internal Acessors for Region</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IGeneralInfoServerGroupInternal.Region { get => (this._region = this._region ?? new Commvault.Powershell.Models.IdName()); set { {_region = value;} } }

        /// <summary>Backing field for <see cref="EnableDataEncryption" /> property.</summary>
        private bool? _enableDataEncryption;

        /// <summary>Allow owners to enable data encryption</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? EnableDataEncryption { get => this._enableDataEncryption; set => this._enableDataEncryption = value; }

        /// <summary>Backing field for <see cref="Region" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _region;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Region { get => (this._region = this._region ?? new Commvault.Powershell.Models.IdName()); set => this._region = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? RegionId { get => ((Commvault.Powershell.Models.IIdNameInternal)Region).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Region).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string RegionName { get => ((Commvault.Powershell.Models.IIdNameInternal)Region).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Region).Name = value ?? null; }

        /// <summary>Creates an new <see cref="GeneralInfoServerGroup" /> instance.</summary>
        public GeneralInfoServerGroup()
        {

        }
    }
    public partial interface IGeneralInfoServerGroup :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>
        /// if enabled then after every 24 hours, according to each server's individual Commvault service schedule, the software discovers
        /// the applications on each server and installs a Commvault software package for each application that is found.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"if enabled then after every 24 hours, according to each server's individual Commvault service schedule, the software discovers the applications on each server and installs a Commvault software package for each application that is found.",
        SerializedName = @"autoDiscover",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoDiscover { get; set; }
        /// <summary>Allow owners to enable data encryption</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allow owners to enable data encryption",
        SerializedName = @"enableDataEncryption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableDataEncryption { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? RegionId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string RegionName { get; set; }

    }
    internal partial interface IGeneralInfoServerGroupInternal

    {
        /// <summary>
        /// if enabled then after every 24 hours, according to each server's individual Commvault service schedule, the software discovers
        /// the applications on each server and installs a Commvault software package for each application that is found.
        /// </summary>
        bool? AutoDiscover { get; set; }
        /// <summary>Allow owners to enable data encryption</summary>
        bool? EnableDataEncryption { get; set; }

        Commvault.Powershell.Models.IIdName Region { get; set; }

        long? RegionId { get; set; }

        string RegionName { get; set; }

    }
}