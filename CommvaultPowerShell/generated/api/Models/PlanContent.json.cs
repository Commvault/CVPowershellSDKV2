// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>This feature applies only to file system agents</summary>
    public partial class PlanContent
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Commvault.Powershell.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json erialization has finished, allowing customization of the <see cref="Commvault.Powershell.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Commvault.Powershell.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Commvault.Powershell.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Commvault.Powershell.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Commvault.Powershell.Runtime.Json.JsonNode"/> into an instance of Commvault.Powershell.Models.IPlanContent.
        /// </summary>
        /// <param name="node">a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of Commvault.Powershell.Models.IPlanContent.</returns>
        public static Commvault.Powershell.Models.IPlanContent FromJson(Commvault.Powershell.Runtime.Json.JsonNode node)
        {
            return node is Commvault.Powershell.Runtime.Json.JsonObject json ? new PlanContent(json) : null;
        }

        /// <summary>
        /// Deserializes a Commvault.Powershell.Runtime.Json.JsonObject into a new instance of <see cref="PlanContent" />.
        /// </summary>
        /// <param name="json">A Commvault.Powershell.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal PlanContent(Commvault.Powershell.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_windowsIncludedPaths = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("windowsIncludedPaths"), out var __jsonWindowsIncludedPaths) ? If( __jsonWindowsIncludedPaths as Commvault.Powershell.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is Commvault.Powershell.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : WindowsIncludedPaths;}
            {_windowsExcludedPaths = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("windowsExcludedPaths"), out var __jsonWindowsExcludedPaths) ? If( __jsonWindowsExcludedPaths as Commvault.Powershell.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is Commvault.Powershell.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : WindowsExcludedPaths;}
            {_backupSystemState = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonBoolean>("backupSystemState"), out var __jsonBackupSystemState) ? (bool?)__jsonBackupSystemState : BackupSystemState;}
            {_backupSystemStateOnlyWithFullBackup = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonBoolean>("backupSystemStateOnlyWithFullBackup"), out var __jsonBackupSystemStateOnlyWithFullBackup) ? (bool?)__jsonBackupSystemStateOnlyWithFullBackup : BackupSystemStateOnlyWithFullBackup;}
            {_useVssForSystemState = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonBoolean>("useVSSForSystemState"), out var __jsonUseVssForSystemState) ? (bool?)__jsonUseVssForSystemState : UseVssForSystemState;}
            {_macIncludedPaths = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("macIncludedPaths"), out var __jsonMacIncludedPaths) ? If( __jsonMacIncludedPaths as Commvault.Powershell.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is Commvault.Powershell.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : MacIncludedPaths;}
            {_macExcludedPaths = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("macExcludedPaths"), out var __jsonMacExcludedPaths) ? If( __jsonMacExcludedPaths as Commvault.Powershell.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(string) (__f is Commvault.Powershell.Runtime.Json.JsonString __e ? (string)(__e.ToString()) : null)) ))() : null : MacExcludedPaths;}
            {_unixIncludedPaths = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("unixIncludedPaths"), out var __jsonUnixIncludedPaths) ? If( __jsonUnixIncludedPaths as Commvault.Powershell.Runtime.Json.JsonArray, out var __b) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__b, (__a)=>(string) (__a is Commvault.Powershell.Runtime.Json.JsonString ___z ? (string)(___z.ToString()) : null)) ))() : null : UnixIncludedPaths;}
            {_unixExcludedPaths = If( json?.PropertyT<Commvault.Powershell.Runtime.Json.JsonArray>("unixExcludedPaths"), out var __jsonUnixExcludedPaths) ? If( __jsonUnixExcludedPaths as Commvault.Powershell.Runtime.Json.JsonArray, out var ___w) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___w, (___v)=>(string) (___v is Commvault.Powershell.Runtime.Json.JsonString ___u ? (string)(___u.ToString()) : null)) ))() : null : UnixExcludedPaths;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="PlanContent" /> into a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Commvault.Powershell.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Commvault.Powershell.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="PlanContent" /> as a <see cref="Commvault.Powershell.Runtime.Json.JsonNode" />.
        /// </returns>
        public Commvault.Powershell.Runtime.Json.JsonNode ToJson(Commvault.Powershell.Runtime.Json.JsonObject container, Commvault.Powershell.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Commvault.Powershell.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            if (null != this._windowsIncludedPaths)
            {
                var __w = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __x in this._windowsIncludedPaths )
                {
                    AddIf(null != (((object)__x)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                }
                container.Add("windowsIncludedPaths",__w);
            }
            if (null != this._windowsExcludedPaths)
            {
                var __r = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __s in this._windowsExcludedPaths )
                {
                    AddIf(null != (((object)__s)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                }
                container.Add("windowsExcludedPaths",__r);
            }
            AddIf( null != this._backupSystemState ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonBoolean((bool)this._backupSystemState) : null, "backupSystemState" ,container.Add );
            AddIf( null != this._backupSystemStateOnlyWithFullBackup ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonBoolean((bool)this._backupSystemStateOnlyWithFullBackup) : null, "backupSystemStateOnlyWithFullBackup" ,container.Add );
            AddIf( null != this._useVssForSystemState ? (Commvault.Powershell.Runtime.Json.JsonNode)new Commvault.Powershell.Runtime.Json.JsonBoolean((bool)this._useVssForSystemState) : null, "useVSSForSystemState" ,container.Add );
            if (null != this._macIncludedPaths)
            {
                var __m = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __n in this._macIncludedPaths )
                {
                    AddIf(null != (((object)__n)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                }
                container.Add("macIncludedPaths",__m);
            }
            if (null != this._macExcludedPaths)
            {
                var __h = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __i in this._macExcludedPaths )
                {
                    AddIf(null != (((object)__i)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(__i.ToString()) : null ,__h.Add);
                }
                container.Add("macExcludedPaths",__h);
            }
            if (null != this._unixIncludedPaths)
            {
                var __c = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var __d in this._unixIncludedPaths )
                {
                    AddIf(null != (((object)__d)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(__d.ToString()) : null ,__c.Add);
                }
                container.Add("unixIncludedPaths",__c);
            }
            if (null != this._unixExcludedPaths)
            {
                var ___x = new Commvault.Powershell.Runtime.Json.XNodeArray();
                foreach( var ___y in this._unixExcludedPaths )
                {
                    AddIf(null != (((object)___y)?.ToString()) ? (Commvault.Powershell.Runtime.Json.JsonNode) new Commvault.Powershell.Runtime.Json.JsonString(___y.ToString()) : null ,___x.Add);
                }
                container.Add("unixExcludedPaths",___x);
            }
            AfterToJson(ref container);
            return container;
        }
    }
}