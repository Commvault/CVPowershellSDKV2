// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// For newly added location - country, latitude and longitude are mandatory fields. Any existing location added to locations
    /// array needs to have all the existing fields.
    /// </summary>
    public partial class UpdateRegion :
        Commvault.Powershell.Models.IUpdateRegion,
        Commvault.Powershell.Models.IUpdateRegionInternal
    {

        /// <summary>Backing field for <see cref="Locations" /> property.</summary>
        private Commvault.Powershell.Models.ILocationDetailsWithZone[] _locations;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.ILocationDetailsWithZone[] Locations { get => this._locations; set => this._locations = value; }

        /// <summary>Backing field for <see cref="LocationsOperationType" /> property.</summary>
        private string _locationsOperationType;

        /// <summary>Type of operation to be performed for locations</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string LocationsOperationType { get => this._locationsOperationType; set => this._locationsOperationType = value; }

        /// <summary>Backing field for <see cref="NewName" /> property.</summary>
        private string _newName;

        /// <summary>New name for the region</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string NewName { get => this._newName; set => this._newName = value; }

        /// <summary>Creates an new <see cref="UpdateRegion" /> instance.</summary>
        public UpdateRegion()
        {

        }
    }
    /// For newly added location - country, latitude and longitude are mandatory fields. Any existing location added to locations
    /// array needs to have all the existing fields.
    public partial interface IUpdateRegion :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"locations",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.ILocationDetailsWithZone) })]
        Commvault.Powershell.Models.ILocationDetailsWithZone[] Locations { get; set; }
        /// <summary>Type of operation to be performed for locations</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of operation to be performed for locations",
        SerializedName = @"locationsOperationType",
        PossibleTypes = new [] { typeof(string) })]
        string LocationsOperationType { get; set; }
        /// <summary>New name for the region</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"New name for the region",
        SerializedName = @"newName",
        PossibleTypes = new [] { typeof(string) })]
        string NewName { get; set; }

    }
    /// For newly added location - country, latitude and longitude are mandatory fields. Any existing location added to locations
    /// array needs to have all the existing fields.
    internal partial interface IUpdateRegionInternal

    {
        Commvault.Powershell.Models.ILocationDetailsWithZone[] Locations { get; set; }
        /// <summary>Type of operation to be performed for locations</summary>
        string LocationsOperationType { get; set; }
        /// <summary>New name for the region</summary>
        string NewName { get; set; }

    }
}