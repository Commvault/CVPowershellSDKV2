// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// company refers to company to which the blackout window is associated. Dates are provided in unix time format.
    /// </summary>
    public partial class BlackoutWindow :
        Commvault.Powershell.Models.IBlackoutWindow,
        Commvault.Powershell.Models.IBlackoutWindowInternal
    {

        /// <summary>Backing field for <see cref="AllDays" /> property.</summary>
        private Commvault.Powershell.Models.IDaysAndTimes[] _allDays;

        /// <summary>
        /// Days of the week along with the time on which the black out window will be in effect.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public Commvault.Powershell.Models.IDaysAndTimes[] AllDays { get => this._allDays; set => this._allDays = value; }

        /// <summary>Backing field for <see cref="BackupOperations" /> property.</summary>
        private string[] _backupOperations;

        /// <summary>backupOperations refers to the backup types to include in the blackout window</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string[] BackupOperations { get => this._backupOperations; set => this._backupOperations = value; }

        /// <summary>the blackout window is no longer in effect from this point on.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BetweenDateEnd { get => ((Commvault.Powershell.Models.IStartEndInternal)BetweenDates).End; set => ((Commvault.Powershell.Models.IStartEndInternal)BetweenDates).End = value ?? default(long); }

        /// <summary>the blackout window comes into effect at this point.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? BetweenDateStart { get => ((Commvault.Powershell.Models.IStartEndInternal)BetweenDates).Start; set => ((Commvault.Powershell.Models.IStartEndInternal)BetweenDates).Start = value ?? default(long); }

        /// <summary>Backing field for <see cref="BetweenDates" /> property.</summary>
        private Commvault.Powershell.Models.IStartEnd _betweenDates;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IStartEnd BetweenDates { get => (this._betweenDates = this._betweenDates ?? new Commvault.Powershell.Models.StartEnd()); set => this._betweenDates = value; }

        /// <summary>Internal Acessors for BetweenDates</summary>
        Commvault.Powershell.Models.IStartEnd Commvault.Powershell.Models.IBlackoutWindowInternal.BetweenDates { get => (this._betweenDates = this._betweenDates ?? new Commvault.Powershell.Models.StartEnd()); set { {_betweenDates = value;} } }

        /// <summary>Internal Acessors for Company</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IBlackoutWindowInternal.Company { get => (this._company = this._company ?? new Commvault.Powershell.Models.IdName()); set { {_company = value;} } }

        /// <summary>Backing field for <see cref="Company" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _company;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Company { get => (this._company = this._company ?? new Commvault.Powershell.Models.IdName()); set => this._company = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? CompanyId { get => ((Commvault.Powershell.Models.IIdNameInternal)Company).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Company).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string CompanyName { get => ((Commvault.Powershell.Models.IIdNameInternal)Company).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Company).Name = value ?? null; }

        /// <summary>Backing field for <see cref="DoNotSubmitJob" /> property.</summary>
        private bool? _doNotSubmitJob;

        /// <summary>
        /// Allows or Denies submitting a job when the blackout window is in effect. If allowed, the job is submitted and resumed
        /// once the blackout window ends.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? DoNotSubmitJob { get => this._doNotSubmitJob; set => this._doNotSubmitJob = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private long? _id;

        /// <summary>Id of the blackout window.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the blackout window.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Weeks" /> property.</summary>
        private string[] _weeks;

        /// <summary>
        /// Refers to the weeks of the month that the blackout window will be in effect and jobs will not run.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string[] Weeks { get => this._weeks; set => this._weeks = value; }

        /// <summary>Creates an new <see cref="BlackoutWindow" /> instance.</summary>
        public BlackoutWindow()
        {

        }
    }
    /// company refers to company to which the blackout window is associated. Dates are provided in unix time format.
    public partial interface IBlackoutWindow :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Days of the week along with the time on which the black out window will be in effect.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Days of the week along with the time on which the black out window will be in effect.",
        SerializedName = @"allDays",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IDaysAndTimes) })]
        Commvault.Powershell.Models.IDaysAndTimes[] AllDays { get; set; }
        /// <summary>backupOperations refers to the backup types to include in the blackout window</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"backupOperations refers to the backup types to include in the blackout window",
        SerializedName = @"backupOperations",
        PossibleTypes = new [] { typeof(string) })]
        string[] BackupOperations { get; set; }
        /// <summary>the blackout window is no longer in effect from this point on.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"the blackout window is no longer in effect from this point on.",
        SerializedName = @"end",
        PossibleTypes = new [] { typeof(long) })]
        long? BetweenDateEnd { get; set; }
        /// <summary>the blackout window comes into effect at this point.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"the blackout window comes into effect at this point.",
        SerializedName = @"start",
        PossibleTypes = new [] { typeof(long) })]
        long? BetweenDateStart { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? CompanyId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CompanyName { get; set; }
        /// <summary>
        /// Allows or Denies submitting a job when the blackout window is in effect. If allowed, the job is submitted and resumed
        /// once the blackout window ends.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allows or Denies submitting a job when the blackout window is in effect. If allowed, the job is submitted and resumed once the blackout window ends.",
        SerializedName = @"doNotSubmitJob",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DoNotSubmitJob { get; set; }
        /// <summary>Id of the blackout window.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Id of the blackout window.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? Id { get; set; }
        /// <summary>Name of the blackout window.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the blackout window.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// Refers to the weeks of the month that the blackout window will be in effect and jobs will not run.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Refers to the weeks of the month that the blackout window will be in effect and jobs will not run.",
        SerializedName = @"weeks",
        PossibleTypes = new [] { typeof(string) })]
        string[] Weeks { get; set; }

    }
    /// company refers to company to which the blackout window is associated. Dates are provided in unix time format.
    internal partial interface IBlackoutWindowInternal

    {
        /// <summary>
        /// Days of the week along with the time on which the black out window will be in effect.
        /// </summary>
        Commvault.Powershell.Models.IDaysAndTimes[] AllDays { get; set; }
        /// <summary>backupOperations refers to the backup types to include in the blackout window</summary>
        string[] BackupOperations { get; set; }
        /// <summary>the blackout window is no longer in effect from this point on.</summary>
        long? BetweenDateEnd { get; set; }
        /// <summary>the blackout window comes into effect at this point.</summary>
        long? BetweenDateStart { get; set; }

        Commvault.Powershell.Models.IStartEnd BetweenDates { get; set; }

        Commvault.Powershell.Models.IIdName Company { get; set; }

        long? CompanyId { get; set; }

        string CompanyName { get; set; }
        /// <summary>
        /// Allows or Denies submitting a job when the blackout window is in effect. If allowed, the job is submitted and resumed
        /// once the blackout window ends.
        /// </summary>
        bool? DoNotSubmitJob { get; set; }
        /// <summary>Id of the blackout window.</summary>
        long? Id { get; set; }
        /// <summary>Name of the blackout window.</summary>
        string Name { get; set; }
        /// <summary>
        /// Refers to the weeks of the month that the blackout window will be in effect and jobs will not run.
        /// </summary>
        string[] Weeks { get; set; }

    }
}