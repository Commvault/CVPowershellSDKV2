// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    /// <summary>
    /// Plan entity rule update object. Fields in this object need to be populated to suggest what need to be changed in the rule.
    /// User can provide all rule options or can specify a specific rule group. Be default, for rule to be applicable for association
    /// to a workload, ALL specified rules in that Rule need to be matched.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(UpdatePlanEntityRuleTypeConverter))]
    public partial class UpdatePlanEntityRule
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.UpdatePlanEntityRule"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Commvault.Powershell.Models.IUpdatePlanEntityRule" />.
        /// </returns>
        public static Commvault.Powershell.Models.IUpdatePlanEntityRule DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new UpdatePlanEntityRule(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.UpdatePlanEntityRule"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Commvault.Powershell.Models.IUpdatePlanEntityRule" />.
        /// </returns>
        public static Commvault.Powershell.Models.IUpdatePlanEntityRule DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new UpdatePlanEntityRule(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="UpdatePlanEntityRule" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="className" /> model class.</returns>
        public static Commvault.Powershell.Models.IUpdatePlanEntityRule FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.UpdatePlanEntityRule"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal UpdatePlanEntityRule(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Rule = (Commvault.Powershell.Models.IIdNameGuid) content.GetValueForProperty("Rule",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Rule, Commvault.Powershell.Models.IdNameGuidTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Plan = (Commvault.Powershell.Models.IIdNameGuid) content.GetValueForProperty("Plan",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Plan, Commvault.Powershell.Models.IdNameGuidTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Workloads = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("Workloads",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Workloads, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).ServerGroups = (Commvault.Powershell.Models.IIdNameGuid[]) content.GetValueForProperty("ServerGroups",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).ServerGroups, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdNameGuid>(__y, Commvault.Powershell.Models.IdNameGuidTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Regions = (Commvault.Powershell.Models.IIdNameGuid[]) content.GetValueForProperty("Regions",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Regions, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdNameGuid>(__y, Commvault.Powershell.Models.IdNameGuidTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Rank = (long?) content.GetValueForProperty("Rank",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Rank, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Solutions = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("Solutions",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Solutions, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Tags = (Commvault.Powershell.Models.IPlanEntityRuleTag[]) content.GetValueForProperty("Tags",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Tags, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IPlanEntityRuleTag>(__y, Commvault.Powershell.Models.PlanEntityRuleTagTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleId = (long?) content.GetValueForProperty("RuleId",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleGuid = (string) content.GetValueForProperty("RuleGuid",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleGuid, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleName = (string) content.GetValueForProperty("RuleName",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanId = (long?) content.GetValueForProperty("PlanId",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanGuid = (string) content.GetValueForProperty("PlanGuid",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanGuid, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanName = (string) content.GetValueForProperty("PlanName",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanName, global::System.Convert.ToString);
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.UpdatePlanEntityRule"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal UpdatePlanEntityRule(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Rule = (Commvault.Powershell.Models.IIdNameGuid) content.GetValueForProperty("Rule",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Rule, Commvault.Powershell.Models.IdNameGuidTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Plan = (Commvault.Powershell.Models.IIdNameGuid) content.GetValueForProperty("Plan",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Plan, Commvault.Powershell.Models.IdNameGuidTypeConverter.ConvertFrom);
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Workloads = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("Workloads",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Workloads, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).ServerGroups = (Commvault.Powershell.Models.IIdNameGuid[]) content.GetValueForProperty("ServerGroups",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).ServerGroups, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdNameGuid>(__y, Commvault.Powershell.Models.IdNameGuidTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Regions = (Commvault.Powershell.Models.IIdNameGuid[]) content.GetValueForProperty("Regions",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Regions, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdNameGuid>(__y, Commvault.Powershell.Models.IdNameGuidTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Rank = (long?) content.GetValueForProperty("Rank",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Rank, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Solutions = (Commvault.Powershell.Models.IIdName[]) content.GetValueForProperty("Solutions",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Solutions, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IIdName>(__y, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Tags = (Commvault.Powershell.Models.IPlanEntityRuleTag[]) content.GetValueForProperty("Tags",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).Tags, __y => TypeConverterExtensions.SelectToArray<Commvault.Powershell.Models.IPlanEntityRuleTag>(__y, Commvault.Powershell.Models.PlanEntityRuleTagTypeConverter.ConvertFrom));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleId = (long?) content.GetValueForProperty("RuleId",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleGuid = (string) content.GetValueForProperty("RuleGuid",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleGuid, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleName = (string) content.GetValueForProperty("RuleName",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).RuleName, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanId = (long?) content.GetValueForProperty("PlanId",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanGuid = (string) content.GetValueForProperty("PlanGuid",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanGuid, global::System.Convert.ToString);
            ((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanName = (string) content.GetValueForProperty("PlanName",((Commvault.Powershell.Models.IUpdatePlanEntityRuleInternal)this).PlanName, global::System.Convert.ToString);
            AfterDeserializePSObject(content);
        }
    }
    /// Plan entity rule update object. Fields in this object need to be populated to suggest what need to be changed in the rule.
    /// User can provide all rule options or can specify a specific rule group. Be default, for rule to be applicable for association
    /// to a workload, ALL specified rules in that Rule need to be matched.
    [System.ComponentModel.TypeConverter(typeof(UpdatePlanEntityRuleTypeConverter))]
    public partial interface IUpdatePlanEntityRule

    {

    }
}