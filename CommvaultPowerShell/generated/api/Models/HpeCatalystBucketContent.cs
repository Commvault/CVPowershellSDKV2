// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.415)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>HPE Catalyst Storage</summary>
    public partial class HpeCatalystBucketContent :
        Commvault.Powershell.Models.IHpeCatalystBucketContent,
        Commvault.Powershell.Models.IHpeCatalystBucketContentInternal,
        Commvault.Powershell.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Commvault.Powershell.Models.ICloudStorageAdvanced" />
        /// </summary>
        private Commvault.Powershell.Models.ICloudStorageAdvanced __cloudStorageAdvanced = new Commvault.Powershell.Models.CloudStorageAdvanced();

        /// <summary>
        /// The access type for the cloud access path can be either read (writing to path not allowed) or read and write (writing
        /// to path allowed)
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public string Access { get => ((Commvault.Powershell.Models.ICloudStorageAdvancedInternal)__cloudStorageAdvanced).Access; set => ((Commvault.Powershell.Models.ICloudStorageAdvancedInternal)__cloudStorageAdvanced).Access = value; }

        /// <summary>Backing field for <see cref="CloudType" /> property.</summary>
        private string _cloudType= @"HPE Catalyst Storage";

        /// <summary>Name of cloud vendor</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string CloudType { get => this._cloudType; }

        /// <summary>Internal Acessors for CloudType</summary>
        string Commvault.Powershell.Models.IHpeCatalystBucketContentInternal.CloudType { get => this._cloudType; set { {_cloudType = value;} } }

        /// <summary>Enable/Disable access of bucket to a media Agent</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inherited)]
        public bool? Enable { get => ((Commvault.Powershell.Models.ICloudStorageAdvancedInternal)__cloudStorageAdvanced).Enable; set => ((Commvault.Powershell.Models.ICloudStorageAdvancedInternal)__cloudStorageAdvanced).Enable = value; }

        /// <summary>Backing field for <see cref="Password" /> property.</summary>
        private System.Security.SecureString _password;

        /// <summary>
        /// Password used to access StoreOnce management console (Should be in Base64 format)
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Security.SecureString Password { get => this._password; set => this._password = value; }

        /// <summary>Backing field for <see cref="Store" /> property.</summary>
        private string _store;

        /// <summary>Name of the store that is created on the StoreOnce management console</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Store { get => this._store; set => this._store = value; }

        /// <summary>Backing field for <see cref="StoreOnceHost" /> property.</summary>
        private string _storeOnceHost;

        /// <summary>
        /// IP address or COFC identifier in case of Fibre Channel associated with the HPE StoreOnce device
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string StoreOnceHost { get => this._storeOnceHost; set => this._storeOnceHost = value; }

        /// <summary>Backing field for <see cref="Username" /> property.</summary>
        private string _username;

        /// <summary>Username used to access StoreOnce management console</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Username { get => this._username; set => this._username = value; }

        /// <summary>Creates an new <see cref="HpeCatalystBucketContent" /> instance.</summary>
        public HpeCatalystBucketContent()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Commvault.Powershell.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Commvault.Powershell.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__cloudStorageAdvanced), __cloudStorageAdvanced);
            await eventListener.AssertObjectIsValid(nameof(__cloudStorageAdvanced), __cloudStorageAdvanced);
        }
    }
    /// HPE Catalyst Storage
    public partial interface IHpeCatalystBucketContent :
        Commvault.Powershell.Runtime.IJsonSerializable,
        Commvault.Powershell.Models.ICloudStorageAdvanced
    {
        /// <summary>Name of cloud vendor</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Description = @"Name of cloud vendor",
        SerializedName = @"cloudType",
        PossibleTypes = new [] { typeof(string) })]
        string CloudType { get;  }
        /// <summary>
        /// Password used to access StoreOnce management console (Should be in Base64 format)
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password used to access StoreOnce management console (Should be in Base64 format)",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString Password { get; set; }
        /// <summary>Name of the store that is created on the StoreOnce management console</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the store that is created on the StoreOnce management console",
        SerializedName = @"store",
        PossibleTypes = new [] { typeof(string) })]
        string Store { get; set; }
        /// <summary>
        /// IP address or COFC identifier in case of Fibre Channel associated with the HPE StoreOnce device
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IP address or COFC identifier in case of Fibre Channel associated with the HPE StoreOnce device",
        SerializedName = @"storeOnceHost",
        PossibleTypes = new [] { typeof(string) })]
        string StoreOnceHost { get; set; }
        /// <summary>Username used to access StoreOnce management console</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Username used to access StoreOnce management console",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string Username { get; set; }

    }
    /// HPE Catalyst Storage
    internal partial interface IHpeCatalystBucketContentInternal :
        Commvault.Powershell.Models.ICloudStorageAdvancedInternal
    {
        /// <summary>Name of cloud vendor</summary>
        string CloudType { get; set; }
        /// <summary>
        /// Password used to access StoreOnce management console (Should be in Base64 format)
        /// </summary>
        System.Security.SecureString Password { get; set; }
        /// <summary>Name of the store that is created on the StoreOnce management console</summary>
        string Store { get; set; }
        /// <summary>
        /// IP address or COFC identifier in case of Fibre Channel associated with the HPE StoreOnce device
        /// </summary>
        string StoreOnceHost { get; set; }
        /// <summary>Username used to access StoreOnce management console</summary>
        string Username { get; set; }

    }
}