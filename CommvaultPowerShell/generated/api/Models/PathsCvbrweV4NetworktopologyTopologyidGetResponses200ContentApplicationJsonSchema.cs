// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class PathsCvbrweV4NetworktopologyTopologyidGetResponses200ContentApplicationJsonSchema :
        Commvault.Powershell.Models.IPathsCvbrweV4NetworktopologyTopologyidGetResponses200ContentApplicationJsonSchema,
        Commvault.Powershell.Models.IPathsCvbrweV4NetworktopologyTopologyidGetResponses200ContentApplicationJsonSchemaInternal
    {

        /// <summary>Internal Acessors for TopologyDetailTopology</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.IPathsCvbrweV4NetworktopologyTopologyidGetResponses200ContentApplicationJsonSchemaInternal.TopologyDetailTopology { get => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).Topology; set => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).Topology = value; }

        /// <summary>Internal Acessors for TopologyDetails</summary>
        Commvault.Powershell.Models.IFirewallTopologyDetails Commvault.Powershell.Models.IPathsCvbrweV4NetworktopologyTopologyidGetResponses200ContentApplicationJsonSchemaInternal.TopologyDetails { get => (this._topologyDetails = this._topologyDetails ?? new Commvault.Powershell.Models.FirewallTopologyDetails()); set { {_topologyDetails = value;} } }

        /// <summary>The type of clients associated with the topology.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string TopologyDetailClientType { get => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).ClientType; set => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).ClientType = value ?? null; }

        /// <summary>Flag determining if we want the data from tunnel to use HTTPS protocol</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? TopologyDetailEncryptTraffic { get => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).EncryptTraffic; set => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).EncryptTraffic = value ?? default(bool); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IFirewallTopologyGroups> TopologyDetailFirewallGroups { get => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).FirewallGroups; set => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).FirewallGroups = value ?? null /* arrayOf */; }

        /// <summary>
        /// The type of topology of client groups (and sometimes network gateway) for this instance.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string TopologyDetailTopologyType { get => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).TopologyType; set => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).TopologyType = value ?? null; }

        /// <summary>The protocol for outgoing communication</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string TopologyDetailTunnelProtocol { get => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).TunnelProtocol; set => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).TunnelProtocol = value ?? null; }

        /// <summary>The number of tunnel connections per route</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? TopologyDetailTunnelsPerRoute { get => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).TunnelsPerRoute; set => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).TunnelsPerRoute = value ?? default(long); }

        /// <summary>
        /// Flag determining wether network gateways are used to connect all infrastructure machines
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public bool? TopologyDetailUseWildCardProxy { get => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).UseWildCardProxy; set => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).UseWildCardProxy = value ?? default(bool); }

        /// <summary>Backing field for <see cref="TopologyDetails" /> property.</summary>
        private Commvault.Powershell.Models.IFirewallTopologyDetails _topologyDetails;

        /// <summary>FirewallTopologyDetails</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IFirewallTopologyDetails TopologyDetails { get => (this._topologyDetails = this._topologyDetails ?? new Commvault.Powershell.Models.FirewallTopologyDetails()); set => this._topologyDetails = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? TopologyId { get => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).TopologyId; set => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).TopologyId = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string TopologyName { get => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).TopologyName; set => ((Commvault.Powershell.Models.IFirewallTopologyDetailsInternal)TopologyDetails).TopologyName = value ?? null; }

        /// <summary>
        /// Creates an new <see cref="PathsCvbrweV4NetworktopologyTopologyidGetResponses200ContentApplicationJsonSchema" /> instance.
        /// </summary>
        public PathsCvbrweV4NetworktopologyTopologyidGetResponses200ContentApplicationJsonSchema()
        {

        }
    }
    public partial interface IPathsCvbrweV4NetworktopologyTopologyidGetResponses200ContentApplicationJsonSchema :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>The type of clients associated with the topology.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of clients associated with the topology.",
        SerializedName = @"clientType",
        PossibleTypes = new [] { typeof(string) })]
        string TopologyDetailClientType { get; set; }
        /// <summary>Flag determining if we want the data from tunnel to use HTTPS protocol</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag determining if we want the data from tunnel to use HTTPS protocol",
        SerializedName = @"encryptTraffic",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TopologyDetailEncryptTraffic { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"firewallGroups",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IFirewallTopologyGroups) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IFirewallTopologyGroups> TopologyDetailFirewallGroups { get; set; }
        /// <summary>
        /// The type of topology of client groups (and sometimes network gateway) for this instance.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of topology of client groups (and sometimes network gateway) for this instance.",
        SerializedName = @"topologyType",
        PossibleTypes = new [] { typeof(string) })]
        string TopologyDetailTopologyType { get; set; }
        /// <summary>The protocol for outgoing communication</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The protocol for outgoing communication",
        SerializedName = @"tunnelProtocol",
        PossibleTypes = new [] { typeof(string) })]
        string TopologyDetailTunnelProtocol { get; set; }
        /// <summary>The number of tunnel connections per route</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of tunnel connections per route",
        SerializedName = @"tunnelsPerRoute",
        PossibleTypes = new [] { typeof(long) })]
        long? TopologyDetailTunnelsPerRoute { get; set; }
        /// <summary>
        /// Flag determining wether network gateways are used to connect all infrastructure machines
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag determining wether network gateways are used to connect all infrastructure machines",
        SerializedName = @"useWildCardProxy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TopologyDetailUseWildCardProxy { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? TopologyId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string TopologyName { get; set; }

    }
    internal partial interface IPathsCvbrweV4NetworktopologyTopologyidGetResponses200ContentApplicationJsonSchemaInternal

    {
        /// <summary>The type of clients associated with the topology.</summary>
        string TopologyDetailClientType { get; set; }
        /// <summary>Flag determining if we want the data from tunnel to use HTTPS protocol</summary>
        bool? TopologyDetailEncryptTraffic { get; set; }

        System.Collections.Generic.List<Commvault.Powershell.Models.IFirewallTopologyGroups> TopologyDetailFirewallGroups { get; set; }

        Commvault.Powershell.Models.IIdName TopologyDetailTopology { get; set; }
        /// <summary>
        /// The type of topology of client groups (and sometimes network gateway) for this instance.
        /// </summary>
        string TopologyDetailTopologyType { get; set; }
        /// <summary>The protocol for outgoing communication</summary>
        string TopologyDetailTunnelProtocol { get; set; }
        /// <summary>The number of tunnel connections per route</summary>
        long? TopologyDetailTunnelsPerRoute { get; set; }
        /// <summary>
        /// Flag determining wether network gateways are used to connect all infrastructure machines
        /// </summary>
        bool? TopologyDetailUseWildCardProxy { get; set; }
        /// <summary>FirewallTopologyDetails</summary>
        Commvault.Powershell.Models.IFirewallTopologyDetails TopologyDetails { get; set; }

        long? TopologyId { get; set; }

        string TopologyName { get; set; }

    }
}