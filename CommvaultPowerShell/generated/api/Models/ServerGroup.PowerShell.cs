// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using Commvault.Powershell.Runtime.PowerShell;

    [System.ComponentModel.TypeConverter(typeof(ServerGroupTypeConverter))]
    public partial class ServerGroup
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Commvault.Powershell.Models.ServerGroup"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IServerGroup" />.</returns>
        public static Commvault.Powershell.Models.IServerGroup DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new ServerGroup(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Commvault.Powershell.Models.ServerGroup"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="Commvault.Powershell.Models.IServerGroup" />.</returns>
        public static Commvault.Powershell.Models.IServerGroup DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new ServerGroup(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="ServerGroup" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="ServerGroup" /> model class.</returns>
        public static Commvault.Powershell.Models.IServerGroup FromJsonString(string jsonText) => FromJson(Commvault.Powershell.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Commvault.Powershell.Models.ServerGroup"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal ServerGroup(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ServerGroup1"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroup1 = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("ServerGroup1",((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroup1, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("General"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).General = (Commvault.Powershell.Models.IGeneralInfoServerGroup) content.GetValueForProperty("General",((Commvault.Powershell.Models.IServerGroupInternal)this).General, Commvault.Powershell.Models.GeneralInfoServerGroupTypeConverter.ConvertFrom);
            }
            if (content.Contains("ActivityControl"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControl = (Commvault.Powershell.Models.IActivityControl) content.GetValueForProperty("ActivityControl",((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControl, Commvault.Powershell.Models.ActivityControlTypeConverter.ConvertFrom);
            }
            if (content.Contains("PowerManagement"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagement = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("PowerManagement",((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagement, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("FileExceptions"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptions = (Commvault.Powershell.Models.IFileExceptionsDetail) content.GetValueForProperty("FileExceptions",((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptions, Commvault.Powershell.Models.FileExceptionsDetailTypeConverter.ConvertFrom);
            }
            if (content.Contains("Description"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).Description = (string) content.GetValueForProperty("Description",((Commvault.Powershell.Models.IServerGroupInternal)this).Description, global::System.Convert.ToString);
            }
            if (content.Contains("Security"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).Security = (System.Collections.Generic.List<Commvault.Powershell.Models.ISecurityAssoc>) content.GetValueForProperty("Security",((Commvault.Powershell.Models.IServerGroupInternal)this).Security, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.ISecurityAssoc>(__y, Commvault.Powershell.Models.SecurityAssocTypeConverter.ConvertFrom));
            }
            if (content.Contains("AssociatedServers"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).AssociatedServers = (System.Collections.Generic.List<Commvault.Powershell.Models.IServerDetails>) content.GetValueForProperty("AssociatedServers",((Commvault.Powershell.Models.IServerGroupInternal)this).AssociatedServers, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IServerDetails>(__y, Commvault.Powershell.Models.ServerDetailsTypeConverter.ConvertFrom));
            }
            if (content.Contains("BlackoutWindow"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).BlackoutWindow = (System.Collections.Generic.List<Commvault.Powershell.Models.IBlackoutWindowDetails>) content.GetValueForProperty("BlackoutWindow",((Commvault.Powershell.Models.IServerGroupInternal)this).BlackoutWindow, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IBlackoutWindowDetails>(__y, Commvault.Powershell.Models.BlackoutWindowDetailsTypeConverter.ConvertFrom));
            }
            if (content.Contains("ServerGroupId"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroupId = (long?) content.GetValueForProperty("ServerGroupId",((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroupId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ServerGroupName"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroupName = (string) content.GetValueForProperty("ServerGroupName",((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroupName, global::System.Convert.ToString);
            }
            if (content.Contains("GeneralRegion"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralRegion = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("GeneralRegion",((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralRegion, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("GeneralEnableDataEncryption"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralEnableDataEncryption = (bool?) content.GetValueForProperty("GeneralEnableDataEncryption",((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralEnableDataEncryption, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("GeneralAutoDiscover"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralAutoDiscover = (bool?) content.GetValueForProperty("GeneralAutoDiscover",((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralAutoDiscover, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ActivityControlDatabackup"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDatabackup = (bool?) content.GetValueForProperty("ActivityControlDatabackup",((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDatabackup, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ActivityControlDataRestore"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDataRestore = (bool?) content.GetValueForProperty("ActivityControlDataRestore",((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDataRestore, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ActivityControlDataAging"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDataAging = (bool?) content.GetValueForProperty("ActivityControlDataAging",((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDataAging, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PowerManagementId"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagementId = (long?) content.GetValueForProperty("PowerManagementId",((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagementId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("PowerManagementName"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagementName = (string) content.GetValueForProperty("PowerManagementName",((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagementName, global::System.Convert.ToString);
            }
            if (content.Contains("FileExceptionUseGroupFilters"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionUseGroupFilters = (bool?) content.GetValueForProperty("FileExceptionUseGroupFilters",((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionUseGroupFilters, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("FileExceptionWindowsFilters"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionWindowsFilters = (System.Collections.Generic.List<string>) content.GetValueForProperty("FileExceptionWindowsFilters",((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionWindowsFilters, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("FileExceptionUnixFilters"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionUnixFilters = (System.Collections.Generic.List<string>) content.GetValueForProperty("FileExceptionUnixFilters",((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionUnixFilters, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("RegionId"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).RegionId = (long?) content.GetValueForProperty("RegionId",((Commvault.Powershell.Models.IServerGroupInternal)this).RegionId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RegionName"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).RegionName = (string) content.GetValueForProperty("RegionName",((Commvault.Powershell.Models.IServerGroupInternal)this).RegionName, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Commvault.Powershell.Models.ServerGroup"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal ServerGroup(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ServerGroup1"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroup1 = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("ServerGroup1",((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroup1, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("General"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).General = (Commvault.Powershell.Models.IGeneralInfoServerGroup) content.GetValueForProperty("General",((Commvault.Powershell.Models.IServerGroupInternal)this).General, Commvault.Powershell.Models.GeneralInfoServerGroupTypeConverter.ConvertFrom);
            }
            if (content.Contains("ActivityControl"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControl = (Commvault.Powershell.Models.IActivityControl) content.GetValueForProperty("ActivityControl",((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControl, Commvault.Powershell.Models.ActivityControlTypeConverter.ConvertFrom);
            }
            if (content.Contains("PowerManagement"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagement = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("PowerManagement",((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagement, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("FileExceptions"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptions = (Commvault.Powershell.Models.IFileExceptionsDetail) content.GetValueForProperty("FileExceptions",((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptions, Commvault.Powershell.Models.FileExceptionsDetailTypeConverter.ConvertFrom);
            }
            if (content.Contains("Description"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).Description = (string) content.GetValueForProperty("Description",((Commvault.Powershell.Models.IServerGroupInternal)this).Description, global::System.Convert.ToString);
            }
            if (content.Contains("Security"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).Security = (System.Collections.Generic.List<Commvault.Powershell.Models.ISecurityAssoc>) content.GetValueForProperty("Security",((Commvault.Powershell.Models.IServerGroupInternal)this).Security, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.ISecurityAssoc>(__y, Commvault.Powershell.Models.SecurityAssocTypeConverter.ConvertFrom));
            }
            if (content.Contains("AssociatedServers"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).AssociatedServers = (System.Collections.Generic.List<Commvault.Powershell.Models.IServerDetails>) content.GetValueForProperty("AssociatedServers",((Commvault.Powershell.Models.IServerGroupInternal)this).AssociatedServers, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IServerDetails>(__y, Commvault.Powershell.Models.ServerDetailsTypeConverter.ConvertFrom));
            }
            if (content.Contains("BlackoutWindow"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).BlackoutWindow = (System.Collections.Generic.List<Commvault.Powershell.Models.IBlackoutWindowDetails>) content.GetValueForProperty("BlackoutWindow",((Commvault.Powershell.Models.IServerGroupInternal)this).BlackoutWindow, __y => TypeConverterExtensions.SelectToList<Commvault.Powershell.Models.IBlackoutWindowDetails>(__y, Commvault.Powershell.Models.BlackoutWindowDetailsTypeConverter.ConvertFrom));
            }
            if (content.Contains("ServerGroupId"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroupId = (long?) content.GetValueForProperty("ServerGroupId",((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroupId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ServerGroupName"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroupName = (string) content.GetValueForProperty("ServerGroupName",((Commvault.Powershell.Models.IServerGroupInternal)this).ServerGroupName, global::System.Convert.ToString);
            }
            if (content.Contains("GeneralRegion"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralRegion = (Commvault.Powershell.Models.IIdName) content.GetValueForProperty("GeneralRegion",((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralRegion, Commvault.Powershell.Models.IdNameTypeConverter.ConvertFrom);
            }
            if (content.Contains("GeneralEnableDataEncryption"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralEnableDataEncryption = (bool?) content.GetValueForProperty("GeneralEnableDataEncryption",((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralEnableDataEncryption, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("GeneralAutoDiscover"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralAutoDiscover = (bool?) content.GetValueForProperty("GeneralAutoDiscover",((Commvault.Powershell.Models.IServerGroupInternal)this).GeneralAutoDiscover, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ActivityControlDatabackup"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDatabackup = (bool?) content.GetValueForProperty("ActivityControlDatabackup",((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDatabackup, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ActivityControlDataRestore"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDataRestore = (bool?) content.GetValueForProperty("ActivityControlDataRestore",((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDataRestore, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ActivityControlDataAging"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDataAging = (bool?) content.GetValueForProperty("ActivityControlDataAging",((Commvault.Powershell.Models.IServerGroupInternal)this).ActivityControlDataAging, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PowerManagementId"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagementId = (long?) content.GetValueForProperty("PowerManagementId",((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagementId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("PowerManagementName"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagementName = (string) content.GetValueForProperty("PowerManagementName",((Commvault.Powershell.Models.IServerGroupInternal)this).PowerManagementName, global::System.Convert.ToString);
            }
            if (content.Contains("FileExceptionUseGroupFilters"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionUseGroupFilters = (bool?) content.GetValueForProperty("FileExceptionUseGroupFilters",((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionUseGroupFilters, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("FileExceptionWindowsFilters"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionWindowsFilters = (System.Collections.Generic.List<string>) content.GetValueForProperty("FileExceptionWindowsFilters",((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionWindowsFilters, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("FileExceptionUnixFilters"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionUnixFilters = (System.Collections.Generic.List<string>) content.GetValueForProperty("FileExceptionUnixFilters",((Commvault.Powershell.Models.IServerGroupInternal)this).FileExceptionUnixFilters, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("RegionId"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).RegionId = (long?) content.GetValueForProperty("RegionId",((Commvault.Powershell.Models.IServerGroupInternal)this).RegionId, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("RegionName"))
            {
                ((Commvault.Powershell.Models.IServerGroupInternal)this).RegionName = (string) content.GetValueForProperty("RegionName",((Commvault.Powershell.Models.IServerGroupInternal)this).RegionName, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Commvault.Powershell.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    [System.ComponentModel.TypeConverter(typeof(ServerGroupTypeConverter))]
    public partial interface IServerGroup

    {

    }
}