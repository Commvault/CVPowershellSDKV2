// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>
    /// Exception to when a schedule should not run, applicable for Daily weekly and monthly schedules
    /// </summary>
    public partial class ScheduleRunException :
        Commvault.Powershell.Models.IScheduleRunException,
        Commvault.Powershell.Models.IScheduleRunExceptionInternal
    {

        /// <summary>Backing field for <see cref="OnDates" /> property.</summary>
        private System.Collections.Generic.List<long> _onDates;

        /// <summary>list of dates in a month. For ex: 1, 20</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<long> OnDates { get => this._onDates; set => this._onDates = value; }

        /// <summary>Backing field for <see cref="OnDayOfTheWeek" /> property.</summary>
        private System.Collections.Generic.List<string> _onDayOfTheWeek;

        /// <summary>On which days, for ex: MONDAY, FRIDAY</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> OnDayOfTheWeek { get => this._onDayOfTheWeek; set => this._onDayOfTheWeek = value; }

        /// <summary>Backing field for <see cref="OnWeekOfTheMonth" /> property.</summary>
        private System.Collections.Generic.List<string> _onWeekOfTheMonth;

        /// <summary>On which week of month, for ex: FIRST, LAST</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> OnWeekOfTheMonth { get => this._onWeekOfTheMonth; set => this._onWeekOfTheMonth = value; }

        /// <summary>Creates an new <see cref="ScheduleRunException" /> instance.</summary>
        public ScheduleRunException()
        {

        }
    }
    /// Exception to when a schedule should not run, applicable for Daily weekly and monthly schedules
    public partial interface IScheduleRunException :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>list of dates in a month. For ex: 1, 20</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"list of dates in a month. For ex: 1, 20",
        SerializedName = @"onDates",
        PossibleTypes = new [] { typeof(long) })]
        System.Collections.Generic.List<long> OnDates { get; set; }
        /// <summary>On which days, for ex: MONDAY, FRIDAY</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"On which days, for ex: MONDAY, FRIDAY",
        SerializedName = @"onDayOfTheWeek",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> OnDayOfTheWeek { get; set; }
        /// <summary>On which week of month, for ex: FIRST, LAST</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"On which week of month, for ex: FIRST, LAST",
        SerializedName = @"onWeekOfTheMonth",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> OnWeekOfTheMonth { get; set; }

    }
    /// Exception to when a schedule should not run, applicable for Daily weekly and monthly schedules
    internal partial interface IScheduleRunExceptionInternal

    {
        /// <summary>list of dates in a month. For ex: 1, 20</summary>
        System.Collections.Generic.List<long> OnDates { get; set; }
        /// <summary>On which days, for ex: MONDAY, FRIDAY</summary>
        System.Collections.Generic.List<string> OnDayOfTheWeek { get; set; }
        /// <summary>On which week of month, for ex: FIRST, LAST</summary>
        System.Collections.Generic.List<string> OnWeekOfTheMonth { get; set; }

    }
}