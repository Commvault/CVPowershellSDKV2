// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.708)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    public partial class LaptopsAdminConsole :
        Commvault.Powershell.Models.ILaptopsAdminConsole,
        Commvault.Powershell.Models.ILaptopsAdminConsoleInternal
    {

        /// <summary>Internal Acessors for LastBackupJobInfo</summary>
        Commvault.Powershell.Models.ILastBackupJobInfo Commvault.Powershell.Models.ILaptopsAdminConsoleInternal.LastBackupJobInfo { get => (this._lastBackupJobInfo = this._lastBackupJobInfo ?? new Commvault.Powershell.Models.LastBackupJobInfo()); set { {_lastBackupJobInfo = value;} } }

        /// <summary>Internal Acessors for Plan</summary>
        Commvault.Powershell.Models.IIdName Commvault.Powershell.Models.ILaptopsAdminConsoleInternal.Plan { get => (this._plan = this._plan ?? new Commvault.Powershell.Models.IdName()); set { {_plan = value;} } }

        /// <summary>Internal Acessors for Sla</summary>
        Commvault.Powershell.Models.ISlaDetails Commvault.Powershell.Models.ILaptopsAdminConsoleInternal.Sla { get => (this._sla = this._sla ?? new Commvault.Powershell.Models.SlaDetails()); set { {_sla = value;} } }

        /// <summary>Backing field for <see cref="Configured" /> property.</summary>
        private bool? _configured;

        /// <summary>defines if the laptop is configured or not</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? Configured { get => this._configured; set => this._configured = value; }

        /// <summary>Backing field for <see cref="Email" /> property.</summary>
        private string _email;

        /// <summary>comma seperated value for email of the laptop</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Email { get => this._email; set => this._email = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private long? _id;

        /// <summary>id of the laptop</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="LastBackupJobInfo" /> property.</summary>
        private Commvault.Powershell.Models.ILastBackupJobInfo _lastBackupJobInfo;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ILastBackupJobInfo LastBackupJobInfo { get => (this._lastBackupJobInfo = this._lastBackupJobInfo ?? new Commvault.Powershell.Models.LastBackupJobInfo()); set => this._lastBackupJobInfo = value; }

        /// <summary>Gives the reason for the last backup job failing, if the last backup job fails.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string LastBackupJobInfoFailureReason { get => ((Commvault.Powershell.Models.ILastBackupJobInfoInternal)LastBackupJobInfo).FailureReason; set => ((Commvault.Powershell.Models.ILastBackupJobInfoInternal)LastBackupJobInfo).FailureReason = value ?? null; }

        /// <summary>Returns the job id of the last backup job performed.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? LastBackupJobInfoJobId { get => ((Commvault.Powershell.Models.ILastBackupJobInfoInternal)LastBackupJobInfo).JobId; set => ((Commvault.Powershell.Models.ILastBackupJobInfoInternal)LastBackupJobInfo).JobId = value ?? default(long); }

        /// <summary>Status of the last backup job performed.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string LastBackupJobInfoStatus { get => ((Commvault.Powershell.Models.ILastBackupJobInfoInternal)LastBackupJobInfo).Status; set => ((Commvault.Powershell.Models.ILastBackupJobInfoInternal)LastBackupJobInfo).Status = value ?? null; }

        /// <summary>
        /// Shows the time when the last back up job was carried out. The time is provided in unix time format.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? LastBackupJobInfoTime { get => ((Commvault.Powershell.Models.ILastBackupJobInfoInternal)LastBackupJobInfo).Time; set => ((Commvault.Powershell.Models.ILastBackupJobInfoInternal)LastBackupJobInfo).Time = value ?? default(long); }

        /// <summary>Backing field for <see cref="LastSuccessfulBackup" /> property.</summary>
        private long? _lastSuccessfulBackup;

        /// <summary>time (in unix timestamp) for the last successful backup</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? LastSuccessfulBackup { get => this._lastSuccessfulBackup; set => this._lastSuccessfulBackup = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>name of the laptop</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Owners" /> property.</summary>
        private System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> _owners;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> Owners { get => this._owners; set => this._owners = value; }

        /// <summary>Backing field for <see cref="Plan" /> property.</summary>
        private Commvault.Powershell.Models.IIdName _plan;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.IIdName Plan { get => (this._plan = this._plan ?? new Commvault.Powershell.Models.IdName()); set => this._plan = value; }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public long? PlanId { get => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Id; set => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Id = value ?? default(long); }

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string PlanName { get => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Name; set => ((Commvault.Powershell.Models.IIdNameInternal)Plan).Name = value ?? null; }

        /// <summary>Backing field for <see cref="Sla" /> property.</summary>
        private Commvault.Powershell.Models.ISlaDetails _sla;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        internal Commvault.Powershell.Models.ISlaDetails Sla { get => (this._sla = this._sla ?? new Commvault.Powershell.Models.SlaDetails()); set => this._sla = value; }

        /// <summary>Backing field for <see cref="SlaReason" /> property.</summary>
        private string _slaReason;

        /// <summary>reason for the current sla status</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string SlaReason { get => this._slaReason; set => this._slaReason = value; }

        /// <summary>Provides a reason on why the SLA might not be met.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IReasonDetails> SlaReasonList { get => ((Commvault.Powershell.Models.ISlaDetailsInternal)Sla).ReasonList; set => ((Commvault.Powershell.Models.ISlaDetailsInternal)Sla).ReasonList = value ?? null /* arrayOf */; }

        /// <summary>Provides the SLA status.</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Inlined)]
        public string SlaStatus { get => ((Commvault.Powershell.Models.ISlaDetailsInternal)Sla).Status; set => ((Commvault.Powershell.Models.ISlaDetailsInternal)Sla).Status = value ?? null; }

        /// <summary>Backing field for <see cref="Tags" /> property.</summary>
        private System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameType> _tags;

        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameType> Tags { get => this._tags; set => this._tags = value; }

        /// <summary>Backing field for <see cref="TotalBackupSize" /> property.</summary>
        private long? _totalBackupSize;

        /// <summary>application size (in bytes) for the laptop</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? TotalBackupSize { get => this._totalBackupSize; set => this._totalBackupSize = value; }

        /// <summary>Backing field for <see cref="Username" /> property.</summary>
        private string _username;

        /// <summary>comma seperated value for username of the laptop</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Username { get => this._username; set => this._username = value; }

        /// <summary>Creates an new <see cref="LaptopsAdminConsole" /> instance.</summary>
        public LaptopsAdminConsole()
        {

        }
    }
    public partial interface ILaptopsAdminConsole :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>defines if the laptop is configured or not</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"defines if the laptop is configured or not",
        SerializedName = @"configured",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Configured { get; set; }
        /// <summary>comma seperated value for email of the laptop</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"comma seperated value for email of the laptop",
        SerializedName = @"email",
        PossibleTypes = new [] { typeof(string) })]
        string Email { get; set; }
        /// <summary>id of the laptop</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"id of the laptop",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? Id { get; set; }
        /// <summary>Gives the reason for the last backup job failing, if the last backup job fails.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gives the reason for the last backup job failing, if the last backup job fails.",
        SerializedName = @"failureReason",
        PossibleTypes = new [] { typeof(string) })]
        string LastBackupJobInfoFailureReason { get; set; }
        /// <summary>Returns the job id of the last backup job performed.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Returns the job id of the last backup job performed.",
        SerializedName = @"jobId",
        PossibleTypes = new [] { typeof(long) })]
        long? LastBackupJobInfoJobId { get; set; }
        /// <summary>Status of the last backup job performed.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Status of the last backup job performed.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string LastBackupJobInfoStatus { get; set; }
        /// <summary>
        /// Shows the time when the last back up job was carried out. The time is provided in unix time format.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Shows the time when the last back up job was carried out. The time is provided in unix time format.",
        SerializedName = @"time",
        PossibleTypes = new [] { typeof(long) })]
        long? LastBackupJobInfoTime { get; set; }
        /// <summary>time (in unix timestamp) for the last successful backup</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"time (in unix timestamp) for the last successful backup",
        SerializedName = @"lastSuccessfulBackup",
        PossibleTypes = new [] { typeof(long) })]
        long? LastSuccessfulBackup { get; set; }
        /// <summary>name of the laptop</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"name of the laptop",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"owners",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdName) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> Owners { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? PlanId { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string PlanName { get; set; }
        /// <summary>reason for the current sla status</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"reason for the current sla status",
        SerializedName = @"slaReason",
        PossibleTypes = new [] { typeof(string) })]
        string SlaReason { get; set; }
        /// <summary>Provides a reason on why the SLA might not be met.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Provides a reason on why the SLA might not be met.",
        SerializedName = @"reasonList",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IReasonDetails) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IReasonDetails> SlaReasonList { get; set; }
        /// <summary>Provides the SLA status.</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Provides the SLA status.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string SlaStatus { get; set; }

        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Commvault.Powershell.Models.IIdNameType) })]
        System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameType> Tags { get; set; }
        /// <summary>application size (in bytes) for the laptop</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"application size (in bytes) for the laptop",
        SerializedName = @"totalBackupSize",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalBackupSize { get; set; }
        /// <summary>comma seperated value for username of the laptop</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"comma seperated value for username of the laptop",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string Username { get; set; }

    }
    internal partial interface ILaptopsAdminConsoleInternal

    {
        /// <summary>defines if the laptop is configured or not</summary>
        bool? Configured { get; set; }
        /// <summary>comma seperated value for email of the laptop</summary>
        string Email { get; set; }
        /// <summary>id of the laptop</summary>
        long? Id { get; set; }

        Commvault.Powershell.Models.ILastBackupJobInfo LastBackupJobInfo { get; set; }
        /// <summary>Gives the reason for the last backup job failing, if the last backup job fails.</summary>
        string LastBackupJobInfoFailureReason { get; set; }
        /// <summary>Returns the job id of the last backup job performed.</summary>
        long? LastBackupJobInfoJobId { get; set; }
        /// <summary>Status of the last backup job performed.</summary>
        string LastBackupJobInfoStatus { get; set; }
        /// <summary>
        /// Shows the time when the last back up job was carried out. The time is provided in unix time format.
        /// </summary>
        long? LastBackupJobInfoTime { get; set; }
        /// <summary>time (in unix timestamp) for the last successful backup</summary>
        long? LastSuccessfulBackup { get; set; }
        /// <summary>name of the laptop</summary>
        string Name { get; set; }

        System.Collections.Generic.List<Commvault.Powershell.Models.IIdName> Owners { get; set; }

        Commvault.Powershell.Models.IIdName Plan { get; set; }

        long? PlanId { get; set; }

        string PlanName { get; set; }

        Commvault.Powershell.Models.ISlaDetails Sla { get; set; }
        /// <summary>reason for the current sla status</summary>
        string SlaReason { get; set; }
        /// <summary>Provides a reason on why the SLA might not be met.</summary>
        System.Collections.Generic.List<Commvault.Powershell.Models.IReasonDetails> SlaReasonList { get; set; }
        /// <summary>Provides the SLA status.</summary>
        string SlaStatus { get; set; }

        System.Collections.Generic.List<Commvault.Powershell.Models.IIdNameType> Tags { get; set; }
        /// <summary>application size (in bytes) for the laptop</summary>
        long? TotalBackupSize { get; set; }
        /// <summary>comma seperated value for username of the laptop</summary>
        string Username { get; set; }

    }
}