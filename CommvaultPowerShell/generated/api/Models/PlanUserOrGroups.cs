// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.2, generator: @autorest/powershell@3.0.494)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Commvault.Powershell.Models
{
    using static Commvault.Powershell.Runtime.Extensions;

    /// <summary>Users or User Groups associated with the plan</summary>
    public partial class PlanUserOrGroups :
        Commvault.Powershell.Models.IPlanUserOrGroups,
        Commvault.Powershell.Models.IPlanUserOrGroupsInternal
    {

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private long? _id;

        /// <summary>This gives Id of user or user group or external user group</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public long? Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>This gives name of user or user group or external user group</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="SendInvite" /> property.</summary>
        private bool? _sendInvite;

        /// <summary>
        /// If set to true, will send an invite email to the user or group. Default is true.
        /// </summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public bool? SendInvite { get => this._sendInvite; set => this._sendInvite = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>Tells what kind of user or user group it is</summary>
        [Commvault.Powershell.Origin(Commvault.Powershell.PropertyOrigin.Owned)]
        public string Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="PlanUserOrGroups" /> instance.</summary>
        public PlanUserOrGroups()
        {

        }
    }
    /// Users or User Groups associated with the plan
    public partial interface IPlanUserOrGroups :
        Commvault.Powershell.Runtime.IJsonSerializable
    {
        /// <summary>This gives Id of user or user group or external user group</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This gives Id of user or user group or external user group",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(long) })]
        long? Id { get; set; }
        /// <summary>This gives name of user or user group or external user group</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This gives name of user or user group or external user group",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// If set to true, will send an invite email to the user or group. Default is true.
        /// </summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If set to true, will send an invite email to the user or group. Default is true.",
        SerializedName = @"sendInvite",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SendInvite { get; set; }
        /// <summary>Tells what kind of user or user group it is</summary>
        [Commvault.Powershell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tells what kind of user or user group it is",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get; set; }

    }
    /// Users or User Groups associated with the plan
    internal partial interface IPlanUserOrGroupsInternal

    {
        /// <summary>This gives Id of user or user group or external user group</summary>
        long? Id { get; set; }
        /// <summary>This gives name of user or user group or external user group</summary>
        string Name { get; set; }
        /// <summary>
        /// If set to true, will send an invite email to the user or group. Default is true.
        /// </summary>
        bool? SendInvite { get; set; }
        /// <summary>Tells what kind of user or user group it is</summary>
        string Type { get; set; }

    }
}